''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2005-2007, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Determinant calculation of the matrix given by LDLT decomposition.
'
'Input parameters:
'    A       -   LDLT-decomposition of the matrix,
'                output of subroutine SMatrixLDLT.
'    Pivots  -   table of permutations which were made during
'                LDLT decomposition, output of subroutine SMatrixLDLT.
'    N       -   size of matrix A.
'    IsUpper -   matrix storage format. The value is equal to the input
'                parameter of subroutine SMatrixLDLT.
'
'Result:
'    matrix determinant.
'
'  -- ALGLIB --
'     Copyright 2005-2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function SMatrixLDLTDet(ByRef A() As Double, _
         ByRef Pivots() As Long, _
         ByVal N As Long, _
         ByVal IsUpper As Boolean) As Double
    Dim Result As Double
    Dim K As Long
    Result = 1#
    If IsUpper Then
        K = 0#
        Do While K < N
            If Pivots(K) >= 0# Then
                Result = Result * A(K, K)
                K = K + 1#
            Else
                Result = Result * (A(K, K) * A(K + 1#, K + 1#) - A(K, K + 1#) * A(K, K + 1#))
                K = K + 2#
            End If
        Loop
    Else
        K = N - 1#
        Do While K >= 0#
            If Pivots(K) >= 0# Then
                Result = Result * A(K, K)
                K = K - 1#
            Else
                Result = Result * (A(K - 1#, K - 1#) * A(K, K) - A(K, K - 1#) * A(K, K - 1#))
                K = K - 2#
            End If
        Loop
    End If
    SMatrixLDLTDet = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Determinant calculation of the symmetric matrix
'
'Input parameters:
'    A       -   matrix. Array with elements [0..N-1, 0..N-1].
'    N       -   size of matrix A.
'    IsUpper -   if IsUpper = True, then symmetric matrix A is given by its
'                upper triangle, and the lower triangle isn’t used by
'                subroutine. Similarly, if IsUpper = False, then A is given
'                by its lower triangle.
'
'Result:
'    determinant of matrix A.
'
'  -- ALGLIB --
'     Copyright 2005-2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function SMatrixDet(ByRef A_() As Double, _
         ByVal N As Long, _
         ByVal IsUpper As Boolean) As Double
    Dim Result As Double
    Dim A() As Double
    Dim Pivots() As Long
    A = A_
    Call SMatrixLDLT(A, N, IsUpper, Pivots)
    Result = SMatrixLDLTDet(A, Pivots, N, IsUpper)
    SMatrixDet = Result
End Function
Public Function DeterminantLDLT(ByRef A() As Double, _
         ByRef Pivots() As Long, _
         ByVal N As Long, _
         ByVal IsUpper As Boolean) As Double
    Dim Result As Double
    Dim K As Long
    Result = 1#
    If IsUpper Then
        K = 1#
        Do While K <= N
            If Pivots(K) > 0# Then
                Result = Result * A(K, K)
                K = K + 1#
            Else
                Result = Result * (A(K, K) * A(K + 1#, K + 1#) - A(K, K + 1#) * A(K, K + 1#))
                K = K + 2#
            End If
        Loop
    Else
        K = N
        Do While K >= 1#
            If Pivots(K) > 0# Then
                Result = Result * A(K, K)
                K = K - 1#
            Else
                Result = Result * (A(K - 1#, K - 1#) * A(K, K) - A(K, K - 1#) * A(K, K - 1#))
                K = K - 2#
            End If
        Loop
    End If
    DeterminantLDLT = Result
End Function
Public Function DeterminantSymmetric(ByRef A_() As Double, _
         ByVal N As Long, _
         ByVal IsUpper As Boolean) As Double
    Dim Result As Double
    Dim A() As Double
    Dim Pivots() As Long
    A = A_
    Call LDLTDecomposition(A, N, IsUpper, Pivots)
    Result = DeterminantLDLT(A, Pivots, N, IsUpper)
    DeterminantSymmetric = Result
End Function
