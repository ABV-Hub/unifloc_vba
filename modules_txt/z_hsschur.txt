''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 1992-2007 The University of Tennessee.  All rights reserved.
'
'Contributors:
'    * Sergey Bochkanov (ALGLIB project). Translation from FORTRAN to
'      pseudocode.
'
'See subroutines comments for additional copyrights.
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Subroutine performing  the  Schur  decomposition  of  a  matrix  in  upper
'Hessenberg form using the QR algorithm with multiple shifts.
'
'The  source matrix  H  is  represented as  S'*H*S = T, where H - matrix in
'upper Hessenberg form,  S - orthogonal matrix (Schur vectors),   T - upper
'quasi-triangular matrix (with blocks of sizes  1x1  and  2x2  on  the main
'diagonal).
'
'Input parameters:
'    H   -   matrix to be decomposed.
'            Array whose indexes range within [1..N, 1..N].
'    N   -   size of H, N>=0.
'
'
'Output parameters:
'    H   –   contains the matrix T.
'            Array whose indexes range within [1..N, 1..N].
'            All elements below the blocks on the main diagonal are equal
'            to 0.
'    S   -   contains Schur vectors.
'            Array whose indexes range within [1..N, 1..N].
'
'Note 1:
'    The block structure of matrix T could be easily recognized: since  all
'    the elements  below  the blocks are zeros, the elements a[i+1,i] which
'    are equal to 0 show the block border.
'
'Note 2:
'    the algorithm  performance  depends  on  the  value  of  the  internal
'    parameter NS of InternalSchurDecomposition  subroutine  which  defines
'    the number of shifts in the QR algorithm (analog of  the  block  width
'    in block matrix algorithms in linear algebra). If you require  maximum
'    performance  on  your  machine,  it  is  recommended  to  adjust  this
'    parameter manually.
'
'Result:
'    True, if the algorithm has converged and the parameters H and S contain
'        the result.
'    False, if the algorithm has not converged.
'
'Algorithm implemented on the basis of subroutine DHSEQR (LAPACK 3.0 library).
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function UpperHessenbergSchurDecomposition(ByRef H() As Double, _
         ByVal N As Long, _
         ByRef S() As Double) As Boolean
    Dim Result As Boolean
    Dim WI() As Double
    Dim WR() As Double
    Dim Info As Long
    Call InternalSchurDecomposition(H, N, 1#, 2#, WR, WI, S, Info)
    Result = Info = 0#
    UpperHessenbergSchurDecomposition = Result
End Function
Public Sub InternalSchurDecomposition(ByRef H() As Double, _
         ByVal N As Long, _
         ByVal TNeeded As Long, _
         ByVal ZNeeded As Long, _
         ByRef WR() As Double, _
         ByRef WI() As Double, _
         ByRef z() As Double, _
         ByRef Info As Long)
    Dim WORK() As Double
    Dim i As Long
    Dim I1 As Long
    Dim I2 As Long
    Dim IERR As Long
    Dim II As Long
    Dim ITEMP As Long
    Dim ITN As Long
    Dim ITS As Long
    Dim J As Long
    Dim K As Long
    Dim L As Long
    Dim MAXB As Long
    Dim NR As Long
    Dim NS As Long
    Dim NV As Long
    Dim ABSW As Double
    Dim OVFL As Double
    Dim SMLNUM As Double
    Dim Tau As Double
    Dim Temp As Double
    Dim TST1 As Double
    Dim Ulp As Double
    Dim UNFL As Double
    Dim S() As Double
    Dim V() As Double
    Dim VV() As Double
    Dim WORKC1() As Double
    Dim WORKS1() As Double
    Dim WORKV3() As Double
    Dim TmpWR() As Double
    Dim TmpWI() As Double
    Dim INITZ As Boolean
    Dim WANTT As Boolean
    Dim WANTZ As Boolean
    Dim CNST As Double
    Dim FailFlag As Boolean
    Dim P1 As Long
    Dim P2 As Long
    Dim VT As Double
    Dim i_ As Long
    Dim i1_ As Long
    
    '
    ' Set the order of the multi-shift QR algorithm to be used.
    ' If you want to tune algorithm, change this values
    '
    NS = 12#
    MAXB = 50#
    
    '
    ' Now 2 < NS <= MAXB < NH.
    '
    MAXB = MaxInt(3#, MAXB)
    NS = MinInt(MAXB, NS)
    
    '
    ' Initialize
    '
    CNST = 1.5
    ReDim WORK(1# To MaxInt(N, 1#))
    ReDim S(1# To NS, 1# To NS)
    ReDim V(1# To NS + 1#)
    ReDim VV(1# To NS + 1#)
    ReDim WR(1# To MaxInt(N, 1#))
    ReDim WI(1# To MaxInt(N, 1#))
    ReDim WORKC1(1# To 1#)
    ReDim WORKS1(1# To 1#)
    ReDim WORKV3(1# To 3#)
    ReDim TmpWR(1# To MaxInt(N, 1#))
    ReDim TmpWI(1# To MaxInt(N, 1#))
    WANTT = TNeeded = 1#
    INITZ = ZNeeded = 2#
    WANTZ = ZNeeded <> 0#
    Info = 0#
    
    '
    ' Initialize Z, if necessary
    '
    If INITZ Then
        ReDim z(1# To N, 1# To N)
        For i = 1# To N Step 1
            For J = 1# To N Step 1
                If i = J Then
                    z(i, J) = 1#
                Else
                    z(i, J) = 0#
                End If
            Next J
        Next i
    End If
    
    '
    ' Quick return if possible
    '
    If N = 0# Then
        Exit Sub
    End If
    If N = 1# Then
        WR(1#) = H(1#, 1#)
        WI(1#) = 0#
        Exit Sub
    End If
    
    '
    ' Set rows and columns 1 to N to zero below the first
    ' subdiagonal.
    '
    For J = 1# To N - 2# Step 1
        For i = J + 2# To N Step 1
            H(i, J) = 0#
        Next i
    Next J
    
    '
    ' Test if N is sufficiently small
    '
    If NS <= 2# Or NS > N Or MAXB >= N Then
        
        '
        ' Use the standard double-shift algorithm
        '
        Call InternalAuxSchur(WANTT, WANTZ, N, 1#, N, H, WR, WI, 1#, N, z, WORK, WORKV3, WORKC1, WORKS1, Info)
        
        '
        ' fill entries under diagonal blocks of T with zeros
        '
        If WANTT Then
            J = 1#
            Do While J <= N
                If WI(J) = 0# Then
                    For i = J + 1# To N Step 1
                        H(i, J) = 0#
                    Next i
                    J = J + 1#
                Else
                    For i = J + 2# To N Step 1
                        H(i, J) = 0#
                        H(i, J + 1#) = 0#
                    Next i
                    J = J + 2#
                End If
            Loop
        End If
        Exit Sub
    End If
    UNFL = MinRealNumber
    OVFL = 1# / UNFL
    Ulp = 2# * MachineEpsilon
    SMLNUM = UNFL * (N / Ulp)
    
    '
    ' I1 and I2 are the indices of the first row and last column of H
    ' to which transformations must be applied. If eigenvalues only are
    ' being computed, I1 and I2 are set inside the main loop.
    '
    I1 = 1#
    I2 = N
    
    '
    ' ITN is the total number of multiple-shift QR iterations allowed.
    '
    ITN = 30# * N
    
    '
    ' The main loop begins here. I is the loop index and decreases from
    ' IHI to ILO in steps of at most MAXB. Each iteration of the loop
    ' works with the active submatrix in rows and columns L to I.
    ' Eigenvalues I+1 to IHI have already converged. Either L = ILO or
    ' H(L,L-1) is negligible so that the matrix splits.
    '
    i = N
    Do While True
        L = 1#
        If i < 1# Then
            
            '
            ' fill entries under diagonal blocks of T with zeros
            '
            If WANTT Then
                J = 1#
                Do While J <= N
                    If WI(J) = 0# Then
                        For i = J + 1# To N Step 1
                            H(i, J) = 0#
                        Next i
                        J = J + 1#
                    Else
                        For i = J + 2# To N Step 1
                            H(i, J) = 0#
                            H(i, J + 1#) = 0#
                        Next i
                        J = J + 2#
                    End If
                Loop
            End If
            
            '
            ' Exit
            '
            Exit Sub
        End If
        
        '
        ' Perform multiple-shift QR iterations on rows and columns ILO to I
        ' until a submatrix of order at most MAXB splits off at the bottom
        ' because a subdiagonal element has become negligible.
        '
        FailFlag = True
        For ITS = 0# To ITN Step 1
            
            '
            ' Look for a single small subdiagonal element.
            '
            For K = i To L + 1# Step -1
                TST1 = Abs(H(K - 1#, K - 1#)) + Abs(H(K, K))
                If TST1 = 0# Then
                    TST1 = UpperHessenberg1Norm(H, L, i, L, i, WORK)
                End If
                If Abs(H(K, K - 1#)) <= MaxReal(Ulp * TST1, SMLNUM) Then
                    Exit For
                End If
            Next K
            L = K
            If L > 1# Then
                
                '
                ' H(L,L-1) is negligible.
                '
                H(L, L - 1#) = 0#
            End If
            
            '
            ' Exit from loop if a submatrix of order <= MAXB has split off.
            '
            If L >= i - MAXB + 1# Then
                FailFlag = False
                Exit For
            End If
            
            '
            ' Now the active submatrix is in rows and columns L to I. If
            ' eigenvalues only are being computed, only the active submatrix
            ' need be transformed.
            '
            If ITS = 20# Or ITS = 30# Then
                
                '
                ' Exceptional shifts.
                '
                For II = i - NS + 1# To i Step 1
                    WR(II) = CNST * (Abs(H(II, II - 1#)) + Abs(H(II, II)))
                    WI(II) = 0#
                Next II
            Else
                
                '
                ' Use eigenvalues of trailing submatrix of order NS as shifts.
                '
                Call CopyMatrix(H, i - NS + 1#, i, i - NS + 1#, i, S, 1#, NS, 1#, NS)
                Call InternalAuxSchur(False, False, NS, 1#, NS, S, TmpWR, TmpWI, 1#, NS, z, WORK, WORKV3, WORKC1, WORKS1, IERR)
                For P1 = 1# To NS Step 1
                    WR(i - NS + P1) = TmpWR(P1)
                    WI(i - NS + P1) = TmpWI(P1)
                Next P1
                If IERR > 0# Then
                    
                    '
                    ' If DLAHQR failed to compute all NS eigenvalues, use the
                    ' unconverged diagonal elements as the remaining shifts.
                    '
                    For II = 1# To IERR Step 1
                        WR(i - NS + II) = S(II, II)
                        WI(i - NS + II) = 0#
                    Next II
                End If
            End If
            
            '
            ' Form the first column of (G-w(1)) (G-w(2)) . . . (G-w(ns))
            ' where G is the Hessenberg submatrix H(L:I,L:I) and w is
            ' the vector of shifts (stored in WR and WI). The result is
            ' stored in the local array V.
            '
            V(1#) = 1#
            For II = 2# To NS + 1# Step 1
                V(II) = 0#
            Next II
            NV = 1#
            For J = i - NS + 1# To i Step 1
                If WI(J) >= 0# Then
                    If WI(J) = 0# Then
                        
                        '
                        ' real shift
                        '
                        P1 = NV + 1#
                        For i_ = 1# To P1 Step 1
                            VV(i_) = V(i_)
                        Next i_
                        Call MatrixVectorMultiply(H, L, L + NV, L, L + NV - 1#, False, VV, 1#, NV, 1#, V, 1#, NV + 1#, -WR(J))
                        NV = NV + 1#
                    Else
                        If WI(J) > 0# Then
                            
                            '
                            ' complex conjugate pair of shifts
                            '
                            P1 = NV + 1#
                            For i_ = 1# To P1 Step 1
                                VV(i_) = V(i_)
                            Next i_
                            Call MatrixVectorMultiply(H, L, L + NV, L, L + NV - 1#, False, V, 1#, NV, 1#, VV, 1#, NV + 1#, -(2# * WR(J)))
                            ITEMP = VectorIdxAbsMax(VV, 1#, NV + 1#)
                            Temp = 1# / MaxReal(Abs(VV(ITEMP)), SMLNUM)
                            P1 = NV + 1#
                            For i_ = 1# To P1 Step 1
                                VV(i_) = Temp * VV(i_)
                            Next i_
                            ABSW = Pythag2(WR(J), WI(J))
                            Temp = Temp * ABSW * ABSW
                            Call MatrixVectorMultiply(H, L, L + NV + 1#, L, L + NV, False, VV, 1#, NV + 1#, 1#, V, 1#, NV + 2#, Temp)
                            NV = NV + 2#
                        End If
                    End If
                    
                    '
                    ' Scale V(1:NV) so that max(abs(V(i))) = 1. If V is zero,
                    ' reset it to the unit vector.
                    '
                    ITEMP = VectorIdxAbsMax(V, 1#, NV)
                    Temp = Abs(V(ITEMP))
                    If Temp = 0# Then
                        V(1#) = 1#
                        For II = 2# To NV Step 1
                            V(II) = 0#
                        Next II
                    Else
                        Temp = MaxReal(Temp, SMLNUM)
                        VT = 1# / Temp
                        For i_ = 1# To NV Step 1
                            V(i_) = VT * V(i_)
                        Next i_
                    End If
                End If
            Next J
            
            '
            ' Multiple-shift QR step
            '
            For K = L To i - 1# Step 1
                
                '
                ' The first iteration of this loop determines a reflection G
                ' from the vector V and applies it from left and right to H,
                ' thus creating a nonzero bulge below the subdiagonal.
                '
                ' Each subsequent iteration determines a reflection G to
                ' restore the Hessenberg form in the (K-1)th column, and thus
                ' chases the bulge one step toward the bottom of the active
                ' submatrix. NR is the order of G.
                '
                NR = MinInt(NS + 1#, i - K + 1#)
                If K > L Then
                    P1 = K - 1#
                    P2 = K + NR - 1#
                    i1_ = (K) - (1#)
                    For i_ = 1# To NR Step 1
                        V(i_) = H(i_ + i1_, P1)
                    Next i_
                End If
                Call GenerateReflection(V, NR, Tau)
                If K > L Then
                    H(K, K - 1#) = V(1#)
                    For II = K + 1# To i Step 1
                        H(II, K - 1#) = 0#
                    Next II
                End If
                V(1#) = 1#
                
                '
                ' Apply G from the left to transform the rows of the matrix in
                ' columns K to I2.
                '
                Call ApplyReflectionFromTheLeft(H, Tau, V, K, K + NR - 1#, K, I2, WORK)
                
                '
                ' Apply G from the right to transform the columns of the
                ' matrix in rows I1 to min(K+NR,I).
                '
                Call ApplyReflectionFromTheRight(H, Tau, V, I1, MinInt(K + NR, i), K, K + NR - 1#, WORK)
                If WANTZ Then
                    
                    '
                    ' Accumulate transformations in the matrix Z
                    '
                    Call ApplyReflectionFromTheRight(z, Tau, V, 1#, N, K, K + NR - 1#, WORK)
                End If
            Next K
        Next ITS
        
        '
        ' Failure to converge in remaining number of iterations
        '
        If FailFlag Then
            Info = i
            Exit Sub
        End If
        
        '
        ' A submatrix of order <= MAXB in rows and columns L to I has split
        ' off. Use the double-shift QR algorithm to handle it.
        '
        Call InternalAuxSchur(WANTT, WANTZ, N, L, i, H, WR, WI, 1#, N, z, WORK, WORKV3, WORKC1, WORKS1, Info)
        If Info > 0# Then
            Exit Sub
        End If
        
        '
        ' Decrement number of remaining iterations, and return to start of
        ' the main loop with a new value of I.
        '
        ITN = ITN - ITS
        i = L - 1#
    Loop
End Sub
Private Sub InternalAuxSchur(ByVal WANTT As Boolean, _
         ByVal WANTZ As Boolean, _
         ByVal N As Long, _
         ByVal ILO As Long, _
         ByVal IHI As Long, _
         ByRef H() As Double, _
         ByRef WR() As Double, _
         ByRef WI() As Double, _
         ByVal ILOZ As Long, _
         ByVal IHIZ As Long, _
         ByRef z() As Double, _
         ByRef WORK() As Double, _
         ByRef WORKV3() As Double, _
         ByRef WORKC1() As Double, _
         ByRef WORKS1() As Double, _
         ByRef Info As Long)
    Dim i As Long
    Dim I1 As Long
    Dim I2 As Long
    Dim ITN As Long
    Dim ITS As Long
    Dim J As Long
    Dim K As Long
    Dim L As Long
    Dim M As Long
    Dim NH As Long
    Dim NR As Long
    Dim nz As Long
    Dim AVE As Double
    Dim CS As Double
    Dim DISC As Double
    Dim H00 As Double
    Dim H10 As Double
    Dim H11 As Double
    Dim H12 As Double
    Dim H21 As Double
    Dim H22 As Double
    Dim H33 As Double
    Dim H33S As Double
    Dim H43H34 As Double
    Dim H44 As Double
    Dim H44S As Double
    Dim OVFL As Double
    Dim S As Double
    Dim SMLNUM As Double
    Dim SN As Double
    Dim SUM As Double
    Dim T1 As Double
    Dim T2 As Double
    Dim T3 As Double
    Dim TST1 As Double
    Dim UNFL As Double
    Dim V1 As Double
    Dim V2 As Double
    Dim V3 As Double
    Dim FailFlag As Boolean
    Dim DAT1 As Double
    Dim DAT2 As Double
    Dim P1 As Long
    Dim HIM1IM1 As Double
    Dim HIM1I As Double
    Dim HIIM1 As Double
    Dim HII As Double
    Dim WRIM1 As Double
    Dim WRI As Double
    Dim WIIM1 As Double
    Dim WII As Double
    Dim Ulp As Double
    Info = 0#
    DAT1 = 0.75
    DAT2 = -0.4375
    Ulp = MachineEpsilon
    
    '
    ' Quick return if possible
    '
    If N = 0# Then
        Exit Sub
    End If
    If ILO = IHI Then
        WR(ILO) = H(ILO, ILO)
        WI(ILO) = 0#
        Exit Sub
    End If
    NH = IHI - ILO + 1#
    nz = IHIZ - ILOZ + 1#
    
    '
    ' Set machine-dependent constants for the stopping criterion.
    ' If norm(H) <= sqrt(OVFL), overflow should not occur.
    '
    UNFL = MinRealNumber
    OVFL = 1# / UNFL
    SMLNUM = UNFL * (NH / Ulp)
    
    '
    ' I1 and I2 are the indices of the first row and last column of H
    ' to which transformations must be applied. If eigenvalues only are
    ' being computed, I1 and I2 are set inside the main loop.
    '
    I1 = 1#
    I2 = N
    
    '
    ' ITN is the total number of QR iterations allowed.
    '
    ITN = 30# * NH
    
    '
    ' The main loop begins here. I is the loop index and decreases from
    ' IHI to ILO in steps of 1 or 2. Each iteration of the loop works
    ' with the active submatrix in rows and columns L to I.
    ' Eigenvalues I+1 to IHI have already converged. Either L = ILO or
    ' H(L,L-1) is negligible so that the matrix splits.
    '
    i = IHI
    Do While True
        L = ILO
        If i < ILO Then
            Exit Sub
        End If
        
        '
        ' Perform QR iterations on rows and columns ILO to I until a
        ' submatrix of order 1 or 2 splits off at the bottom because a
        ' subdiagonal element has become negligible.
        '
        FailFlag = True
        For ITS = 0# To ITN Step 1
            
            '
            ' Look for a single small subdiagonal element.
            '
            For K = i To L + 1# Step -1
                TST1 = Abs(H(K - 1#, K - 1#)) + Abs(H(K, K))
                If TST1 = 0# Then
                    TST1 = UpperHessenberg1Norm(H, L, i, L, i, WORK)
                End If
                If Abs(H(K, K - 1#)) <= MaxReal(Ulp * TST1, SMLNUM) Then
                    Exit For
                End If
            Next K
            L = K
            If L > ILO Then
                
                '
                ' H(L,L-1) is negligible
                '
                H(L, L - 1#) = 0#
            End If
            
            '
            ' Exit from loop if a submatrix of order 1 or 2 has split off.
            '
            If L >= i - 1# Then
                FailFlag = False
                Exit For
            End If
            
            '
            ' Now the active submatrix is in rows and columns L to I. If
            ' eigenvalues only are being computed, only the active submatrix
            ' need be transformed.
            '
            If ITS = 10# Or ITS = 20# Then
                
                '
                ' Exceptional shift.
                '
                S = Abs(H(i, i - 1#)) + Abs(H(i - 1#, i - 2#))
                H44 = DAT1 * S + H(i, i)
                H33 = H44
                H43H34 = DAT2 * S * S
            Else
                
                '
                ' Prepare to use Francis' double shift
                ' (i.e. 2nd degree generalized Rayleigh quotient)
                '
                H44 = H(i, i)
                H33 = H(i - 1#, i - 1#)
                H43H34 = H(i, i - 1#) * H(i - 1#, i)
                S = H(i - 1#, i - 2#) * H(i - 1#, i - 2#)
                DISC = (H33 - H44) * 0.5
                DISC = DISC * DISC + H43H34
                If DISC > 0# Then
                    
                    '
                    ' Real roots: use Wilkinson's shift twice
                    '
                    DISC = Sqr(DISC)
                    AVE = 0.5 * (H33 + H44)
                    If Abs(H33) - Abs(H44) > 0# Then
                        H33 = H33 * H44 - H43H34
                        H44 = H33 / (ExtSchurSign(DISC, AVE) + AVE)
                    Else
                        H44 = ExtSchurSign(DISC, AVE) + AVE
                    End If
                    H33 = H44
                    H43H34 = 0#
                End If
            End If
            
            '
            ' Look for two consecutive small subdiagonal elements.
            '
            For M = i - 2# To L Step -1
                
                '
                ' Determine the effect of starting the double-shift QR
                ' iteration at row M, and see if this would make H(M,M-1)
                ' negligible.
                '
                H11 = H(M, M)
                H22 = H(M + 1#, M + 1#)
                H21 = H(M + 1#, M)
                H12 = H(M, M + 1#)
                H44S = H44 - H11
                H33S = H33 - H11
                V1 = (H33S * H44S - H43H34) / H21 + H12
                V2 = H22 - H11 - H33S - H44S
                V3 = H(M + 2#, M + 1#)
                S = Abs(V1) + Abs(V2) + Abs(V3)
                V1 = V1 / S
                V2 = V2 / S
                V3 = V3 / S
                WORKV3(1#) = V1
                WORKV3(2#) = V2
                WORKV3(3#) = V3
                If M = L Then
                    Exit For
                End If
                H00 = H(M - 1#, M - 1#)
                H10 = H(M, M - 1#)
                TST1 = Abs(V1) * (Abs(H00) + Abs(H11) + Abs(H22))
                If Abs(H10) * (Abs(V2) + Abs(V3)) <= Ulp * TST1 Then
                    Exit For
                End If
            Next M
            
            '
            ' Double-shift QR step
            '
            For K = M To i - 1# Step 1
                
                '
                ' The first iteration of this loop determines a reflection G
                ' from the vector V and applies it from left and right to H,
                ' thus creating a nonzero bulge below the subdiagonal.
                '
                ' Each subsequent iteration determines a reflection G to
                ' restore the Hessenberg form in the (K-1)th column, and thus
                ' chases the bulge one step toward the bottom of the active
                ' submatrix. NR is the order of G.
                '
                NR = MinInt(3#, i - K + 1#)
                If K > M Then
                    For P1 = 1# To NR Step 1
                        WORKV3(P1) = H(K + P1 - 1#, K - 1#)
                    Next P1
                End If
                Call GenerateReflection(WORKV3, NR, T1)
                If K > M Then
                    H(K, K - 1#) = WORKV3(1#)
                    H(K + 1#, K - 1#) = 0#
                    If K < i - 1# Then
                        H(K + 2#, K - 1#) = 0#
                    End If
                Else
                    If M > L Then
                        H(K, K - 1#) = -H(K, K - 1#)
                    End If
                End If
                V2 = WORKV3(2#)
                T2 = T1 * V2
                If NR = 3# Then
                    V3 = WORKV3(3#)
                    T3 = T1 * V3
                    
                    '
                    ' Apply G from the left to transform the rows of the matrix
                    ' in columns K to I2.
                    '
                    For J = K To I2 Step 1
                        SUM = H(K, J) + V2 * H(K + 1#, J) + V3 * H(K + 2#, J)
                        H(K, J) = H(K, J) - SUM * T1
                        H(K + 1#, J) = H(K + 1#, J) - SUM * T2
                        H(K + 2#, J) = H(K + 2#, J) - SUM * T3
                    Next J
                    
                    '
                    ' Apply G from the right to transform the columns of the
                    ' matrix in rows I1 to min(K+3,I).
                    '
                    For J = I1 To MinInt(K + 3#, i) Step 1
                        SUM = H(J, K) + V2 * H(J, K + 1#) + V3 * H(J, K + 2#)
                        H(J, K) = H(J, K) - SUM * T1
                        H(J, K + 1#) = H(J, K + 1#) - SUM * T2
                        H(J, K + 2#) = H(J, K + 2#) - SUM * T3
                    Next J
                    If WANTZ Then
                        
                        '
                        ' Accumulate transformations in the matrix Z
                        '
                        For J = ILOZ To IHIZ Step 1
                            SUM = z(J, K) + V2 * z(J, K + 1#) + V3 * z(J, K + 2#)
                            z(J, K) = z(J, K) - SUM * T1
                            z(J, K + 1#) = z(J, K + 1#) - SUM * T2
                            z(J, K + 2#) = z(J, K + 2#) - SUM * T3
                        Next J
                    End If
                Else
                    If NR = 2# Then
                        
                        '
                        ' Apply G from the left to transform the rows of the matrix
                        ' in columns K to I2.
                        '
                        For J = K To I2 Step 1
                            SUM = H(K, J) + V2 * H(K + 1#, J)
                            H(K, J) = H(K, J) - SUM * T1
                            H(K + 1#, J) = H(K + 1#, J) - SUM * T2
                        Next J
                        
                        '
                        ' Apply G from the right to transform the columns of the
                        ' matrix in rows I1 to min(K+3,I).
                        '
                        For J = I1 To i Step 1
                            SUM = H(J, K) + V2 * H(J, K + 1#)
                            H(J, K) = H(J, K) - SUM * T1
                            H(J, K + 1#) = H(J, K + 1#) - SUM * T2
                        Next J
                        If WANTZ Then
                            
                            '
                            ' Accumulate transformations in the matrix Z
                            '
                            For J = ILOZ To IHIZ Step 1
                                SUM = z(J, K) + V2 * z(J, K + 1#)
                                z(J, K) = z(J, K) - SUM * T1
                                z(J, K + 1#) = z(J, K + 1#) - SUM * T2
                            Next J
                        End If
                    End If
                End If
            Next K
        Next ITS
        If FailFlag Then
            
            '
            ' Failure to converge in remaining number of iterations
            '
            Info = i
            Exit Sub
        End If
        If L = i Then
            
            '
            ' H(I,I-1) is negligible: one eigenvalue has converged.
            '
            WR(i) = H(i, i)
            WI(i) = 0#
        Else
            If L = i - 1# Then
                
                '
                ' H(I-1,I-2) is negligible: a pair of eigenvalues have converged.
                '
                '        Transform the 2-by-2 submatrix to standard Schur form,
                '        and compute and store the eigenvalues.
                '
                HIM1IM1 = H(i - 1#, i - 1#)
                HIM1I = H(i - 1#, i)
                HIIM1 = H(i, i - 1#)
                HII = H(i, i)
                Call Aux2X2Schur(HIM1IM1, HIM1I, HIIM1, HII, WRIM1, WIIM1, WRI, WII, CS, SN)
                WR(i - 1#) = WRIM1
                WI(i - 1#) = WIIM1
                WR(i) = WRI
                WI(i) = WII
                H(i - 1#, i - 1#) = HIM1IM1
                H(i - 1#, i) = HIM1I
                H(i, i - 1#) = HIIM1
                H(i, i) = HII
                If WANTT Then
                    
                    '
                    ' Apply the transformation to the rest of H.
                    '
                    If I2 > i Then
                        WORKC1(1#) = CS
                        WORKS1(1#) = SN
                        Call ApplyRotationsFromTheLeft(True, i - 1#, i, i + 1#, I2, WORKC1, WORKS1, H, WORK)
                    End If
                    WORKC1(1#) = CS
                    WORKS1(1#) = SN
                    Call ApplyRotationsFromTheRight(True, I1, i - 2#, i - 1#, i, WORKC1, WORKS1, H, WORK)
                End If
                If WANTZ Then
                    
                    '
                    ' Apply the transformation to Z.
                    '
                    WORKC1(1#) = CS
                    WORKS1(1#) = SN
                    Call ApplyRotationsFromTheRight(True, ILOZ, ILOZ + nz - 1#, i - 1#, i, WORKC1, WORKS1, z, WORK)
                End If
            End If
        End If
        
        '
        ' Decrement number of remaining iterations, and return to start of
        ' the main loop with new value of I.
        '
        ITN = ITN - ITS
        i = L - 1#
    Loop
End Sub
Private Sub Aux2X2Schur(ByRef A As Double, _
         ByRef B As Double, _
         ByRef C As Double, _
         ByRef D As Double, _
         ByRef RT1R As Double, _
         ByRef RT1I As Double, _
         ByRef RT2R As Double, _
         ByRef RT2I As Double, _
         ByRef CS As Double, _
         ByRef SN As Double)
    Dim MULTPL As Double
    Dim AA As Double
    Dim BB As Double
    Dim BCMAX As Double
    Dim BCMIS As Double
    Dim CC As Double
    Dim CS1 As Double
    Dim DD As Double
    Dim Eps As Double
    Dim P As Double
    Dim SAB As Double
    Dim SAC As Double
    Dim SCL As Double
    Dim Sigma As Double
    Dim SN1 As Double
    Dim Tau As Double
    Dim Temp As Double
    Dim z As Double
    MULTPL = 4#
    Eps = MachineEpsilon
    If C = 0# Then
        CS = 1#
        SN = 0#
    Else
        If B = 0# Then
            
            '
            ' Swap rows and columns
            '
            CS = 0#
            SN = 1#
            Temp = D
            D = A
            A = Temp
            B = -C
            C = 0#
        Else
            If A - D = 0# And ExtSchurSignToOne(B) <> ExtSchurSignToOne(C) Then
                CS = 1#
                SN = 0#
            Else
                Temp = A - D
                P = 0.5 * Temp
                BCMAX = MaxReal(Abs(B), Abs(C))
                BCMIS = MinReal(Abs(B), Abs(C)) * ExtSchurSignToOne(B) * ExtSchurSignToOne(C)
                SCL = MaxReal(Abs(P), BCMAX)
                z = P / SCL * P + BCMAX / SCL * BCMIS
                
                '
                ' If Z is of the order of the machine accuracy, postpone the
                ' decision on the nature of eigenvalues
                '
                If z >= MULTPL * Eps Then
                    
                    '
                    ' Real eigenvalues. Compute A and D.
                    '
                    z = P + ExtSchurSign(Sqr(SCL) * Sqr(z), P)
                    A = D + z
                    D = D - BCMAX / z * BCMIS
                    
                    '
                    ' Compute B and the rotation matrix
                    '
                    Tau = Pythag2(C, z)
                    CS = z / Tau
                    SN = C / Tau
                    B = B - C
                    C = 0#
                Else
                    
                    '
                    ' Complex eigenvalues, or real (almost) equal eigenvalues.
                    ' Make diagonal elements equal.
                    '
                    Sigma = B + C
                    Tau = Pythag2(Sigma, Temp)
                    CS = Sqr(0.5 * (1# + Abs(Sigma) / Tau))
                    SN = -(P / (Tau * CS) * ExtSchurSign(1#, Sigma))
                    
                    '
                    ' Compute [ AA  BB ] = [ A  B ] [ CS -SN ]
                    '         [ CC  DD ]   [ C  D ] [ SN  CS ]
                    '
                    AA = A * CS + B * SN
                    BB = -(A * SN) + B * CS
                    CC = C * CS + D * SN
                    DD = -(C * SN) + D * CS
                    
                    '
                    ' Compute [ A  B ] = [ CS  SN ] [ AA  BB ]
                    '         [ C  D ]   [-SN  CS ] [ CC  DD ]
                    '
                    A = AA * CS + CC * SN
                    B = BB * CS + DD * SN
                    C = -(AA * SN) + CC * CS
                    D = -(BB * SN) + DD * CS
                    Temp = 0.5 * (A + D)
                    A = Temp
                    D = Temp
                    If C <> 0# Then
                        If B <> 0# Then
                            If ExtSchurSignToOne(B) = ExtSchurSignToOne(C) Then
                                
                                '
                                ' Real eigenvalues: reduce to upper triangular form
                                '
                                SAB = Sqr(Abs(B))
                                SAC = Sqr(Abs(C))
                                P = ExtSchurSign(SAB * SAC, C)
                                Tau = 1# / Sqr(Abs(B + C))
                                A = Temp + P
                                D = Temp - P
                                B = B - C
                                C = 0#
                                CS1 = SAB * Tau
                                SN1 = SAC * Tau
                                Temp = CS * CS1 - SN * SN1
                                SN = CS * SN1 + SN * CS1
                                CS = Temp
                            End If
                        Else
                            B = -C
                            C = 0#
                            Temp = CS
                            CS = -SN
                            SN = Temp
                        End If
                    End If
                End If
            End If
        End If
    End If
    
    '
    ' Store eigenvalues in (RT1R,RT1I) and (RT2R,RT2I).
    '
    RT1R = A
    RT2R = D
    If C = 0# Then
        RT1I = 0#
        RT2I = 0#
    Else
        RT1I = Sqr(Abs(B)) * Sqr(Abs(C))
        RT2I = -RT1I
    End If
End Sub
Private Function ExtSchurSign(ByVal A As Double, ByVal B As Double) As Double
    Dim Result As Double
    If B >= 0# Then
        Result = Abs(A)
    Else
        Result = -Abs(A)
    End If
    ExtSchurSign = Result
End Function
Private Function ExtSchurSignToOne(ByVal B As Double) As Long
    Dim Result As Long
    If B >= 0# Then
        Result = 1#
    Else
        Result = -1#
    End If
    ExtSchurSignToOne = Result
End Function
