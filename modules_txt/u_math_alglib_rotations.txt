''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 1992-2007 The University of Tennessee.  All rights reserved.
'
'Contributors:
'    * Sergey Bochkanov (ALGLIB project). Translation from FORTRAN to
'      pseudocode.
'
'See subroutines comments for additional copyrights.
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Application of a sequence of  elementary rotations to a matrix
'
'The algorithm pre-multiplies the matrix by a sequence of rotation
'transformations which is given by arrays C and S. Depending on the value
'of the IsForward parameter either 1 and 2, 3 and 4 and so on (if IsForward=true)
'rows are rotated, or the rows N and N-1, N-2 and N-3 and so on, are rotated.
'
'Not the whole matrix but only a part of it is transformed (rows from M1 to
'M2, columns from N1 to N2). Only the elements of this submatrix are changed.
'
'Input parameters:
'    IsForward   -   the sequence of the rotation application.
'    M1,M2       -   the range of rows to be transformed.
'    N1, N2      -   the range of columns to be transformed.
'    C,S         -   transformation coefficients.
'                    Array whose index ranges within [1..M2-M1].
'    A           -   processed matrix.
'    WORK        -   working array whose index ranges within [N1..N2].
'
'Output parameters:
'    A           -   transformed matrix.
'
'Utility subroutine.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub ApplyRotationsFromTheLeft(ByVal IsForward As Boolean, _
         ByVal M1 As Long, _
         ByVal M2 As Long, _
         ByVal N1 As Long, _
         ByVal N2 As Long, _
         ByRef C() As Double, _
         ByRef S() As Double, _
         ByRef A() As Double, _
         ByRef WORK() As Double)
    Dim J As Long
    Dim JP1 As Long
    Dim CTEMP As Double
    Dim STEMP As Double
    Dim TEMP As Double
    Dim i_ As Long
    If M1 > M2 Or N1 > N2 Then
        Exit Sub
    End If
    
    '
    ' Form  P * A
    '
    If IsForward Then
        If N1 <> N2 Then
            
            '
            ' Common case: N1<>N2
            '
            For J = M1 To M2 - 1# Step 1
                CTEMP = C(J - M1 + 1#)
                STEMP = S(J - M1 + 1#)
                If CTEMP <> 1# Or STEMP <> 0# Then
                    JP1 = J + 1#
                    For i_ = N1 To N2 Step 1
                        WORK(i_) = CTEMP * A(JP1, i_)
                    Next i_
                    For i_ = N1 To N2 Step 1
                        WORK(i_) = WORK(i_) - STEMP * A(J, i_)
                    Next i_
                    For i_ = N1 To N2 Step 1
                        A(J, i_) = CTEMP * A(J, i_)
                    Next i_
                    For i_ = N1 To N2 Step 1
                        A(J, i_) = A(J, i_) + STEMP * A(JP1, i_)
                    Next i_
                    For i_ = N1 To N2 Step 1
                        A(JP1, i_) = WORK(i_)
                    Next i_
                End If
            Next J
        Else
            
            '
            ' Special case: N1=N2
            '
            For J = M1 To M2 - 1# Step 1
                CTEMP = C(J - M1 + 1#)
                STEMP = S(J - M1 + 1#)
                If CTEMP <> 1# Or STEMP <> 0# Then
                    TEMP = A(J + 1#, N1)
                    A(J + 1#, N1) = CTEMP * TEMP - STEMP * A(J, N1)
                    A(J, N1) = STEMP * TEMP + CTEMP * A(J, N1)
                End If
            Next J
        End If
    Else
        If N1 <> N2 Then
            
            '
            ' Common case: N1<>N2
            '
            For J = M2 - 1# To M1 Step -1
                CTEMP = C(J - M1 + 1#)
                STEMP = S(J - M1 + 1#)
                If CTEMP <> 1# Or STEMP <> 0# Then
                    JP1 = J + 1#
                    For i_ = N1 To N2 Step 1
                        WORK(i_) = CTEMP * A(JP1, i_)
                    Next i_
                    For i_ = N1 To N2 Step 1
                        WORK(i_) = WORK(i_) - STEMP * A(J, i_)
                    Next i_
                    For i_ = N1 To N2 Step 1
                        A(J, i_) = CTEMP * A(J, i_)
                    Next i_
                    For i_ = N1 To N2 Step 1
                        A(J, i_) = A(J, i_) + STEMP * A(JP1, i_)
                    Next i_
                    For i_ = N1 To N2 Step 1
                        A(JP1, i_) = WORK(i_)
                    Next i_
                End If
            Next J
        Else
            
            '
            ' Special case: N1=N2
            '
            For J = M2 - 1# To M1 Step -1
                CTEMP = C(J - M1 + 1#)
                STEMP = S(J - M1 + 1#)
                If CTEMP <> 1# Or STEMP <> 0# Then
                    TEMP = A(J + 1#, N1)
                    A(J + 1#, N1) = CTEMP * TEMP - STEMP * A(J, N1)
                    A(J, N1) = STEMP * TEMP + CTEMP * A(J, N1)
                End If
            Next J
        End If
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Application of a sequence of  elementary rotations to a matrix
'
'The algorithm post-multiplies the matrix by a sequence of rotation
'transformations which is given by arrays C and S. Depending on the value
'of the IsForward parameter either 1 and 2, 3 and 4 and so on (if IsForward=true)
'rows are rotated, or the rows N and N-1, N-2 and N-3 and so on are rotated.
'
'Not the whole matrix but only a part of it is transformed (rows from M1
'to M2, columns from N1 to N2). Only the elements of this submatrix are changed.
'
'Input parameters:
'    IsForward   -   the sequence of the rotation application.
'    M1,M2       -   the range of rows to be transformed.
'    N1, N2      -   the range of columns to be transformed.
'    C,S         -   transformation coefficients.
'                    Array whose index ranges within [1..N2-N1].
'    A           -   processed matrix.
'    WORK        -   working array whose index ranges within [M1..M2].
'
'Output parameters:
'    A           -   transformed matrix.
'
'Utility subroutine.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub ApplyRotationsFromTheRight(ByVal IsForward As Boolean, _
         ByVal M1 As Long, _
         ByVal M2 As Long, _
         ByVal N1 As Long, _
         ByVal N2 As Long, _
         ByRef C() As Double, _
         ByRef S() As Double, _
         ByRef A() As Double, _
         ByRef WORK() As Double)
    Dim J As Long
    Dim JP1 As Long
    Dim CTEMP As Double
    Dim STEMP As Double
    Dim TEMP As Double
    Dim i_ As Long
    
    '
    ' Form A * P'
    '
    If IsForward Then
        If M1 <> M2 Then
            
            '
            ' Common case: M1<>M2
            '
            For J = N1 To N2 - 1# Step 1
                CTEMP = C(J - N1 + 1#)
                STEMP = S(J - N1 + 1#)
                If CTEMP <> 1# Or STEMP <> 0# Then
                    JP1 = J + 1#
                    For i_ = M1 To M2 Step 1
                        WORK(i_) = CTEMP * A(i_, JP1)
                    Next i_
                    For i_ = M1 To M2 Step 1
                        WORK(i_) = WORK(i_) - STEMP * A(i_, J)
                    Next i_
                    For i_ = M1 To M2 Step 1
                        A(i_, J) = CTEMP * A(i_, J)
                    Next i_
                    For i_ = M1 To M2 Step 1
                        A(i_, J) = A(i_, J) + STEMP * A(i_, JP1)
                    Next i_
                    For i_ = M1 To M2 Step 1
                        A(i_, JP1) = WORK(i_)
                    Next i_
                End If
            Next J
        Else
            
            '
            ' Special case: M1=M2
            '
            For J = N1 To N2 - 1# Step 1
                CTEMP = C(J - N1 + 1#)
                STEMP = S(J - N1 + 1#)
                If CTEMP <> 1# Or STEMP <> 0# Then
                    TEMP = A(M1, J + 1#)
                    A(M1, J + 1#) = CTEMP * TEMP - STEMP * A(M1, J)
                    A(M1, J) = STEMP * TEMP + CTEMP * A(M1, J)
                End If
            Next J
        End If
    Else
        If M1 <> M2 Then
            
            '
            ' Common case: M1<>M2
            '
            For J = N2 - 1# To N1 Step -1
                CTEMP = C(J - N1 + 1#)
                STEMP = S(J - N1 + 1#)
                If CTEMP <> 1# Or STEMP <> 0# Then
                    JP1 = J + 1#
                    For i_ = M1 To M2 Step 1
                        WORK(i_) = CTEMP * A(i_, JP1)
                    Next i_
                    For i_ = M1 To M2 Step 1
                        WORK(i_) = WORK(i_) - STEMP * A(i_, J)
                    Next i_
                    For i_ = M1 To M2 Step 1
                        A(i_, J) = CTEMP * A(i_, J)
                    Next i_
                    For i_ = M1 To M2 Step 1
                        A(i_, J) = A(i_, J) + STEMP * A(i_, JP1)
                    Next i_
                    For i_ = M1 To M2 Step 1
                        A(i_, JP1) = WORK(i_)
                    Next i_
                End If
            Next J
        Else
            
            '
            ' Special case: M1=M2
            '
            For J = N2 - 1# To N1 Step -1
                CTEMP = C(J - N1 + 1#)
                STEMP = S(J - N1 + 1#)
                If CTEMP <> 1# Or STEMP <> 0# Then
                    TEMP = A(M1, J + 1#)
                    A(M1, J + 1#) = CTEMP * TEMP - STEMP * A(M1, J)
                    A(M1, J) = STEMP * TEMP + CTEMP * A(M1, J)
                End If
            Next J
        End If
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'The subroutine generates the elementary rotation, so that:
'
'[  CS  SN  ]  .  [ F ]  =  [ R ]
'[ -SN  CS  ]     [ G ]     [ 0 ]
'
'CS**2 + SN**2 = 1
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub GenerateRotation(ByVal F As Double, _
         ByVal G As Double, _
         ByRef CS As Double, _
         ByRef SN As Double, _
         ByRef R As Double)
    Dim F1 As Double
    Dim G1 As Double
    If G = 0# Then
        CS = 1#
        SN = 0#
        R = F
    Else
        If F = 0# Then
            CS = 0#
            SN = 1#
            R = G
        Else
            F1 = F
            G1 = G
            If Abs(F1) > Abs(G1) Then
                R = Abs(F1) * Sqr(1# + Square(G1 / F1))
            Else
                R = Abs(G1) * Sqr(1# + Square(F1 / G1))
            End If
            CS = F1 / R
            SN = G1 / R
            If Abs(F) > Abs(G) And CS < 0# Then
                CS = -CS
                SN = -SN
                R = -R
            End If
        End If
    End If
End Sub
