'=======================================================================================
'Unifloc 7.7  Vulpes zerda                                           khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2019
'
'=======================================================================================
'
Option Explicit
' класс для описания свойств пласта
Implements IReservoir
' параметры флюида
 
' Private p_fw_perc As Double
 Private p_pi_sm3dayatm As Double
 Private p_Pres_atma As Double
' Private p_pb_atma As Double
 
 Private p_Fluid As CPVT
 ' флюид нужен чтобы определить давление насыщения и обводненность
 
 
 Private p_IPRcurve As TInterpolation
 ' блок оценки качества данных
 'Public' LogMsg As New CLogger                ' логгер
 Public Sub InitProp(Pres_atma, pb_atma, fw_perc)
 '   p_fw_perc = fw_perc
    p_Pres_atma = Pres_atma
 '   p_pb_atma = pb_atma
    
    Set Fluid = New CPVT
    
    Fluid.pb_atma = pb_atma
    Fluid.fw_perc = fw_perc
 
 End Sub
 
 Public Property Get Fluid() As CPVT
    Set Fluid = p_Fluid
 End Property
 
 Public Property Set Fluid(val As CPVT)
    Set p_Fluid = val
 End Property
 
 Public Property Get pb_atma() As Double
    pb_atma = Fluid.pb_atma
 End Property
 
 Public Property Get fw_perc() As Double
    fw_perc = Fluid.fw_perc
 End Property
 
 
 Property Get IPRCurve() As TInterpolation
    IPRCurve = p_IPRcurve
 End Property
 
 Property Let pi_sm3dayatm(pi_val As Double)
    p_pi_sm3dayatm = pi_val
 End Property
 
 Property Get pi_sm3dayatm() As Double
   pi_sm3dayatm = p_pi_sm3dayatm
 End Property
Public Property Get Pres_atma() As Double
    Pres_atma = p_Pres_atma
End Property
Public Property Let Pres_atma(val As Double)
    p_Pres_atma = val
End Property
Public Function calc_qliq_sm3day(ByVal Ptest_atma As Double)
 calc_qliq_sm3day = Calc_Q_IPR_m3Day(Ptest_atma, Pres_atma, pb_atma, pi_sm3dayatm, fw_perc)
End Function
Public Function Calc_pwf_atma(ByVal qtest As Double)
 
 Calc_pwf_atma = Calc_pwf_IPres_atma(qtest, Pres_atma, pb_atma, pi_sm3dayatm, fw_perc)
End Function
Public Function Calc_pi_sm3dayatm(ByVal qtest As Double, ByVal Ptest As Double)
pi_sm3dayatm = Calc_pi_IPR_m3DayAtm(qtest, Ptest, Pres_atma, pb_atma, fw_perc)
Calc_pi_sm3dayatm = pi_sm3dayatm
End Function
Public Function Build_IPRcurve() As TInterpolation
    Set p_IPRcurve = New TInterpolation
    
    Const IPRNumPoints = 30
    
    Dim i As Integer
    Dim Qstep As Double
    Dim pwf As Double
    Dim Qliq_reserv As Double
    Dim maxQ As Double
    
    maxQ = calc_qliq_sm3day(0)
    
    
    
    Qstep = maxQ / IPRNumPoints
    
    For i = 0 To IPRNumPoints
     
     pwf = Calc_pwf_atma(i * Qstep)
     p_IPRcurve.AddPoint i * Qstep, pwf
     
    Next i
        
    Set Build_IPRcurve = p_IPRcurve
End Function
Private Sub Class_Initialize()
  'Set' LogMsg = getLogMsg
End Sub
Private Function IReservoir_CalcPI(ByVal qtest As Double, ByVal Ptest As Double) As Variant
    IReservoir_CalcPI = Calc_pi_sm3dayatm(qtest, Ptest)
End Function
Private Function IReservoir_CalcPwf(ByVal qtest As Double) As Variant
    IReservoir_CalcPwf = Calc_pwf_atma(qtest)
End Function
Private Function IReservoir_CalcQliq(ByVal Ptest_atma As Double) As Variant
    IReservoir_CalcQliq = calc_qliq_sm3day(Ptest_atma)
End Function
Private Property Let IReservoir_pi(RHS As Double)
    p_pi_sm3dayatm = RHS
End Property
Private Property Get IReservoir_pi() As Double
    IReservoir_pi = p_pi_sm3dayatm
End Property
Private Property Let IReservoir_Pres(RHS As Double)
    p_Pres_atma = RHS
End Property
Private Property Get IReservoir_Pres() As Double
    IReservoir_Pres = p_Pres_atma
End Property
