'=======================================================================================
'Unifloc 7.12  Apodemus agrarius                                           khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2019
'
'=======================================================================================
'
Option Explicit
' класс для описания свойств пласта
Implements IReservoir
' параметры флюида
 
 Private pi_sm3dayatm_ As Double
 Private p_res_atma_ As Double
 
 Private fluid_ As CPVT
 ' флюид нужен чтобы определить давление насыщения и обводненность
 
 
 Private IPR_curve_ As CInterpolation
 ' блок оценки качества данных
 'Public' LogMsg As New CLogger                ' логгер
 Public Sub InitProp(Pres_atma, pb_atma, fw_perc)
 '   p_fw_perc = fw_perc
    p_res_atma_ = Pres_atma
 '   pb_atma_ = pb_atma
    
    Set fluid = New CPVT
    
    fluid.pb_atma = pb_atma
    fluid.fw_perc = fw_perc
 
 End Sub
 
 Public Property Get fluid() As CPVT
    Set fluid = fluid_
 End Property
 
 Public Property Set fluid(val As CPVT)
    Set fluid_ = val
 End Property
 
 Public Property Get pb_atma() As Double
    pb_atma = fluid.pb_atma
 End Property
 
 Public Property Get fw_perc() As Double
    fw_perc = fluid.fw_perc
 End Property
 
 
 Property Get IPRCurve() As CInterpolation
    IPRCurve = IPR_curve_
 End Property
 
 Property Let pi_sm3dayatm(pi_val As Double)
    pi_sm3dayatm_ = pi_val
 End Property
 
 Property Get pi_sm3dayatm() As Double
   pi_sm3dayatm = pi_sm3dayatm_
 End Property
Public Property Get Pres_atma() As Double
    Pres_atma = p_res_atma_
End Property
Public Property Let Pres_atma(val As Double)
    p_res_atma_ = val
End Property
Public Function calc_qliq_sm3day(ByVal Ptest_atma As Double)
 calc_qliq_sm3day = calc_Q_IPR_m3Day(Ptest_atma, Pres_atma, pb_atma, pi_sm3dayatm, fw_perc)
End Function
Public Function calc_pwf_atma(ByVal qtest As Double)
 
 calc_pwf_atma = calc_pwf_IPres_atma(qtest, Pres_atma, pb_atma, pi_sm3dayatm, fw_perc)
End Function
Public Function calc_pi_sm3dayatm(ByVal qtest As Double, ByVal Ptest As Double)
pi_sm3dayatm = calc_pi_IPR_m3DayAtm(qtest, Ptest, Pres_atma, pb_atma, fw_perc)
calc_pi_sm3dayatm = pi_sm3dayatm
End Function
Public Function Build_IPRcurve() As CInterpolation
    Set IPR_curve_ = New CInterpolation
    
    Const IPRNumPoints = 30
    
    Dim i As Integer
    Dim Qstep As Double
    Dim p_wf As Double
    Dim Qliq_reserv As Double
    Dim maxQ As Double
    
    maxQ = calc_qliq_sm3day(0)
    
    
    
    Qstep = maxQ / IPRNumPoints
    
    For i = 0 To IPRNumPoints
     
     p_wf = calc_pwf_atma(i * Qstep)
     IPR_curve_.AddPoint i * Qstep, p_wf
     
    Next i
        
    Set Build_IPRcurve = IPR_curve_
End Function
Private Sub Class_Initialize()
  'Set' LogMsg = getLogMsg
End Sub
Private Function IReservoir_CalcPI(ByVal qtest As Double, ByVal Ptest As Double) As Variant
    IReservoir_CalcPI = calc_pi_sm3dayatm(qtest, Ptest)
End Function
Private Function IReservoir_CalcPwf(ByVal qtest As Double) As Variant
    IReservoir_CalcPwf = calc_pwf_atma(qtest)
End Function
Private Function IReservoir_CalcQliq(ByVal Ptest_atma As Double) As Variant
    IReservoir_CalcQliq = calc_qliq_sm3day(Ptest_atma)
End Function
Private Property Let IReservoir_pi(RHS As Double)
    pi_sm3dayatm_ = RHS
End Property
Private Property Get IReservoir_pi() As Double
    IReservoir_pi = pi_sm3dayatm_
End Property
Private Property Let IReservoir_Pres(RHS As Double)
    p_res_atma_ = RHS
End Property
Private Property Get IReservoir_Pres() As Double
    IReservoir_Pres = p_res_atma_
End Property
Public Function calc_Q_IPR_m3Day(ByVal Ptest As Double, ByVal Pr As Double, _
                          ByVal Pb As Double, ByVal Pi As Double, ByVal Wc As Double, Optional calc_method As Integer = 1)
'
If Ptest >= Pr Then
 addLogMsg "Предупреждение. функция calc_Q_IPR_m3Day. тестовое забойное давление " & Ptest & " больше или равно пластового " & Pr & ". дебит 0"
 calc_Q_IPR_m3Day = 0
 Exit Function
End If
Select Case calc_method
 Case 1
 calc_Q_IPR_m3Day = calc_QliqVogel_m3Day(Ptest, Pr, Pb, Pi, Wc)
End Select
End Function
Public Function calc_pwf_IPres_atma(ByVal qtest As Double, ByVal Pr As Double, _
                          ByVal Pb As Double, ByVal Pi As Double, ByVal Wc As Double, Optional calc_method As Integer = 1)
Select Case calc_method
 Case 1
 calc_pwf_IPres_atma = calc_p_wfVogel_atma(qtest, Pr, Pb, Pi, Wc)
End Select
End Function
Public Function calc_pi_IPR_m3DayAtm(ByVal qtest As Double, ByVal Ptest As Double, _
                                ByVal Pr As Double, ByVal Pb As Double, ByVal Wc As Double, Optional calc_method As Integer = 1)
If Ptest >= Pr Then
 addLogMsg "Ошибка. функция calc_pi_IPR_m3DayAtm. тестовое забойное давление " & Ptest & " больше чем пластовое давление " & Pr & ". расчет продуктивности невозможен"
 calc_pi_IPR_m3DayAtm = -1
 Exit Function
End If
Select Case calc_method
 Case 1
 calc_pi_IPR_m3DayAtm = calc_PIVogel_m3DayAtm(qtest, Ptest, Pr, Pb, Wc)
End Select
End Function
'Расчет забойного давления по Вогелю с учетом поправки на обводненность
'
'
'
'
Public Function calc_QliqVogel_m3Day(ByVal P_test As Double, ByVal Pr As Double, _
                          ByVal Pb As Double, ByVal Pi As Double, ByVal Wc As Double)
 '
 ' Q_test    - дебит жидкости при котором надо определить заб. давл. м3/сут
 ' Pr        - пластовое давление, атм
 ' Pb        - давление насыщения, атм
 ' pi - коэффициент продуктивности, м3/сут/атм
 ' wc        - обводненность, %
 
 Dim qb As Double
 Dim qo_max As Double
 Dim p_wfg As Double
 Dim CG As Double
 Dim cd As Double
 Dim fw As Double
 Dim fo As Double
 
 If P_test < 0 Then
  calc_QliqVogel_m3Day = "P_test<0!"
  Exit Function
 End If
 If Pr < 0 Then
  calc_QliqVogel_m3Day = "Pr<0!"
  Exit Function
 End If
 If Pb < 0 Then
  calc_QliqVogel_m3Day = "Pb<0!"
  Exit Function
 End If
 If Pi < 0 Then
  calc_QliqVogel_m3Day = "PI<0!"
  Exit Function
 End If
 If Pr < Pb Then
  Pb = Pr
 End If
 
 ' вычисляем дебит при давлении равном давлению насыщения.
 qb = Pi * (Pr - Pb)
 If Wc > 100 Then
   Wc = 100
 End If
 If Wc < 0 Then
  Wc = 0
 End If
 
 If (Wc = 100) Or (P_test >= Pb) Then
 
   calc_QliqVogel_m3Day = Pi * (Pr - P_test)
 
 Else
   fw = Wc / 100
   fo = 1 - fw
   ' максимальный дебит чистой нефти
   qo_max = qb + (Pi * Pb) / 1.8
 '  Dim pwf_g As Double
   p_wfg = fw * (Pr - qo_max / Pi)
   
   If P_test > p_wfg Then
     Dim a As Double: Dim b As Double: Dim c As Double: Dim D As Double
     a = 1 + (P_test - (fw * Pr)) / (0.125 * fo * Pb)
     b = fw / (0.125 * fo * Pb * Pi)
     c = (2 * a * b) + 80 / (qo_max - qb)
     D = (a ^ 2) - (80 * qb / (qo_max - qb)) - 81
     If b = 0 Then
       calc_QliqVogel_m3Day = Abs(D / c)
     Else
       calc_QliqVogel_m3Day = (-c + ((c * c - 4 * b * b * D) ^ 0.5)) / (2 * b ^ 2)
     End If
     
   Else
      CG = 0.001 * qo_max
      cd = fw * (CG / Pi) + _
           fo * 0.125 * Pb * (-1 + (1 + 80 * ((0.001 * qo_max) / (qo_max - qb))) ^ 0.5)
      calc_QliqVogel_m3Day = (p_wfg - P_test) / (cd / CG) + qo_max
   End If
   
 End If
End Function
' Расчет забойного давления по Вогелю с учетом поправки на обводненность
'
'
'
'
Public Function calc_p_wfVogel_atma(ByVal Q_test As Double, ByVal Pr As Double, _
                          ByVal Pb As Double, ByVal Pi As Double, ByVal Wc As Double)
 '
 ' Q_test    - дебит жидкости при котором надо определить заб. давл. м3/сут
 ' Pr        - пластовое давление, атм
 ' Pb  - давление насыщения, атм
 ' pi - коэффициент продуктивности, м3/сут/атм
 ' wc        - обводненность, %
 
 Dim qb As Double
 Dim qo_max As Double
 Dim p_wfg As Double
 Dim CG As Double
 Dim cd As Double
 Dim fw As Double
 Dim fo As Double
 
 'проверка  данных
 
 If Pr < Pb Then
  Pb = Pr
 End If
 
 If Q_test < 0 Then
  calc_p_wfVogel_atma = "Q<0!"
  Exit Function
 End If
 If Pr <= 0 Then
  calc_p_wfVogel_atma = "Pr<=0!"
  Exit Function
 End If
 If Pb < 0 Then
  calc_p_wfVogel_atma = "Pb<0!"
  Exit Function
 End If
 If Pi <= 0 Then
  calc_p_wfVogel_atma = "PI<=0!"
  Exit Function
 End If
 
 ' вычисляем дебит при давлении равном давлению насыщения.
 qb = Pi * (Pr - Pb)
 If Wc > 100 Then
   Wc = 100
 End If
 If Wc < 0 Then
  Wc = 0
 End If
 If (Wc = 100) Or (Q_test <= qb) Or (Pb = 0) Then
 
   calc_p_wfVogel_atma = (Pr - Q_test / Pi)
   
 Else
   fw = Wc / 100
   fo = 1 - fw
   ' максимальный дебит чистой нефти
   qo_max = qb + (Pi * Pb) / 1.8
   
   If Q_test < qo_max Then
     
     calc_p_wfVogel_atma = fw * (Pr - Q_test / Pi) + _
                 fo * 0.125 * Pb * (-1 + (1 - 80 * ((Q_test - qo_max) / (qo_max - qb))) ^ 0.5)
   Else
      CG = 0.001 * qo_max
      cd = fw * (CG / Pi) + _
           fo * 0.125 * Pb * (-1 + (1 + 80 * ((0.001 * qo_max) / (qo_max - qb))) ^ 0.5)
      calc_p_wfVogel_atma = fw * (Pr - qo_max / Pi) - (Q_test - qo_max) * (cd / CG)
   End If
 End If
 If calc_p_wfVogel_atma < 0 Then
       calc_p_wfVogel_atma = 0
 End If
End Function
' определение продуктивности по Вогелю с коррекцией на обводненность
Public Function calc_PIVogel_m3DayAtm(ByVal Q_test As Double, ByVal P_test As Double, _
                                ByVal Pres As Double, ByVal Pb As Double, ByVal Wc As Double)
 
 Dim j As Double
 Dim Q_calibr As Double
 
 If P_test < 0 Then
  P_test = 0
  calc_PIVogel_m3DayAtm = 0
  Exit Function
 End If
  
 If Pres < Pb Then
  Pb = Pres
 End If
 
 If Q_test <= 0 Then
  calc_PIVogel_m3DayAtm = 0 ' "Q<=0!"
  addLogMsg "calc_PIVogel_m3DayAtm  ошибка Q<=0!"
  Exit Function
 End If
 If P_test <= 0 Then
  calc_PIVogel_m3DayAtm = 0
  addLogMsg "calc_PIVogel_m3DayAtm  ошибка P_test<=0!"
  Exit Function
 End If
 If Pb < 0 Then
  calc_PIVogel_m3DayAtm = 0
  addLogMsg "calc_PIVogel_m3DayAtm  ошибка Pb<0!!"
  Exit Function
 End If
 If Pres <= 0 Then
  calc_PIVogel_m3DayAtm = 0
  addLogMsg "calc_PIVogel_m3DayAtm  ошибка Pres<=0!"
  Exit Function
 End If
 ' первое приближение для Кпр считаем
 j = Q_test / (Pres - P_test)
 ' оцениваем его
 Q_calibr = calc_QliqVogel_m3Day(P_test, Pres, Pb, j, Wc)
 ' кривая нелинейная надо подбирать значение
 j = j / ((Q_calibr) / Q_test)
 Q_calibr = calc_QliqVogel_m3Day(P_test, Pres, Pb, j, Wc)
 If Abs(Q_calibr - Q_test) > 0.001 Then Debug.Assert False   ' если сработало, то алгоритм сломался
 calc_PIVogel_m3DayAtm = j
  
End Function

