''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 1992-2007 The University of Tennessee.  All rights reserved.
'
'Contributors:
'    * Sergey Bochkanov (ALGLIB project). Translation from FORTRAN to
'      pseudocode.
'
'See subroutines comments for additional copyrights.
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Singular value decomposition of a bidiagonal matrix (extended algorithm)
'
'The algorithm performs the singular value decomposition  of  a  bidiagonal
'matrix B (upper or lower) representing it as B = Q*S*P^T, where Q and  P -
'orthogonal matrices, S - diagonal matrix with non-negative elements on the
'main diagonal, in descending order.
'
'The  algorithm  finds  singular  values.  In  addition,  the algorithm can
'calculate  matrices  Q  and P (more precisely, not the matrices, but their
'product  with  given  matrices U and VT - U*Q and (P^T)*VT)).  Of  course,
'matrices U and VT can be of any type, including identity. Furthermore, the
'algorithm can calculate Q'*C (this product is calculated more  effectively
'than U*Q,  because  this calculation operates with rows instead  of matrix
'columns).
'
'The feature of the algorithm is its ability to find  all  singular  values
'including those which are arbitrarily close to 0  with  relative  accuracy
'close to  machine precision. If the parameter IsFractionalAccuracyRequired
'is set to True, all singular values will have high relative accuracy close
'to machine precision. If the parameter is set to False, only  the  biggest
'singular value will have relative accuracy  close  to  machine  precision.
'The absolute error of other singular values is equal to the absolute error
'of the biggest singular value.
'
'Input parameters:
'    D       -   main diagonal of matrix B.
'                Array whose index ranges within [0..N-1].
'    E       -   superdiagonal (or subdiagonal) of matrix B.
'                Array whose index ranges within [0..N-2].
'    N       -   size of matrix B.
'    IsUpper -   True, if the matrix is upper bidiagonal.
'    IsFractionalAccuracyRequired -
'                accuracy to search singular values with.
'    U       -   matrix to be multiplied by Q.
'                Array whose indexes range within [0..NRU-1, 0..N-1].
'                The matrix can be bigger, in that case only the  submatrix
'                [0..NRU-1, 0..N-1] will be multiplied by Q.
'    NRU     -   number of rows in matrix U.
'    C       -   matrix to be multiplied by Q'.
'                Array whose indexes range within [0..N-1, 0..NCC-1].
'                The matrix can be bigger, in that case only the  submatrix
'                [0..N-1, 0..NCC-1] will be multiplied by Q'.
'    NCC     -   number of columns in matrix C.
'    VT      -   matrix to be multiplied by P^T.
'                Array whose indexes range within [0..N-1, 0..NCVT-1].
'                The matrix can be bigger, in that case only the  submatrix
'                [0..N-1, 0..NCVT-1] will be multiplied by P^T.
'    NCVT    -   number of columns in matrix VT.
'
'Output parameters:
'    D       -   singular values of matrix B in descending order.
'    U       -   if NRU>0, contains matrix U*Q.
'    VT      -   if NCVT>0, contains matrix (P^T)*VT.
'    C       -   if NCC>0, contains matrix Q'*C.
'
'Result:
'    True, if the algorithm has converged.
'    False, if the algorithm hasn't converged (rare case).
'
'Additional information:
'    The type of convergence is controlled by the internal  parameter  TOL.
'    If the parameter is greater than 0, the singular values will have
'    relative accuracy TOL. If TOL<0, the singular values will have
'    absolute accuracy ABS(TOL)*norm(B).
'    By default, |TOL| falls within the range of 10*Epsilon and 100*Epsilon,
'    where Epsilon is the machine precision. It is not  recommended  to  use
'    TOL less than 10*Epsilon since this will  considerably  slow  down  the
'    algorithm and may not lead to error decreasing.
'History:
'    * 31 March, 2007.
'        changed MAXITR from 6 to 12.
'
'  -- LAPACK routine (version 3.0) --
'     Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd.,
'     Courant Institute, Argonne National Lab, and Rice University
'     October 31, 1999.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function RMatrixBDSVD(ByRef D() As Double, _
         ByRef E_() As Double, _
         ByVal N As Long, _
         ByVal IsUpper As Boolean, _
         ByVal IsFractionalAccuracyRequired As Boolean, _
         ByRef U() As Double, _
         ByVal NRU As Long, _
         ByRef C() As Double, _
         ByVal NCC As Long, _
         ByRef VT() As Double, _
         ByVal NCVT As Long) As Boolean
    Dim Result As Boolean
    Dim E() As Double
    Dim D1() As Double
    Dim E1() As Double
    Dim i_ As Long
    Dim i1_ As Long
    E = E_
    ReDim D1(1# To N)
    i1_ = (0#) - (1#)
    For i_ = 1# To N Step 1
        D1(i_) = D(i_ + i1_)
    Next i_
    If N > 1# Then
        ReDim E1(1# To N - 1#)
        i1_ = (0#) - (1#)
        For i_ = 1# To N - 1# Step 1
            E1(i_) = E(i_ + i1_)
        Next i_
    End If
    Result = BidiagonalSVDDecompositionInternal(D1, E1, N, IsUpper, IsFractionalAccuracyRequired, U, 0#, NRU, C, 0#, NCC, VT, 0#, NCVT)
    i1_ = (1#) - (0#)
    For i_ = 0# To N - 1# Step 1
        D(i_) = D1(i_ + i1_)
    Next i_
    RMatrixBDSVD = Result
End Function
Public Function BidiagonalSVDDecomposition(ByRef D() As Double, _
         ByRef E_() As Double, _
         ByVal N As Long, _
         ByVal IsUpper As Boolean, _
         ByVal IsFractionalAccuracyRequired As Boolean, _
         ByRef U() As Double, _
         ByVal NRU As Long, _
         ByRef C() As Double, _
         ByVal NCC As Long, _
         ByRef VT() As Double, _
         ByVal NCVT As Long) As Boolean
    Dim Result As Boolean
    Dim E() As Double
    E = E_
    Result = BidiagonalSVDDecompositionInternal(D, E, N, IsUpper, IsFractionalAccuracyRequired, U, 1#, NRU, C, 1#, NCC, VT, 1#, NCVT)
    BidiagonalSVDDecomposition = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal working subroutine for bidiagonal decomposition
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function BidiagonalSVDDecompositionInternal(ByRef D() As Double, _
         ByRef E_() As Double, _
         ByVal N As Long, _
         ByVal IsUpper As Boolean, _
         ByVal IsFractionalAccuracyRequired As Boolean, _
         ByRef U() As Double, _
         ByVal UStart As Long, _
         ByVal NRU As Long, _
         ByRef C() As Double, _
         ByVal CStart As Long, _
         ByVal NCC As Long, _
         ByRef VT() As Double, _
         ByVal VStart As Long, _
         ByVal NCVT As Long) As Boolean
    Dim Result As Boolean
    Dim E() As Double
    Dim i As Long
    Dim IDIR As Long
    Dim ISUB As Long
    Dim ITER As Long
    Dim J As Long
    Dim LL As Long
    Dim LLL As Long
    Dim M As Long
    Dim MAXIT As Long
    Dim OLDLL As Long
    Dim OLDM As Long
    Dim ABSE As Double
    Dim ABSS As Double
    Dim COSL As Double
    Dim COSR As Double
    Dim CS As Double
    Dim Eps As Double
    Dim F As Double
    Dim G As Double
    Dim H As Double
    Dim Mu As Double
    Dim OLDCS As Double
    Dim OLDSN As Double
    Dim R As Double
    Dim Shift As Double
    Dim SIGMN As Double
    Dim SIGMX As Double
    Dim SINL As Double
    Dim SINR As Double
    Dim SLL As Double
    Dim SMAX As Double
    Dim SMIN As Double
    Dim SMINL As Double
    Dim SMINLO As Double
    Dim SMINOA As Double
    Dim SN As Double
    Dim thresh As Double
    Dim TOL As Double
    Dim TOLMUL As Double
    Dim UNFL As Double
    Dim WORK0() As Double
    Dim WORK1() As Double
    Dim WORK2() As Double
    Dim WORK3() As Double
    Dim MAXITR As Long
    Dim MatrixSplitFlag As Boolean
    Dim IterFlag As Boolean
    Dim UTemp() As Double
    Dim VTTemp() As Double
    Dim CTEMP() As Double
    Dim ETemp() As Double
    Dim RightSide As Boolean
    Dim FwdDir As Boolean
    Dim Tmp As Double
    Dim MM1 As Long
    Dim MM0 As Long
    Dim BChangeDir As Boolean
    Dim UEnd As Long
    Dim CEnd As Long
    Dim VEnd As Long
    Dim i_ As Long
    E = E_
    Result = True
    If N = 0# Then
        BidiagonalSVDDecompositionInternal = Result
        Exit Function
    End If
    If N = 1# Then
        If D(1#) < 0# Then
            D(1#) = -D(1#)
            If NCVT > 0# Then
                For i_ = VStart To VStart + NCVT - 1# Step 1
                    VT(VStart, i_) = -1 * VT(VStart, i_)
                Next i_
            End If
        End If
        BidiagonalSVDDecompositionInternal = Result
        Exit Function
    End If
    
    '
    ' init
    '
    ReDim WORK0(1# To N - 1#)
    ReDim WORK1(1# To N - 1#)
    ReDim WORK2(1# To N - 1#)
    ReDim WORK3(1# To N - 1#)
    UEnd = UStart + MaxInt(NRU - 1#, 0#)
    VEnd = VStart + MaxInt(NCVT - 1#, 0#)
    CEnd = CStart + MaxInt(NCC - 1#, 0#)
    ReDim UTemp(UStart To UEnd)
    ReDim VTTemp(VStart To VEnd)
    ReDim CTEMP(CStart To CEnd)
    MAXITR = 12#
    RightSide = True
    FwdDir = True
    
    '
    ' resize E from N-1 to N
    '
    ReDim ETemp(1# To N)
    For i = 1# To N - 1# Step 1
        ETemp(i) = E(i)
    Next i
    ReDim E(1# To N)
    For i = 1# To N - 1# Step 1
        E(i) = ETemp(i)
    Next i
    E(N) = 0#
    IDIR = 0#
    
    '
    ' Get machine constants
    '
    Eps = MachineEpsilon
    UNFL = MinRealNumber
    
    '
    ' If matrix lower bidiagonal, rotate to be upper bidiagonal
    ' by applying Givens rotations on the left
    '
    If Not IsUpper Then
        For i = 1# To N - 1# Step 1
            Call GenerateRotation(D(i), E(i), CS, SN, R)
            D(i) = R
            E(i) = SN * D(i + 1#)
            D(i + 1#) = CS * D(i + 1#)
            WORK0(i) = CS
            WORK1(i) = SN
        Next i
        
        '
        ' Update singular vectors if desired
        '
        If NRU > 0# Then
            Call ApplyRotationsFromTheRight(FwdDir, UStart, UEnd, 1# + UStart - 1#, N + UStart - 1#, WORK0, WORK1, U, UTemp)
        End If
        If NCC > 0# Then
            Call ApplyRotationsFromTheLeft(FwdDir, 1# + CStart - 1#, N + CStart - 1#, CStart, CEnd, WORK0, WORK1, C, CTEMP)
        End If
    End If
    
    '
    ' Compute singular values to relative accuracy TOL
    ' (By setting TOL to be negative, algorithm will compute
    ' singular values to absolute accuracy ABS(TOL)*norm(input matrix))
    '
    TOLMUL = MaxReal(10#, MinReal(100#, Power(Eps, -0.125)))
    TOL = TOLMUL * Eps
    If Not IsFractionalAccuracyRequired Then
        TOL = -TOL
    End If
    
    '
    ' Compute approximate maximum, minimum singular values
    '
    SMAX = 0#
    For i = 1# To N Step 1
        SMAX = MaxReal(SMAX, Abs(D(i)))
    Next i
    For i = 1# To N - 1# Step 1
        SMAX = MaxReal(SMAX, Abs(E(i)))
    Next i
    SMINL = 0#
    If TOL >= 0# Then
        
        '
        ' Relative accuracy desired
        '
        SMINOA = Abs(D(1#))
        If SMINOA <> 0# Then
            Mu = SMINOA
            For i = 2# To N Step 1
                Mu = Abs(D(i)) * (Mu / (Mu + Abs(E(i - 1#))))
                SMINOA = MinReal(SMINOA, Mu)
                If SMINOA = 0# Then
                    Exit For
                End If
            Next i
        End If
        SMINOA = SMINOA / Sqr(N)
        thresh = MaxReal(TOL * SMINOA, MAXITR * N * N * UNFL)
    Else
        
        '
        ' Absolute accuracy desired
        '
        thresh = MaxReal(Abs(TOL) * SMAX, MAXITR * N * N * UNFL)
    End If
    
    '
    ' Prepare for main iteration loop for the singular values
    ' (MAXIT is the maximum number of passes through the inner
    ' loop permitted before nonconvergence signalled.)
    '
    MAXIT = MAXITR * N * N
    ITER = 0#
    OLDLL = -1#
    OLDM = -1#
    
    '
    ' M points to last element of unconverged part of matrix
    '
    M = N
    
    '
    ' Begin main iteration loop
    '
    Do While True
        
        '
        ' Check for convergence or exceeding iteration count
        '
        If M <= 1# Then
            Exit Do
        End If
        If ITER > MAXIT Then
            Result = False
            BidiagonalSVDDecompositionInternal = Result
            Exit Function
        End If
        
        '
        ' Find diagonal block of matrix to work on
        '
        If TOL < 0# And Abs(D(M)) <= thresh Then
            D(M) = 0#
        End If
        SMAX = Abs(D(M))
        SMIN = SMAX
        MatrixSplitFlag = False
        For LLL = 1# To M - 1# Step 1
            LL = M - LLL
            ABSS = Abs(D(LL))
            ABSE = Abs(E(LL))
            If TOL < 0# And ABSS <= thresh Then
                D(LL) = 0#
            End If
            If ABSE <= thresh Then
                MatrixSplitFlag = True
                Exit For
            End If
            SMIN = MinReal(SMIN, ABSS)
            SMAX = MaxReal(SMAX, MaxReal(ABSS, ABSE))
        Next LLL
        If Not MatrixSplitFlag Then
            LL = 0#
        Else
            
            '
            ' Matrix splits since E(LL) = 0
            '
            E(LL) = 0#
            If LL = M - 1# Then
                
                '
                ' Convergence of bottom singular value, return to top of loop
                '
                M = M - 1#
                GoTo Cont_7
            End If
        End If
        LL = LL + 1#
        
        '
        ' E(LL) through E(M-1) are nonzero, E(LL-1) is zero
        '
        If LL = M - 1# Then
            
            '
            ' 2 by 2 block, handle separately
            '
            Call SvdV2X2(D(M - 1#), E(M - 1#), D(M), SIGMN, SIGMX, SINR, COSR, SINL, COSL)
            D(M - 1#) = SIGMX
            E(M - 1#) = 0#
            D(M) = SIGMN
            
            '
            ' Compute singular vectors, if desired
            '
            If NCVT > 0# Then
                MM0 = M + (VStart - 1#)
                MM1 = M - 1# + (VStart - 1#)
                For i_ = VStart To VEnd Step 1
                    VTTemp(i_) = COSR * VT(MM1, i_)
                Next i_
                For i_ = VStart To VEnd Step 1
                    VTTemp(i_) = VTTemp(i_) + SINR * VT(MM0, i_)
                Next i_
                For i_ = VStart To VEnd Step 1
                    VT(MM0, i_) = COSR * VT(MM0, i_)
                Next i_
                For i_ = VStart To VEnd Step 1
                    VT(MM0, i_) = VT(MM0, i_) - SINR * VT(MM1, i_)
                Next i_
                For i_ = VStart To VEnd Step 1
                    VT(MM1, i_) = VTTemp(i_)
                Next i_
            End If
            If NRU > 0# Then
                MM0 = M + UStart - 1#
                MM1 = M - 1# + UStart - 1#
                For i_ = UStart To UEnd Step 1
                    UTemp(i_) = COSL * U(i_, MM1)
                Next i_
                For i_ = UStart To UEnd Step 1
                    UTemp(i_) = UTemp(i_) + SINL * U(i_, MM0)
                Next i_
                For i_ = UStart To UEnd Step 1
                    U(i_, MM0) = COSL * U(i_, MM0)
                Next i_
                For i_ = UStart To UEnd Step 1
                    U(i_, MM0) = U(i_, MM0) - SINL * U(i_, MM1)
                Next i_
                For i_ = UStart To UEnd Step 1
                    U(i_, MM1) = UTemp(i_)
                Next i_
            End If
            If NCC > 0# Then
                MM0 = M + CStart - 1#
                MM1 = M - 1# + CStart - 1#
                For i_ = CStart To CEnd Step 1
                    CTEMP(i_) = COSL * C(MM1, i_)
                Next i_
                For i_ = CStart To CEnd Step 1
                    CTEMP(i_) = CTEMP(i_) + SINL * C(MM0, i_)
                Next i_
                For i_ = CStart To CEnd Step 1
                    C(MM0, i_) = COSL * C(MM0, i_)
                Next i_
                For i_ = CStart To CEnd Step 1
                    C(MM0, i_) = C(MM0, i_) - SINL * C(MM1, i_)
                Next i_
                For i_ = CStart To CEnd Step 1
                    C(MM1, i_) = CTEMP(i_)
                Next i_
            End If
            M = M - 2#
            GoTo Cont_7
        End If
        
        '
        ' If working on new submatrix, choose shift direction
        ' (from larger end diagonal element towards smaller)
        '
        ' Previously was
        '     "if (LL>OLDM) or (M<OLDLL) then"
        ' fixed thanks to Michael Rolle < m@rolle.name >
        ' Very strange that LAPACK still contains it.
        '
        BChangeDir = False
        If IDIR = 1# And Abs(D(LL)) < 0.001 * Abs(D(M)) Then
            BChangeDir = True
        End If
        If IDIR = 2# And Abs(D(M)) < 0.001 * Abs(D(LL)) Then
            BChangeDir = True
        End If
        If LL <> OLDLL Or M <> OLDM Or BChangeDir Then
            If Abs(D(LL)) >= Abs(D(M)) Then
                
                '
                ' Chase bulge from top (big end) to bottom (small end)
                '
                IDIR = 1#
            Else
                
                '
                ' Chase bulge from bottom (big end) to top (small end)
                '
                IDIR = 2#
            End If
        End If
        
        '
        ' Apply convergence tests
        '
        If IDIR = 1# Then
            
            '
            ' Run convergence test in forward direction
            ' First apply standard test to bottom of matrix
            '
            If Abs(E(M - 1#)) <= Abs(TOL) * Abs(D(M)) Or TOL < 0# And Abs(E(M - 1#)) <= thresh Then
                E(M - 1#) = 0#
                GoTo Cont_7
            End If
            If TOL >= 0# Then
                
                '
                ' If relative accuracy desired,
                ' apply convergence criterion forward
                '
                Mu = Abs(D(LL))
                SMINL = Mu
                IterFlag = False
                For LLL = LL To M - 1# Step 1
                    If Abs(E(LLL)) <= TOL * Mu Then
                        E(LLL) = 0#
                        IterFlag = True
                        Exit For
                    End If
                    SMINLO = SMINL
                    Mu = Abs(D(LLL + 1#)) * (Mu / (Mu + Abs(E(LLL))))
                    SMINL = MinReal(SMINL, Mu)
                Next LLL
                If IterFlag Then
                    GoTo Cont_7
                End If
            End If
        Else
            
            '
            ' Run convergence test in backward direction
            ' First apply standard test to top of matrix
            '
            If Abs(E(LL)) <= Abs(TOL) * Abs(D(LL)) Or TOL < 0# And Abs(E(LL)) <= thresh Then
                E(LL) = 0#
                GoTo Cont_7
            End If
            If TOL >= 0# Then
                
                '
                ' If relative accuracy desired,
                ' apply convergence criterion backward
                '
                Mu = Abs(D(M))
                SMINL = Mu
                IterFlag = False
                For LLL = M - 1# To LL Step -1
                    If Abs(E(LLL)) <= TOL * Mu Then
                        E(LLL) = 0#
                        IterFlag = True
                        Exit For
                    End If
                    SMINLO = SMINL
                    Mu = Abs(D(LLL)) * (Mu / (Mu + Abs(E(LLL))))
                    SMINL = MinReal(SMINL, Mu)
                Next LLL
                If IterFlag Then
                    GoTo Cont_7
                End If
            End If
        End If
        OLDLL = LL
        OLDM = M
        
        '
        ' Compute shift.  First, test if shifting would ruin relative
        ' accuracy, and if so set the shift to zero.
        '
        If TOL >= 0# And N * TOL * (SMINL / SMAX) <= MaxReal(Eps, 0.01 * TOL) Then
            
            '
            ' Use a zero shift to avoid loss of relative accuracy
            '
            Shift = 0#
        Else
            
            '
            ' Compute the shift from 2-by-2 block at end of matrix
            '
            If IDIR = 1# Then
                SLL = Abs(D(LL))
                Call Svd2X2(D(M - 1#), E(M - 1#), D(M), Shift, R)
            Else
                SLL = Abs(D(M))
                Call Svd2X2(D(LL), E(LL), D(LL + 1#), Shift, R)
            End If
            
            '
            ' Test if shift negligible, and if so set to zero
            '
            If SLL > 0# Then
                If Square(Shift / SLL) < Eps Then
                    Shift = 0#
                End If
            End If
        End If
        
        '
        ' Increment iteration count
        '
        ITER = ITER + M - LL
        
        '
        ' If SHIFT = 0, do simplified QR iteration
        '
        If Shift = 0# Then
            If IDIR = 1# Then
                
                '
                ' Chase bulge from top to bottom
                ' Save cosines and sines for later singular vector updates
                '
                CS = 1#
                OLDCS = 1#
                For i = LL To M - 1# Step 1
                    Call GenerateRotation(D(i) * CS, E(i), CS, SN, R)
                    If i > LL Then
                        E(i - 1#) = OLDSN * R
                    End If
                    Call GenerateRotation(OLDCS * R, D(i + 1#) * SN, OLDCS, OLDSN, Tmp)
                    D(i) = Tmp
                    WORK0(i - LL + 1#) = CS
                    WORK1(i - LL + 1#) = SN
                    WORK2(i - LL + 1#) = OLDCS
                    WORK3(i - LL + 1#) = OLDSN
                Next i
                H = D(M) * CS
                D(M) = H * OLDCS
                E(M - 1#) = H * OLDSN
                
                '
                ' Update singular vectors
                '
                If NCVT > 0# Then
                    Call ApplyRotationsFromTheLeft(FwdDir, LL + VStart - 1#, M + VStart - 1#, VStart, VEnd, WORK0, WORK1, VT, VTTemp)
                End If
                If NRU > 0# Then
                    Call ApplyRotationsFromTheRight(FwdDir, UStart, UEnd, LL + UStart - 1#, M + UStart - 1#, WORK2, WORK3, U, UTemp)
                End If
                If NCC > 0# Then
                    Call ApplyRotationsFromTheLeft(FwdDir, LL + CStart - 1#, M + CStart - 1#, CStart, CEnd, WORK2, WORK3, C, CTEMP)
                End If
                
                '
                ' Test convergence
                '
                If Abs(E(M - 1#)) <= thresh Then
                    E(M - 1#) = 0#
                End If
            Else
                
                '
                ' Chase bulge from bottom to top
                ' Save cosines and sines for later singular vector updates
                '
                CS = 1#
                OLDCS = 1#
                For i = M To LL + 1# Step -1
                    Call GenerateRotation(D(i) * CS, E(i - 1#), CS, SN, R)
                    If i < M Then
                        E(i) = OLDSN * R
                    End If
                    Call GenerateRotation(OLDCS * R, D(i - 1#) * SN, OLDCS, OLDSN, Tmp)
                    D(i) = Tmp
                    WORK0(i - LL) = CS
                    WORK1(i - LL) = -SN
                    WORK2(i - LL) = OLDCS
                    WORK3(i - LL) = -OLDSN
                Next i
                H = D(LL) * CS
                D(LL) = H * OLDCS
                E(LL) = H * OLDSN
                
                '
                ' Update singular vectors
                '
                If NCVT > 0# Then
                    Call ApplyRotationsFromTheLeft(Not FwdDir, LL + VStart - 1#, M + VStart - 1#, VStart, VEnd, WORK2, WORK3, VT, VTTemp)
                End If
                If NRU > 0# Then
                    Call ApplyRotationsFromTheRight(Not FwdDir, UStart, UEnd, LL + UStart - 1#, M + UStart - 1#, WORK0, WORK1, U, UTemp)
                End If
                If NCC > 0# Then
                    Call ApplyRotationsFromTheLeft(Not FwdDir, LL + CStart - 1#, M + CStart - 1#, CStart, CEnd, WORK0, WORK1, C, CTEMP)
                End If
                
                '
                ' Test convergence
                '
                If Abs(E(LL)) <= thresh Then
                    E(LL) = 0#
                End If
            End If
        Else
            
            '
            ' Use nonzero shift
            '
            If IDIR = 1# Then
                
                '
                ' Chase bulge from top to bottom
                ' Save cosines and sines for later singular vector updates
                '
                F = (Abs(D(LL)) - Shift) * (ExtSignBDSQR(1#, D(LL)) + Shift / D(LL))
                G = E(LL)
                For i = LL To M - 1# Step 1
                    Call GenerateRotation(F, G, COSR, SINR, R)
                    If i > LL Then
                        E(i - 1#) = R
                    End If
                    F = COSR * D(i) + SINR * E(i)
                    E(i) = COSR * E(i) - SINR * D(i)
                    G = SINR * D(i + 1#)
                    D(i + 1#) = COSR * D(i + 1#)
                    Call GenerateRotation(F, G, COSL, SINL, R)
                    D(i) = R
                    F = COSL * E(i) + SINL * D(i + 1#)
                    D(i + 1#) = COSL * D(i + 1#) - SINL * E(i)
                    If i < M - 1# Then
                        G = SINL * E(i + 1#)
                        E(i + 1#) = COSL * E(i + 1#)
                    End If
                    WORK0(i - LL + 1#) = COSR
                    WORK1(i - LL + 1#) = SINR
                    WORK2(i - LL + 1#) = COSL
                    WORK3(i - LL + 1#) = SINL
                Next i
                E(M - 1#) = F
                
                '
                ' Update singular vectors
                '
                If NCVT > 0# Then
                    Call ApplyRotationsFromTheLeft(FwdDir, LL + VStart - 1#, M + VStart - 1#, VStart, VEnd, WORK0, WORK1, VT, VTTemp)
                End If
                If NRU > 0# Then
                    Call ApplyRotationsFromTheRight(FwdDir, UStart, UEnd, LL + UStart - 1#, M + UStart - 1#, WORK2, WORK3, U, UTemp)
                End If
                If NCC > 0# Then
                    Call ApplyRotationsFromTheLeft(FwdDir, LL + CStart - 1#, M + CStart - 1#, CStart, CEnd, WORK2, WORK3, C, CTEMP)
                End If
                
                '
                ' Test convergence
                '
                If Abs(E(M - 1#)) <= thresh Then
                    E(M - 1#) = 0#
                End If
            Else
                
                '
                ' Chase bulge from bottom to top
                ' Save cosines and sines for later singular vector updates
                '
                F = (Abs(D(M)) - Shift) * (ExtSignBDSQR(1#, D(M)) + Shift / D(M))
                G = E(M - 1#)
                For i = M To LL + 1# Step -1
                    Call GenerateRotation(F, G, COSR, SINR, R)
                    If i < M Then
                        E(i) = R
                    End If
                    F = COSR * D(i) + SINR * E(i - 1#)
                    E(i - 1#) = COSR * E(i - 1#) - SINR * D(i)
                    G = SINR * D(i - 1#)
                    D(i - 1#) = COSR * D(i - 1#)
                    Call GenerateRotation(F, G, COSL, SINL, R)
                    D(i) = R
                    F = COSL * E(i - 1#) + SINL * D(i - 1#)
                    D(i - 1#) = COSL * D(i - 1#) - SINL * E(i - 1#)
                    If i > LL + 1# Then
                        G = SINL * E(i - 2#)
                        E(i - 2#) = COSL * E(i - 2#)
                    End If
                    WORK0(i - LL) = COSR
                    WORK1(i - LL) = -SINR
                    WORK2(i - LL) = COSL
                    WORK3(i - LL) = -SINL
                Next i
                E(LL) = F
                
                '
                ' Test convergence
                '
                If Abs(E(LL)) <= thresh Then
                    E(LL) = 0#
                End If
                
                '
                ' Update singular vectors if desired
                '
                If NCVT > 0# Then
                    Call ApplyRotationsFromTheLeft(Not FwdDir, LL + VStart - 1#, M + VStart - 1#, VStart, VEnd, WORK2, WORK3, VT, VTTemp)
                End If
                If NRU > 0# Then
                    Call ApplyRotationsFromTheRight(Not FwdDir, UStart, UEnd, LL + UStart - 1#, M + UStart - 1#, WORK0, WORK1, U, UTemp)
                End If
                If NCC > 0# Then
                    Call ApplyRotationsFromTheLeft(Not FwdDir, LL + CStart - 1#, M + CStart - 1#, CStart, CEnd, WORK0, WORK1, C, CTEMP)
                End If
            End If
        End If
        
        '
        ' QR iteration finished, go back and check convergence
        '
        GoTo Cont_7
Cont_7:
    Loop
    
    '
    ' All singular values converged, so make them positive
    '
    For i = 1# To N Step 1
        If D(i) < 0# Then
            D(i) = -D(i)
            
            '
            ' Change sign of singular vectors, if desired
            '
            If NCVT > 0# Then
                For i_ = VStart To VEnd Step 1
                    VT(i + VStart - 1#, i_) = -1 * VT(i + VStart - 1#, i_)
                Next i_
            End If
        End If
    Next i
    
    '
    ' Sort the singular values into decreasing order (insertion sort on
    ' singular values, but only one transposition per singular vector)
    '
    For i = 1# To N - 1# Step 1
        
        '
        ' Scan for smallest D(I)
        '
        ISUB = 1#
        SMIN = D(1#)
        For J = 2# To N + 1# - i Step 1
            If D(J) <= SMIN Then
                ISUB = J
                SMIN = D(J)
            End If
        Next J
        If ISUB <> N + 1# - i Then
            
            '
            ' Swap singular values and vectors
            '
            D(ISUB) = D(N + 1# - i)
            D(N + 1# - i) = SMIN
            If NCVT > 0# Then
                J = N + 1# - i
                For i_ = VStart To VEnd Step 1
                    VTTemp(i_) = VT(ISUB + VStart - 1#, i_)
                Next i_
                For i_ = VStart To VEnd Step 1
                    VT(ISUB + VStart - 1#, i_) = VT(J + VStart - 1#, i_)
                Next i_
                For i_ = VStart To VEnd Step 1
                    VT(J + VStart - 1#, i_) = VTTemp(i_)
                Next i_
            End If
            If NRU > 0# Then
                J = N + 1# - i
                For i_ = UStart To UEnd Step 1
                    UTemp(i_) = U(i_, ISUB + UStart - 1#)
                Next i_
                For i_ = UStart To UEnd Step 1
                    U(i_, ISUB + UStart - 1#) = U(i_, J + UStart - 1#)
                Next i_
                For i_ = UStart To UEnd Step 1
                    U(i_, J + UStart - 1#) = UTemp(i_)
                Next i_
            End If
            If NCC > 0# Then
                J = N + 1# - i
                For i_ = CStart To CEnd Step 1
                    CTEMP(i_) = C(ISUB + CStart - 1#, i_)
                Next i_
                For i_ = CStart To CEnd Step 1
                    C(ISUB + CStart - 1#, i_) = C(J + CStart - 1#, i_)
                Next i_
                For i_ = CStart To CEnd Step 1
                    C(J + CStart - 1#, i_) = CTEMP(i_)
                Next i_
            End If
        End If
    Next i
    BidiagonalSVDDecompositionInternal = Result
End Function
Private Function ExtSignBDSQR(ByVal A As Double, ByVal B As Double) As Double
    Dim Result As Double
    If B >= 0# Then
        Result = Abs(A)
    Else
        Result = -Abs(A)
    End If
    ExtSignBDSQR = Result
End Function
Private Sub Svd2X2(ByVal F As Double, _
         ByVal G As Double, _
         ByVal H As Double, _
         ByRef SSMIN As Double, _
         ByRef SSMAX As Double)
    Dim AAS As Double
    Dim AT As Double
    Dim AU As Double
    Dim C As Double
    Dim FA As Double
    Dim FHMN As Double
    Dim FHMX As Double
    Dim GA As Double
    Dim HA As Double
    FA = Abs(F)
    GA = Abs(G)
    HA = Abs(H)
    FHMN = MinReal(FA, HA)
    FHMX = MaxReal(FA, HA)
    If FHMN = 0# Then
        SSMIN = 0#
        If FHMX = 0# Then
            SSMAX = GA
        Else
            SSMAX = MaxReal(FHMX, GA) * Sqr(1# + Square(MinReal(FHMX, GA) / MaxReal(FHMX, GA)))
        End If
    Else
        If GA < FHMX Then
            AAS = 1# + FHMN / FHMX
            AT = (FHMX - FHMN) / FHMX
            AU = Square(GA / FHMX)
            C = 2# / (Sqr(AAS * AAS + AU) + Sqr(AT * AT + AU))
            SSMIN = FHMN * C
            SSMAX = FHMX / C
        Else
            AU = FHMX / GA
            If AU = 0# Then
                
                '
                ' Avoid possible harmful underflow if exponent range
                ' asymmetric (true SSMIN may not underflow even if
                ' AU underflows)
                '
                SSMIN = FHMN * FHMX / GA
                SSMAX = GA
            Else
                AAS = 1# + FHMN / FHMX
                AT = (FHMX - FHMN) / FHMX
                C = 1# / (Sqr(1# + Square(AAS * AU)) + Sqr(1# + Square(AT * AU)))
                SSMIN = FHMN * C * AU
                SSMIN = SSMIN + SSMIN
                SSMAX = GA / (C + C)
            End If
        End If
    End If
End Sub
Private Sub SvdV2X2(ByVal F As Double, _
         ByVal G As Double, _
         ByVal H As Double, _
         ByRef SSMIN As Double, _
         ByRef SSMAX As Double, _
         ByRef SNR As Double, _
         ByRef CSR As Double, _
         ByRef SNL As Double, _
         ByRef CSL As Double)
    Dim GASMAL As Boolean
    Dim SWP As Boolean
    Dim PMAX As Long
    Dim A As Double
    Dim CLT As Double
    Dim CRT As Double
    Dim D As Double
    Dim FA As Double
    Dim FT As Double
    Dim GA As Double
    Dim GT As Double
    Dim HA As Double
    Dim HT As Double
    Dim L As Double
    Dim M As Double
    Dim MM As Double
    Dim R As Double
    Dim S As Double
    Dim SLT As Double
    Dim SRT As Double
    Dim T As Double
    Dim Temp As Double
    Dim TSIGN As Double
    Dim TT As Double
    Dim V As Double
    FT = F
    FA = Abs(FT)
    HT = H
    HA = Abs(H)
    
    '
    ' PMAX points to the maximum absolute element of matrix
    '  PMAX = 1 if F largest in absolute values
    '  PMAX = 2 if G largest in absolute values
    '  PMAX = 3 if H largest in absolute values
    '
    PMAX = 1#
    SWP = HA > FA
    If SWP Then
        
        '
        ' Now FA .ge. HA
        '
        PMAX = 3#
        Temp = FT
        FT = HT
        HT = Temp
        Temp = FA
        FA = HA
        HA = Temp
    End If
    GT = G
    GA = Abs(GT)
    If GA = 0# Then
        
        '
        ' Diagonal matrix
        '
        SSMIN = HA
        SSMAX = FA
        CLT = 1#
        CRT = 1#
        SLT = 0#
        SRT = 0#
    Else
        GASMAL = True
        If GA > FA Then
            PMAX = 2#
            If FA / GA < MachineEpsilon Then
                
                '
                ' Case of very large GA
                '
                GASMAL = False
                SSMAX = GA
                If HA > 1# Then
                    V = GA / HA
                    SSMIN = FA / V
                Else
                    V = FA / GA
                    SSMIN = V * HA
                End If
                CLT = 1#
                SLT = HT / GT
                SRT = 1#
                CRT = FT / GT
            End If
        End If
        If GASMAL Then
            
            '
            ' Normal case
            '
            D = FA - HA
            If D = FA Then
                L = 1#
            Else
                L = D / FA
            End If
            M = GT / FT
            T = 2# - L
            MM = M * M
            TT = T * T
            S = Sqr(TT + MM)
            If L = 0# Then
                R = Abs(M)
            Else
                R = Sqr(L * L + MM)
            End If
            A = 0.5 * (S + R)
            SSMIN = HA / A
            SSMAX = FA * A
            If MM = 0# Then
                
                '
                ' Note that M is very tiny
                '
                If L = 0# Then
                    T = ExtSignBDSQR(2#, FT) * ExtSignBDSQR(1#, GT)
                Else
                    T = GT / ExtSignBDSQR(D, FT) + M / T
                End If
            Else
                T = (M / (S + T) + M / (R + L)) * (1# + A)
            End If
            L = Sqr(T * T + 4#)
            CRT = 2# / L
            SRT = T / L
            CLT = (CRT + SRT * M) / A
            V = HT / FT
            SLT = V * SRT / A
        End If
    End If
    If SWP Then
        CSL = SRT
        SNL = CRT
        CSR = SLT
        SNR = CLT
    Else
        CSL = CLT
        SNL = SLT
        CSR = CRT
        SNR = SRT
    End If
    
    '
    ' Correct signs of SSMAX and SSMIN
    '
    If PMAX = 1# Then
        TSIGN = ExtSignBDSQR(1#, CSR) * ExtSignBDSQR(1#, CSL) * ExtSignBDSQR(1#, F)
    End If
    If PMAX = 2# Then
        TSIGN = ExtSignBDSQR(1#, SNR) * ExtSignBDSQR(1#, CSL) * ExtSignBDSQR(1#, G)
    End If
    If PMAX = 3# Then
        TSIGN = ExtSignBDSQR(1#, SNR) * ExtSignBDSQR(1#, SNL) * ExtSignBDSQR(1#, H)
    End If
    SSMAX = ExtSignBDSQR(SSMAX, TSIGN)
    SSMIN = ExtSignBDSQR(SSMIN, TSIGN * ExtSignBDSQR(1#, F) * ExtSignBDSQR(1#, H))
End Sub
