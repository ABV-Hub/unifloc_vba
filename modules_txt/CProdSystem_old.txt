''=======================================================================================
''Unifloc 7.11  Apodemus agrarius                                           khabibullin.ra@gubkin.ru
''Petroleum engineering calculations modules (macroses)
''2000 - 2019
''
''=======================================================================================
'' класс для расчета системы - пласт - скважина - оборудование - совместный расчет пласта и скважины
'' один из ключевых классов для решения практических задач
'' обеспечивает решение задачи узлового анализа - расчет совместной работы скважины и пласта
' Option Explicit
'
' Private fluid_ As CPVT
' Private ESPdesign As New CESPpump              ' специальный насос с постоянным напором для расчета дизайна
' ' параметры пласта
' Private P_Reservoir As New CReservoirVogel
' ' параметры скважины
' Private WithEvents p_well As CWellESP
' Private WithEvents WellAnalyse As CWellESP                ' скважина для проведения построения графиков при проведении анализа
' Private WithEvents WellAnalyseTopDown As CWellESP         ' скважина для расчета кривой оттока с учетом УЭЦН
' Private WithEvents WellDesign As CWellESP                 ' скважина для расчета дизайна
' Private WithEvents WellSelfFlow As CWellESP               ' скважина без ЭЦН для расчета режимов фонтанирования
' ' параметры дизайна УЭЦН
' Private p_p_wfdesign_atma As Double              ' целевое забойное давления для дизайна УЭЦН
' Private p_Qldesign_m3day As Double             ' целевой дебит на поверхности для дизайна УЭЦН
' Private p_ESPdesignHead_m As Double            ' целевой напор установки для дизайна УЭЦН
' Private p_ESPdesigndP_atma As Double            ' целевой перепад давления который должна обеспечивать установка
' Private p_ESPdesignRate_m3day As Double        ' целевой дебит смеси через установки (номинальный дебит УЭЦН)
' Private p_ESPdesignPower_W As Double           ' целевая мощность потребляемая ЭЦН (мощность которую должен выдавать двигатель)
'  ' параметры скважины
' Private t_wh_C_ As Double
' Private t_bh_C_ As Double
' Private q_gas_free_sm3day_ As Double
' Private p_Error_msg As String
' ' параметры решения системы
' Private p_p_wfSol_atma As Double
' Private p_PISol_m3dayatm As Double
'' набор кривых для описания системы добычи нефти
' Private curves_ As New Collection     ' коллекция кривых с результатами расчетов
'
' Private c_PS_curve As New CInterpolation           ' системная кривая - разность кривой оттока и кривой притока
' Private c_VLP_curve As New CInterpolation          ' кривая оттока для скважины - зависимость забойного давления от дебита (с учетом работы оборудования)
' Private c_VLPselfFlowing_curve As New CInterpolation   ' кривая оттока для фонтанирующей скважины (при отсутствии сепарации)
' Private c_VLP_ESP_curve As New CInterpolation      ' кривая оттока с учетом УЭЦН
' Private c_IPR_curve As New CInterpolation          ' кривая притока к скважине - зависимость забойного давления от дебита со стороны пласта
' Private c_PintakeQl_curve As New CInterpolation    ' кривая зависимости давления на приеме от дебита, учет пласта и участка трубы ниже насоса
' Private c_PdischargeDesignQl_curve As New CInterpolation ' кривая зависимости давления на выкиде насоса от дебита, учет потока по НКТ выше насоса с учетом Ксепарации(давления на приеме)
' Private c_PdischargeESPQl_curve As New CInterpolation ' кривая давления на выкиде от дебита расчитанная через УЭЦН
' Private c_PwhQl_curve As New CInterpolation          ' кривая зависимости давления на устье (буфере) от забойного давления (дебита), учет пласта и скважины и скважинного оборудования
' Private c_HdynQl_curve As New CInterpolation
' Private c_PanQl_curve As New CInterpolation
' Private c_p_linQl_curve As New CInterpolation
' Private c_HeadRequiredQl_curve As New CInterpolation     ' кривая необходимого напора для скважины - дизайн УЭЦН, зависит от требуемого перепада давления
' Private c_GasFarctionQl_curve As New CInterpolation      ' кривая доли газа для дизайна
' Private c_KsepQl_curve As New CInterpolation             ' кривая коэффициента сепарации общего от дебита
' Private c_ksep_natQl_curve As New CInterpolation          ' кривая коэффициента сепарации натурального  от дебита
' Private c_ksep_gassepQl_curve As New CInterpolation       ' кривая коэффициента сепарации газосепаратора от дебита
' Private c_PdischargeSelfFlowQl_curve As New CInterpolation
' Private c_PdischargeFromTopQl_curve As New CInterpolation
' Private c_PintakeFromTopQl_curve As New CInterpolation
' Private c_q_mix_Ql_curve As New CInterpolation             ' кривая зависимости дебита смеси через насос от дебита на поверхности
' Private p_PScalculated As Boolean ' флаг показывает что все данные в системе соответствуют друг другу
' Public Event ReportProgress(msg As String)
' Public Event ReportDebug(msg As String)
'
'  ' блок оценки качества данных
' 'Private p_LogMsg As New CLogger                ' логгер
'
'
'  ' конструктор класса
'  ' вызывается при создании класса - гарантирует что все объекты будут созданы
' Private Sub Class_Initialize()
'    p_PScalculated = False
'
'
'    ' создадим объекты скважин чтобы они были готовы
'    Set fluid_ = New CPVT
'    Set p_well = New CWellESP
'
'    Set fluid = fluid_
'    p_Error_msg = ""
'
' End Sub
'
'' Public Property get' LogMsg() As CLogger
''    'Set' LogMsg = p_LogMsg
'' End Property
''
'' Public Property 'Set' LogMsg(val As CLogger)
'' ' распространяем систему логирования на все вложенные объекты
''    Set p_LogMsg = val
''    Set fluid.LogMsg = val
''    Set Reservoir.LogMsg = val
''    Set ESPdesign.LogMsg = val
''    Set well.LogMsg = val
''
''    ' все вспомогательные скважины получаются из основной клонированием - поэтому не надо их в явном виде подключать
''
''
'' End Property
'
' Public Property get Qldesign_m3day() As Double
'    Qldesign_m3day = p_Qldesign_m3day
' End Property
' Public Property get fluid() As CPVT
'    Set fluid = fluid_
' End Property
'
' Public Property Set fluid(val As CPVT)
'    Set fluid_ = val
'    Set p_well.fluid = val
'    Set ESPdesign.fluid = val
'    Set Reservoir.fluid = val
' End Property
'
' Public Property get Reservoir() As CReservoirVogel
'   Set Reservoir = P_Reservoir
' End Property
'
' Public Property get ESPdesignHead() As Double
'   ESPdesignHead = p_ESPdesignHead_m
' End Property
'
' Public Property get ESPdesignRate() As Double
'   ESPdesignRate = p_ESPdesignRate_m3day
' End Property
'
' Public Property get PScalculated() As Double
'    PScalculated = p_PScalculated
' End Property
'
' Public Property get well() As CWellESP
'    Set well = p_well
' End Property
'
' Public Property Set well(val As CWellESP)
'    Set p_well = val
' End Property
'
' Public Property Let qliq_sm3day(val As Double)
'    fluid.qliq_sm3day = val
' End Property
'
' Public Property get qliq_sm3day() As Double
'    qliq_sm3day = fluid.qliq_sm3day
' End Property
'
'' Public Property Let pwf_atma(val As Double)
''    p_p_wfSol_atma = val
''    p_well.pwf_atma = val
'' End Property
'
' Public Property get pwf_atma() As Double
'    pwf_atma = p_p_wfSol_atma
' End Property
'
'Private Sub p_well_ReportProgress(msg As String)
'     RaiseEvent ReportProgress(msg)
'End Sub
'
'Private Sub WellAnalyse_ReportProgress(msg As String)
'     RaiseEvent ReportProgress(msg)
'End Sub
'
'Private Sub WellAnalyseTopDown_ReportProgress(msg As String)
'     RaiseEvent ReportProgress(msg)
'End Sub
'
'Private Sub WellDesign_ReportProgress(msg As String)
'     RaiseEvent ReportProgress(msg)
'End Sub
'
'Private Sub WellSelfFlow_ReportProgress(msg As String)
'     RaiseEvent ReportProgress(msg)
'End Sub
'
'Public Sub RegCurve(name As String)
'    Dim crv As New CInterpolation
'    Set curve(name) = crv
'End Sub
'
'Public Property get curve(Key As String) As CInterpolation
'On Error Resume Next
'    Dim exists As Boolean
'    exists = Not IsEmpty(curves_.item(Key))
'    If exists Then
'       Set curve = curves_.item(Key)
'    Else
'       Set curve = New CInterpolation
'       curves_.Add curve, Key
'    End If
'End Property
'
'Public Property Set curve(Key As String, valNew As CInterpolation)
' On Error Resume Next
'    Dim exists As Boolean
'    exists = Not IsEmpty(curves_.item(Key))
'    If exists Then
'       curves_(Key) = valNew
'    Else
'       curves_.Add valNew, Key
'    End If
'End Property
'
'
' Public Function calc_pi_testPoint(ByVal qliq_m3day As Double, ByVal fw_perc As Double, ByVal rp_m3m3 As Double, _
'                                Optional p_int_atma As Double = -1, Optional ByVal t_int_C As Double = -1, Optional ByVal t_bh_C As Double = -1, _
'                                Optional Hd_m As Double = -1, Optional p_an_atma As Double = -1, _
'                                Optional plin_atma As Double = -1, Optional pwf_atma As Double = -1)
'' @brief Расчет продуктивности скважины по данным нормальной работы скважины
'' @param qliq_m3day - Дебит жидкости
'' @param fw_perc - Обводненность
'' @param rp_m3m3 - Газовый фактор
'' Optional
'' @param p_int_atma - Давление на приеме
'' @param t_int_C - Температура на приеме
'' @param t_bh_C - Температура на забое
'' @param Hd_m - Динамический уровень
'' @param p_an_atma - затрубное давление
'' @param plin_atma - Линейное давление
'
'  '  1. Начало расчета. Анализируем входные данные, записываем их в свойства класса
'
'  RaiseEvent ReportProgress("CProdSystem_old.calc_Solution_Qtest: Определяем продуктивность скважины. Q = " & qliq_m3day)
'
'  p_well.qliq_sm3day = qliq_m3day
'  p_well.fw_perc = fw_perc
'  p_well.rp_m3m3 = rp_m3m3
'  If pwf_atma <= 0 Then
'        ' 2. Расчет забойного давления
'        If (p_int_atma >= 0 And t_int_C >= 0) Then
'          ' 2.1 Если задано давление на приеме насоса Pin то оно используется для расчета забойного давления скважины
'          p_p_wfSol_atma = p_well.calc_pwf_pint_atma(p_int_atma)
'
'          RaiseEvent ReportProgress("CProdSystem_old.calc_Solution_Qtest: Нашли забойное по давлению на приеме. p_int_atma =" & p_int_atma & " p_wf = " & p_p_wfSol_atma)
'
'        ElseIf (Hd_m >= 0 And p_an_atma >= 0 And t_bh_C >= 0) Then
'          ' 2.2 Если давление на приеме не задано или равно нулю, но заданы динамический уровень Hdyn и затрубное давление Pcas - то они используются для расчета забойного давления
'          p_p_wfSol_atma = p_well.calc_pwf_pcas_hdyn_atma(p_an_atma, Hd_m, t_bh_C).p_atma
'
'          RaiseEvent ReportProgress("CProdSystem_old.calc_Solution_Qtest: Нашли забойное по динамическому уровню. Hd_m =" & Hd_m & " p_wf = " & p_p_wfSol_atma)
'
'        ElseIf (plin_atma >= 0 And t_bh_C >= 0) Then
'          ' 2.3 Если задано только линейное давление - то оно используется для расчета забойного давления
'          p_p_wfSol_atma = p_well.calc_pwf_plin_atma(plin_atma, t_bh_C)
'
'          RaiseEvent ReportProgress("CProdSystem_old.calc_Solution_Qtest: Нашли забойное по линейному давлению. plin_atma =" & plin_atma & " p_wf = " & p_p_wfSol_atma)
'
'        Else
'          ' exception
'        End If
'  Else
'        p_p_wfSol_atma = pwf_atma
'
'        RaiseEvent ReportProgress("CProdSystem_old.calc_Solution_Qtest: Забойное давление задано. p_wf = " & p_p_wfSol_atma)
'
'  End If
'  ' 3. PI=PI(Qliq,p_wf) по найденным значениям забойного давления и дебита ищется коэффициент продуктивности скважины
'
'
'  p_PISol_m3dayatm = P_Reservoir.calc_pi_sm3dayatm(qliq_m3day, p_p_wfSol_atma)
'  calc_pi_testPoint = p_PISol_m3dayatm
'
'  RaiseEvent ReportProgress("CProdSystem_old.calc_Solution_Qtest: Определили продуктивность p_PISol_m3dayatm = " & p_PISol_m3dayatm)
'
' End Function
'
'
'
' Public Sub calc_Solution_pi(ByVal p_line_atma As Double, ByVal t_bh_C As Double, Optional calcFast As Boolean = False)
' ' расчет решения при известной продуктивности скважины
'  Dim numsol As Integer
'  Dim qs
'  On Error GoTo err1:
'   RaiseEvent ReportProgress("CProdSystem_old.calc_Solution_pi: Запуск поиска решения задачи узлового анализа pi " & Format(P_Reservoir.pi_sm3dayatm, "##0.00"))
'
'   ' 1. Начало расчета. Анализируем входные данные, записываем их в свойства класса
'  '''' p_well.p_line_atma = p_line_atma
'
'   ' 2. Рассчитываем кривую оттока для скважины
'   ' 2.1 Пределы расчета кривой оттока от 0 м3/сут до максимально дебита скважины Qmax
'   Set c_IPR_curve = P_Reservoir.Build_IPRcurve()
'   RaiseEvent ReportProgress("CProdSystem_old.calc_Solution_pi: Построили индикаторную кривую ")
'
'   ' 3. Рассчитываем кривую притока для пласта
'   Set c_VLP_curve = p_well.Build_VLPcurve(p_line_atma, t_bh_C, P_Reservoir.calc_qliq_sm3day(0))
'
'   ' 4. Находим решение задачи узлового анализа
'   ' 4.1 для нахождения решения строим системную кривую - вычитая из индикаторной кривой кривую оттока
'   Set c_PS_curve = SubtractCurve(c_VLP_curve, c_IPR_curve)
'
'   ' 4.2 по системной кривой находим пересечение ее с нулем
'   numsol = c_PS_curve.FindSolutions(0)
'   Dim i As Integer
'
'   If numsol = 0 Then Debug.Assert False
'
'        For i = 0 To numsol - 1
'            qliq_sm3day = c_PS_curve.SolutionPointX(i + 1)
'          ''''  pwf_atma = P_Reservoir.calc_pwf_atma(qliq_sm3day)
'        Next i
'
'   RaiseEvent ReportProgress("CProdSystem_old.calc_Solution_pi: Решение построение. Кол-во решений = " & numsol & " p_wf = " & Format(p_p_wfSol_atma, "##0.00"))
'   Exit Sub
'err1:
'
'   RaiseEvent ReportProgress("CProdSystem_old.calc_Solution_pi: Решение не найдено")
'   Err.Raise kErrNodalCalc, Err.Source, "CProdSystem_old.calc_Solution_pi: Ошибка при расчете решения узлового анализа " & Err.Description
'
' End Sub
'
' Public Sub calc_Nodal_pi(ByVal plin_atma As Double)
' ' поиск решения задачи узлового анализа по заданной продуктивности скважины
' '
' Dim errMsg As String
' On Error GoTo err1:
'    Dim num_points As Integer
'    Call BuildNodalWHCurve_pi(plin_atma)         'после построения кривой можно найти параметры
'    num_points = curve("c_p_linQl_curve").FindSolutions(plin_atma)
'    If num_points >= 1 Then
'        qliq_sm3day = curve("c_p_linQl_curve").FindMaxOneSolution(plin_atma)
'     ''''   pwf_atma = Reservoir.calc_pwf_atma(qliq_sm3day)
'    Else
'        qliq_sm3day = 0
'     ''''   pwf_atma = Reservoir.calc_pwf_atma(qliq_sm3day)
'    End If
'
'    Exit Sub
'err1:
'    errMsg = "CProdSystem_old.calc_Nodal_pi: Ошибка при расчете решения узлового анализа " & sDELIM & Err.Description
'
'    RaiseEvent ReportProgress("CProdSystem_old.calc_Nodal_pi: Решение не найдено:" & errMsg)
''    Err.Raise Err.Number, Err.Source, Err.Description
'    Err.Raise kErrNodalCalc, Err.Source, errMsg
' End Sub
'
'
' Public Sub calc_ESPdesign(ByVal pbuf_atma As Double, ByVal p_wfTarg_atma As Double, ByVal t_bh_C As Double, _
'                            Optional calcFast As Boolean = False)
'
' ' расчет дизайна оборудования для скважины
'
'    Dim i As Integer
'    Dim Minp_wf As Double, Maxp_wf As Double
'    Dim Q As Double, p_wf As Double
'    Dim minQ As Double, maxQ As Double, maxQres As Double    ' вспомогательные переменные для построения системных графиков
'    Dim stepQ As Double, stepQ2 As Double
'    Dim num_points As Integer    ' количество точек для построения графика
'    Dim WellAnalyseESPdP As Double
'    Dim WellAnalyseESPdP_old As Double
'
'
'    RaiseEvent ReportProgress("CProdSystem_old: Запуск процедуры дизайна оборудования для скважины")
'
'    Call Clearcurves
'
'    ' для построения графиков подготовим данные необходимые и для дизайна тоже
'    Call ESPdesign.loadESPdesign
'    ESPdesign.stage_num = 100
'    Set WellDesign = p_well.clone()
'    Set WellDesign.ESP = ESPdesign
'    WellDesign.clearChoke  ' отключим штуцер пока чтобы не мешал при дизайне
'
'    Set WellSelfFlow = p_well.clone()   ' клонируем еще одну скважину чтобы построить кривую VLP без учета насоса
'    Set WellSelfFlow.ESP = Nothing
'    WellSelfFlow.clearChoke    ' отключим штуцер пока чтобы не мешал для расчета фонтана
'
'    num_points = 20
'    Minp_wf = 10 ' well.p_line_atma
'    Maxp_wf = P_Reservoir.Pres_atma * 0.99  ' для максимальной границы расчета берем 0.99 от пластового чтобы не натыкаться на нулевой дебит
'    minQ = P_Reservoir.calc_qliq_sm3day(Maxp_wf)  ' начнем строить графики с минимального дебита
'    maxQres = P_Reservoir.calc_qliq_sm3day(Minp_wf)
'    maxQ = maxQres * 1.2   ' строить будем немного дальше конца пласта (некоторые графики)
'    stepQ = (maxQ - minQ) / num_points
'    stepQ2 = stepQ
'    Q = minQ - stepQ
'
'    RaiseEvent ReportProgress("CProdSystem_old: Подготовка системного анализа завершена, созданы клоны для сравнения дизайна, фонтана и анализа")
'    RaiseEvent ReportProgress("CProdSystem_old: Старт системного анализа. Всего точек = " & num_points)
'
'    WellAnalyseESPdP_old = 100
'    i = 0
'If Not calcFast Then
'    Do
'        i = i + 1
'        Q = Q + stepQ
'setQ:
'        RaiseEvent ReportProgress("итерация " & i & "  Q =" & Format(Q, "##0.0") & "   шаг по Q =" & Format(stepQ, "##0.00"))
'        p_wf = P_Reservoir.calc_pwf_atma(Q)
'
'        WellSelfFlow.qliq_sm3day = Q
'        WellDesign.qliq_sm3day = Q
'
'        Call WellSelfFlow.calc_pwf_plin_atma(pbuf_atma, t_bh_C)   ' тут надо бы разобраться с линейным и буферным давлением
'
'        If Q < maxQres Then
'
'          ''''  Call WellDesign.calc_well(pbuf_atma, pbuf_atma, p_wf, t_bh_C)
'            p_ESPdesignHead_m = 100 * (1 - WellDesign.ESP.c_calibr_head)
'            ' набор кривых полученных при расчете дизайна установки под скважину
'            c_HeadRequiredQl_curve.AddPoint Q, p_ESPdesignHead_m                   ' напор необходимый для данной скважины для данного дебита
'            p_ESPdesignRate_m3day = WellDesign.ESP.q_mix_PumpIntake_m3day
'            c_PdischargeDesignQl_curve.AddPoint Q, WellDesign.p_dis_atma       ' давление на выкиде расчетное по дизайну для установки
'            c_PS_curve.AddPoint Q, WellDesign.p_dis_atma - WellDesign.p_int_atma
'            'набор кривых полученных при расчете анализа установки - расчете снизу вверх по заданному забойному давлению
'            c_GasFarctionQl_curve.AddPoint Q, WellDesign.ESP.gas_fraction_PumpIntake_d ' доля газа при заданном забойном
'            c_PintakeQl_curve.AddPoint Q, WellDesign.p_int_atma                  ' давление на приеме
'         '   c_PdischargeESPQl_curve.AddPoint Q, WellAnalyse.p_dis_atma         ' давление на выкиде которое сможет развить текушая установка
'            c_HdynQl_curve.AddPoint Q, WellDesign.h_dyn_m                          ' динамический уровень
'            c_PanQl_curve.AddPoint Q, WellDesign.p_an_atma                          ' затрубное давление
'            c_PwhQl_curve.AddPoint Q, WellDesign.pbuf_atma                         ' буферное давление
'            c_p_linQl_curve.AddPoint Q, WellDesign.p_line_atma                       ' линейное давление
'
'            c_KsepQl_curve.AddPoint Q, WellDesign.ksep_total_d                          '
'           ' c_ksep_natQl_curve.AddPoint Q, WellDesign.ksep_nat_d
'           ' c_ksep_gassepQl_curve.AddPoint Q, WellDesign.ksep_gassep_d
'            ' дополнительные "странные" графики
'            c_q_mix_Ql_curve.AddPoint Q, WellDesign.ESP.q_mix_PumpIntake_m3day
'        End If
'        c_IPR_curve.AddPoint Q, p_wf
'
'        ' начинаем строит кривые для отчета
'        ' набор кривых для фонтанирующей скважины
'        c_VLPselfFlowing_curve.AddPoint Q, WellSelfFlow.pwf_atma
'        c_PdischargeSelfFlowQl_curve.AddPoint Q, WellSelfFlow.p_dis_atma
'
'        ' набор кривых для скважины с граничным условием на поверхности
'       ' c_VLP_curve.AddPoint Q, WellAnalyseTopDown.pwf_atma
''        c_VLP_ESP_curve.AddPoint Q, WellAnalyseTopDown.p_dis_atma
'       ' c_PdischargeFromTopQl_curve.AddPoint Q, WellAnalyseTopDown.p_dis_atma
'
'    Loop Until Q >= maxQ
'
'    RaiseEvent ReportProgress("системный анализ завершен, графики построены!!! ")
'End If
'
'    RaiseEvent ReportProgress("начинаем расчет параметров дизайна на текущее давление")
'
'    p_p_wfdesign_atma = p_wfTarg_atma
'
'    p_wf = p_p_wfdesign_atma
'
'    Q = P_Reservoir.calc_qliq_sm3day(p_wf)
'    WellDesign.qliq_sm3day = Q
'    p_Qldesign_m3day = Q
'
'  ''''  Call WellDesign.calc_well(pbuf_atma, pbuf_atma, p_wf, t_bh_C)
'
'    p_ESPdesigndP_atma = WellDesign.p_dis_atma - WellDesign.p_int_atma
'    p_ESPdesignHead_m = 100 * (1 - WellDesign.ESP.c_calibr_head)
'    p_ESPdesignRate_m3day = WellDesign.ESP.q_mix_PumpIntake_m3day     ' надо будет поправить чтобы тут использовался средний дебит а не максимальный
'  '  p_ESPdesignPower_W = WellDesign.ESP.PowerMotor_Wt
'    ' теперь тут надо вытащить забойное давление - определить продуктивность и построить кривые VLP и IPR
'    RaiseEvent ReportProgress("расчет параметров дизайна завершен")
'
'If Not calcFast Then
'    Set p_well.ESP = WellDesign.ESP
'        ' построим кривые для скважины
'    With p_well
'        Call .Build_Hdp_wfcurve(p_well.p_an_atma, t_bh_C, p_p_wfdesign_atma)
'        RaiseEvent ReportProgress("CProdSystem_old: -------- Зависимость динамического уровня от забойного давления построена")
'
'        Call .Build_Pwhp_wfcurve(t_bh_C)
'        RaiseEvent ReportProgress("CProdSystem_old: -------- Зависимость устьевого давления от забойного давления построена")
'
'     '   Call .Build_SeparCurve
'        RaiseEvent ReportProgress("CProdSystem_old: -------- Зависимость сепарации от дебита построена")
'
'     '   Call .ESP.build_curves
'        RaiseEvent ReportProgress("CProdSystem_old: -------- Кривые по работе УЭЦН построены")
'
'        Call .choke.build_curves
'        RaiseEvent ReportProgress("CProdSystem_old: -------- Кривые по характеристике штуцера построены")
'
'        Call .fluid.build_curves(t_wh_C_)
'
'        Call .fluid_tub.build_curves(t_wh_C_)
'        RaiseEvent ReportProgress("CProdSystem_old: -------- Кривые PVT построены")
'    End With
'End If
'
'
' End Sub
'
' Public Sub calc_Forecast(ByVal plin_atma As Double, Optional ByVal t_bh_C As Double = -1, Optional calcFast As Boolean = False)
'
'    Call calc_Analysis(0, 0, plin_atma, 0, t_bh_C:=Tbh_C, CalcForecast:=True, calcFast:=calcFast)
'
' End Sub
'
' Public Sub calc_Analysis(ByVal QliQtest_sm3day As Double, ByVal fw_perc As Double, ByVal plin_atma As Double, ByVal pbuf_atma As Double, _
'                         Optional ByVal pwf_atma As Double = -1, Optional ByVal t_bh_C As Double = -1, _
'                         Optional p_int_atma As Double = -1, Optional t_int_C As Double = -1, Optional h_dyn_m As Double = -1, Optional p_an_atma As Double = -1, _
'                         Optional CalcForecast As Boolean = False, Optional calcFast As Boolean = False)
'
' ' расчет анализ скважины
' ' берет исходные данные по тесту скважины - дебит и замеры давлений
' ' считает продуктивность и все параметры работы скважины
' ' CalcForecast - флаг расчета прогноза по скважине, решение задачи узлового анализа
'
'    ' расчет параметров для дизайна УЭЦН
' ' тут надо устроить цикл по всем дебитам по индикаторной диаграмме  и для каждого дебита определить характеристики дизайна установки
'
'    Dim Q As Double, p_wf As Double
'    Dim degr_good As Boolean
'
'    t_bh_C_ = t_bh_C
'
'    RaiseEvent ReportProgress("CProdSystem_old: Запуск процедуры анализа скважины")
'
'    Call Clearcurves
'
'    If Not CalcForecast Then
'
'        Q = QliQtest_sm3day
'
'        Call calc_pi_testPoint(QliQtest_sm3day, fw_perc, fluid.rp_m3m3, p_int_atma, t_int_C, t_bh_C, h_dyn_m, p_an_atma, plin_atma, pwf_atma)
'        pwf_atma = p_p_wfSol_atma   ' если при поиске продуктивности пришлось вычислить забойное - то далее учитываем найденное решение
'
'        RaiseEvent ReportProgress("CProdSystem_old: Запуск расчета скважины с заданными параметрами | plin_atma = " & Format(plin_atma, "#0.0") _
'                                                                                           & "| pbuf_atma  = " & Format(pbuf_atma, "#0.0") _
'                                                                                           & "| pwf_atma  = " & Format(pwf_atma, "#0.0") _
'                                                                                           & "| t_bh_C  = " & Format(t_bh_C, "#0.0") _
'                                                                                           & "| p_int_atma  = " & Format(p_int_atma, "#0.0") _
'                                                                                           & "| h_dyn_m  = " & Format(h_dyn_m, "#0.0") _
'                                                                                           & "| p_an_atma  = " & Format(p_an_atma, "#0.0") & ".")
'
'        ' проведем расчет скважины для заданных параметров
'        ' для скважины должен быть задан дебит, конструкция и прочие параметры
'      '  degr_good = p_well.calc_well(plin_atma, pbuf_atma, pwf_atma, t_bh_C, p_int_atma, h_dyn_m, p_an_atma)
'        If Not degr_good Then
'             p_Error_msg = "Деградацию УЭЦН определить не удалось"
'             RaiseEvent ReportProgress("CProdSystem_old: Деградацию УЭЦН определить не удалось ")
'             addLogMsg "Ошибка при анализе скважины"
'             Exit Sub
'        End If
'        ' по результатам расчета будут определены подстроечные параметры для штуцера и насоса
'    Else
'        Call calc_Solution_pi(plin_atma, t_bh_C)
'        ' должны отсюда получить забойное давление - решение
'        pwf_atma = p_p_wfSol_atma   ' если при поиске продуктивности пришлось вычислить забойное - то далее учитываем найденное решение
'
'    End If
'
'
'    t_wh_C_ = p_well.t_wh_C
'
'    RaiseEvent ReportProgress("CProdSystem_old: Расчет скважины завершен.   | c_calibr_head = " & Format(p_well.ESP.c_calibr_head, "#0.00") _
'                                                                                       & "| well.choke.c_calibr_fr  = " & Format(p_well.choke.c_calibr_fr, "#0.00") & ".")
''    Call build_curves(p_an_atma, t_bh_C, pwf_atma)
''
''
''
''    Call BuildSyscurves(plin_atma, t_bh_C, calcFast, CalcForecast)
'
'
'    RaiseEvent ReportProgress("Расчет анализ скважины завершен")
' End Sub
'
'
'
'' Public Function SaveState()
'' ' сохраняет состояние объекта в двухмерный массив для обеспечения вывода (для отладки)
''
''    RaiseEvent ReportProgress("Готовимся сохранять результаты")
''
''    Dim stor()
''    Dim i As Integer
''    i = 0
''
''    ReDim stor(const_OutputCurveNumPoints, STOR_SIZE)
''    stor(0, 0) = "ProdSystem SaveState"   ' тут будет общея строка с датой сохранения дампа
''
''    AddS stor, 1, 0, "construction    "
''    AddS stor, 2, 0, "p_wf atma               ", Me.well.pwf_atma
''    AddS stor, 3, 0, "Qliq                  ", well.qliq_sm3day
''    AddS stor, 4, 0, "Pres                  ", Reservoir.Pres_atma
''    AddS stor, 5, 0, "pi                    ", Reservoir.pi_sm3dayatm
''    AddS stor, 6, 0, "--                    ", ""
''    AddS stor, 7, 0, "p_p_wfdesign_atma       ", p_p_wfdesign_atma
''    AddS stor, 8, 0, "p_Qldesign_m3day      ", p_Qldesign_m3day
''    AddS stor, 9, 0, "p_ESPdesigndP_atma     ", p_ESPdesigndP_atma
''    AddS stor, 10, 0, "p_ESPdesignHead_m     ", p_ESPdesignHead_m
''    AddS stor, 11, 0, "p_ESPdesignRate_m3day ", p_ESPdesignRate_m3day
''    AddS stor, 12, 0, "p_ESPdesignPower_W    ", p_ESPdesignPower_W
''
''    AddS stor, 13, 0, "p_Error_msg  ", p_Error_msg
''
''    i = i + 2
''    AddS stor, 0, i, "Qliq m3/day", "IPR p_wf atma"
''    AddSCurve stor, 1, 2, c_IPR_curve
''
''    i = i + 2
''    AddS stor, 0, i, "Qliq m3/day", "VLP p_wf atma"
''    AddSCurve stor, 1, i, c_VLP_curve
''
''    i = i + 2
''    AddS stor, 0, i, "Qliq m3/day", "PS p_wf atma"
''    AddSCurve stor, 1, i, c_PS_curve
''
''    i = i + 2
''    AddS stor, 0, i, "Qliq m3/day", "VLPsf p_wf atma"
''    AddSCurve stor, 1, i, c_VLPselfFlowing_curve
''
''    i = i + 2
''    AddS stor, 0, i, "Qliq m3/day", "Pintake atma"
''    AddSCurve stor, 1, i, c_PintakeQl_curve
''
''    i = i + 2
''    AddS stor, 0, i, "Qliq m3/day", "Pdis design atma"
''    AddSCurve stor, 1, i, c_PdischargeDesignQl_curve
''
''    i = i + 2
''    AddS stor, 0, i, "Qliq m3/day", "Pwh atma"
''    AddSCurve stor, 1, i, c_PwhQl_curve
''
''    i = i + 2
''    AddS stor, 0, i, "Qliq m3/day", "head m"
''    AddSCurve stor, 1, i, c_HeadRequiredQl_curve
''
''    i = i + 2
''    AddS stor, 0, i, "Qliq m3/day", "Gas frac"
''    AddSCurve stor, 1, i, c_GasFarctionQl_curve
''
''
''    i = i + 2
''    AddS stor, 0, i, "Qliq m3/day", "Ksep total"
''    AddSCurve stor, 1, i, c_KsepQl_curve
''
''
''    i = i + 2
''    AddS stor, 0, i, "Qliq m3/day", "Ksep nat"
''    AddSCurve stor, 1, i, c_ksep_natQl_curve
''
''    i = i + 2
''    AddS stor, 0, i, "Qliq m3/day", "Ksep Gas Sep"
''    AddSCurve stor, 1, i, c_ksep_gassepQl_curve
''
''    i = i + 2
''    AddS stor, 0, i, "Qliq m3/day", "Q mix"
''    AddSCurve stor, 1, i, c_q_mix_Ql_curve
''
''    i = i + 2
''    AddS stor, 0, i, "Qliq m3/day", "PdisESP mix"
''    AddSCurve stor, 1, i, c_PdischargeESPQl_curve
''
''
''    i = i + 2
''    AddS stor, 0, i, "Qliq m3/day", "Pdis from top atma"
''    AddSCurve stor, 1, i, c_PdischargeFromTopQl_curve
''
''    i = i + 2
''    AddS stor, 0, i, "Qliq m3/day", "Pdis self flow atma"
''    AddSCurve stor, 1, i, c_PdischargeSelfFlowQl_curve
''
''    i = i + 2
''    AddS stor, 0, i, "Qliq m3/day", "PintakeFromTopQl atma"
''    AddSCurve stor, 1, i, c_PintakeFromTopQl_curve
''
''    SaveState = stor
''
''   ' If p_well.calculated Then
''    SaveState = CombineS(stor, p_well.SaveState)
''
''  '  End If
''
'''     Private c_PS_curve As New CInterpolation           ' системная кривая - разность кривой оттока и кривой притока
'''
''' Private c_VLP_curve As New CInterpolation          ' кривая оттока для скважины - зависимость забойного давления от дебита (с учетом работы оборудования)
''' Private c_VLPselfFlowing_curve As CInterpolation   ' кривая оттока для фонтанирующей скважины (при отсутствии сепарации)
''' Private c_IPR_curve As New CInterpolation          ' кривая притока к скважине - зависимость забойного давления от дебита со стороны пласта
'''
''' Private c_PintakeQl_curve As New CInterpolation    ' кривая зависимости давления на приеме от дебита, учет пласта и участка трубы ниже насоса
''' Private c_PdischargeQl_curve As New CInterpolation ' кривая зависимости давления на выкиде насоса от дебита, учет потока по НКТ выше насоса с учетом Ксепарации(давления на приеме)
''' Private c_PwhQl_curve As New CInterpolation        ' кривая зависимости давления на устье (буфере) от забойного давления (дебита), учет пласта и скважины и скважинного оборудования
'''
'''
''' Private c_HeadRequiredQl_curve As New CInterpolation     ' кривая необходимого напора для скважины - дизайн УЭЦН, зависит от требуемого перепада давления
''' Private c_GasFarctionQl_curve As New CInterpolation      ' кривая доли газа для дизайна
''' Private c_KsepQl_curve As New CInterpolation             ' кривая коэффициента сепарации общего от дебита
''' Private c_ksep_natQl_curve As New CInterpolation          ' кривая коэффициента сепарации натурального  от дебита
''' Private c_ksep_gassepQl_curve As New CInterpolation       ' кривая коэффициента сепарации газосепаратора от дебита
'''
''' Private c_q_mix_Ql_curve As New CInterpolation             ' кривая зависимости дебита смеси через насос от дебита на поверхности
''
''
''
''    RaiseEvent ReportProgress("Все результаты сохранены")
''
'' End Function
''
''
' Private Sub build_curves(ByVal p_an_atma As Double, ByVal t_bh_C As Double, ByVal pwf_atma As Double)
'    RaiseEvent ReportProgress("CProdSystem_old: Строим кривые для расчета скважины (Q = const), сепарацииб УЭЦН и штуцера")
'
'    ' построим кривые для скважины
'    With p_well
'        Call .Build_Hdp_wfcurve(p_an_atma, t_bh_C, pwf_atma)
'        RaiseEvent ReportProgress("CProdSystem_old: -------- Зависимость динамического уровня от забойного давления построена")
'
'        Call .Build_Pwhp_wfcurve(, pwf_atma)
'        RaiseEvent ReportProgress("CProdSystem_old: -------- Зависимость устьевого давления от забойного давления построена")
'
'    '    Call .Build_SeparCurve
'        RaiseEvent ReportProgress("CProdSystem_old: -------- Зависимость сепарации от дебита построена")
'
''        Call .ESP.build_curves
'        RaiseEvent ReportProgress("CProdSystem_old: -------- Кривые по работе УЭЦН построены")
'
'        Call .choke.build_curves
'        RaiseEvent ReportProgress("CProdSystem_old: -------- Кривые по характеристике штуцера построены")
'
'        Call .fluid.build_curves(t_wh_C_)
'
'        Call .fluid_tub.build_curves(t_wh_C_)
'        RaiseEvent ReportProgress("CProdSystem_old: -------- Кривые PVT построены")
'    End With
'
'
' End Sub
'
' Public Sub BuildNodalWHCurve_pi(Optional Pwh_targ_atma As Double = 1)
''  метод для расчета кривой узлового анализа системы добычи на поверхности для заданной продуктивности
'' Pwh_targ_atma целевое значение устьевого давления, которое надо точнее найти
''
'' цель построения кривой - иметь возможность по ней восстановить пересечение с заданным значением устьевого давления
'' поэтому, чтобы избежать числовой ошибки надо точнее нарисовать кривую около этих точек.
'    Dim i As Integer, j As Integer
'    Dim Minp_wf As Double, Maxp_wf As Double
'    Dim pwf_0 As Double, Pwh_0 As Double
'    Dim pwf_1 As Double, Pwh_1 As Double
'    Dim Pwh_atma As Double
'    Dim Q As Double, p_wf As Double, p_wfstep As Double, Pintake As Double
'    Dim NumIntervals As Integer
'    Dim Done As Boolean
'    Dim PointDone As Boolean
'    Dim FirstPointDone As Boolean
'    Dim errMsg As String
' On Error GoTo err1:
'    PointDone = False
'    Done = False
'    FirstPointDone = False
'    NumIntervals = 10
'    Minp_wf = 1
'    Maxp_wf = P_Reservoir.Pres_atma * 0.99  ' для максимальной границы расчета берем 0.99 от пластового чтобы не натыкаться на нулевой дебит
' ' первую точку все равно надо считать, сделаем это вне основного цикла
'    p_wf = Maxp_wf
'    curve("c_p_linQl_curve").ClearPoints
'    p_wfstep = (Maxp_wf - Minp_wf) / NumIntervals
'    Q = Reservoir.calc_qliq_sm3day(p_wf)
'    Me.qliq_sm3day = Q
'    well.isCalcCasing = False
'    Pwh_atma = well.calc_plin_pwf_atma(p_wf)
'    Pintake = well.p_int_atma          ' вытаскиваем значение из скважины
'    curve("c_p_linQl_curve").AddPoint Me.qliq_sm3day, Pwh_atma
'    pwf_0 = p_wf
'    Pwh_0 = Pwh_atma
'    i = 0
'    RaiseEvent ReportProgress("BuildNodalWHCurve_pi: начало построения кривой узлового анализа на устье для Рлин = " & s(Pwh_targ_atma))
'    Do
'         If Pintake = 1 And i > 0 Then Exit Do
'         p_wf = p_wf - p_wfstep
'         If p_wf < 1 Then p_wf = 1
'         Q = Reservoir.calc_qliq_sm3day(p_wf)                         ' нашли точку по индикаторной кривой
'         Me.qliq_sm3day = Q                                       ' установили дебит для расчета
'         well.isCalcCasing = False
'         Pwh_atma = well.calc_plin_pwf_atma(p_wf)
'         If Pwh_atma > 1 Then FirstPointDone = True
'         If Pwh_atma > Pwh_targ_atma And p_wf = 1 Then
'         ' значит даже при атмосферном давлении устьевое будет выше необходимого
'             curve("c_p_linQl_curve").AddPoint Me.qliq_sm3day - 0.0001, Pwh_atma
'             curve("c_p_linQl_curve").AddPoint Me.qliq_sm3day, Pwh_targ_atma
'             Exit Sub
'         End If
'         curve("c_p_linQl_curve").AddPoint Q, Pwh_atma
'
'         RaiseEvent ReportProgress("BuildNodalWHCurve_pi: Точка i = " & i & ":  p_wf = " & s(p_wf) & ":  Pwh_atma =" & s(Pwh_atma))
'
'         ' фиксируем вторую точку
'         pwf_1 = p_wf
'         Pwh_1 = Pwh_atma
'         j = 0
'         If isBetween(Pwh_targ_atma, Pwh_0, Pwh_1) Then
'         ' здесь надо точнее найти точку пересения кривой, для этого используем метод дихотомии
'             Do
'                 j = j + 1
'                 p_wf = (pwf_0 + pwf_1) / 2
'                 Me.qliq_sm3day = Reservoir.calc_qliq_sm3day(p_wf)
'                 well.isCalcCasing = False
'                 Pwh_atma = well.calc_plin_pwf_atma(p_wf)
'                 curve("c_p_linQl_curve").AddPoint Me.qliq_sm3day, Pwh_atma
'
'                 RaiseEvent ReportProgress("BuildNodalWHCurve_pi: Ищем пересечение. Точка i = " & i & " j = " & j & ":  p_wf = " & s(p_wf) & ":  Pwh_atma =" & s(Pwh_atma))
'
'                 If isBetween(Pwh_targ_atma, Pwh_0, Pwh_atma) Then
'                     pwf_1 = p_wf
'                     Pwh_1 = Pwh_atma
'                 Else
'                     pwf_0 = p_wf
'                     Pwh_0 = Pwh_atma
'                 End If
'             Loop Until j > 100 Or Abs(pwf_1 - pwf_0) < 0.1
'             If FirstPointDone And j < 100 Then Done = True    ' можно вместо  Pwh_atma поставить Pwh_1 и сократить 1 расчет
'        End If
'        pwf_0 = pwf_1
'        Pwh_0 = Pwh_1
'
'        i = i + 1
'    Loop Until i > 100 Or Done
'
'    RaiseEvent ReportProgress("BuildNodalWHCurve_pi: Готово для Рлин = " & s(Pwh_targ_atma))
'
''                Me.qliq_sm3day = curve("c_p_linQl_curve").FindMaxOneSolution(Pwh_targ_atma)
''                p_wf = Reservoir.calc_pwf_atma(Me.qliq_sm3day)
''                Pwh_atma = well.calc_plin_pwf_atma(SetPT(p_wf, well.t_bh_C), CalcCasing:=False)
'
'    Exit Sub
'err1:
'    errMsg = "CProdSystem_old.BuildNodalWHCurve_pi: Ошибка при построении кривой узлового анализа на устье " & sDELIM & Err.Description
'    RaiseEvent ReportProgress("CProdSystem_old.BuildNodalWHCurve_pi: ошибка какая то: " & errMsg)
''    Err.Raise Err.Number, Err.Source, Err.Description
'    Err.Raise kErrBuildCurve, Err.Source, errMsg
'
' End Sub
'
' Public Sub BuildSyscurves(plin_atma As Double, t_bh_C As Double, calcFast As Boolean, CalcForecast As Boolean)
' '
' ' построение набора системы графиков по системе добычи
' '
'
'    Dim i As Integer
'    Dim Minp_wf As Double, Maxp_wf As Double
'    Dim Q As Double, p_wf As Double
'    Dim minQ As Double, maxQ As Double, maxQres As Double    ' вспомогательные переменные для построения системных графиков
'    Dim stepQ As Double, stepQ2 As Double
'    Dim num_points As Integer    ' количество точек для построения графика
'    Dim WellAnalyseESPdP As Double
'    Dim WellAnalyseESPdP_old As Double
'
'
'    RaiseEvent ReportProgress("CProdSystem_old: Готовим данные для системного анализа скважины")
'
'    ' готовим объекты для построения графиков дизайна скважины
'    Call ESPdesign.loadESPdesign
'    ESPdesign.stage_num = 100
'    Set WellDesign = p_well.clone()
'    Set WellDesign.ESP = ESPdesign
'    WellDesign.clearChoke ' отключим штуцер пока чтобы не мешал при дизайне
'
'    ' подготовим данные для анализа
'    Set WellAnalyse = p_well.clone()    ' клонируем скважину, чтобы расчеты по анализу чувствительности не влияли на основную скважину
'    Set WellAnalyseTopDown = p_well.clone() ' эта скважина нужна для расчет кривой лифта с учетом ЭЦН
'
'    WellAnalyseTopDown.ESP.c_calibr_head = p_well.ESP.c_calibr_head
'    WellAnalyse.ESP.c_calibr_head = p_well.ESP.c_calibr_head
'
'    Set WellSelfFlow = p_well.clone()   ' клонируем еще одну скважину чтобы построить кривую VLP без учета насоса
'    Set WellSelfFlow.ESP = Nothing
'    WellSelfFlow.clearChoke  ' отключим штуцер пока чтобы не мешал для расчета фонтана
'
'
'    ' для построения графиков подготовим данные необходимые и для дизайна тоже
'    num_points = 10
'    Minp_wf = 1 ' well.p_line_atma
'    Maxp_wf = P_Reservoir.Pres_atma * 0.99  ' для максимальной границы расчета берем 0.99 от пластового чтобы не натыкаться на нулевой дебит
'    minQ = P_Reservoir.calc_qliq_sm3day(Maxp_wf)  ' начнем строить графики с минимального дебита
'    If minQ < 1 Then minQ = 1
'
'    maxQres = P_Reservoir.calc_qliq_sm3day(Minp_wf)
'
'    maxQ = maxQres * 1.2   ' строить будем немного дальше конца пласта (некоторые графики)
'    If maxQ < 2 Then
'        addLogMsg "CProdSystem_old.BuildSyscurves: Не удается построить системные графики  - слишком низкая продуктивность = " & Format(Reservoir.pi_sm3dayatm)
'    End If
'
'    stepQ = (maxQ - minQ) / num_points
'    stepQ2 = stepQ
'    Q = minQ - stepQ
'
'    RaiseEvent ReportProgress("CProdSystem_old: Подготовка системного анализа завершена, созданы клоны для сравнения дизайна, фонтана и анализа")
'    RaiseEvent ReportProgress("CProdSystem_old: Старт системного анализа. Всего точек = " & num_points)
'
'    WellAnalyseESPdP_old = 100
'    i = 0
'    Do
'        i = i + 1
'        If Q < maxQres And Q + stepQ >= maxQres Then
'            Q = maxQres
'        Else
'            Q = Q + stepQ
'        End If
'setQ:
'        RaiseEvent ReportProgress("итерация " & i & "  Q =" & Format(Q, "##0.0") & "   шаг по Q =" & Format(stepQ, "##0.00"))
'        p_wf = P_Reservoir.calc_pwf_atma(Q)
'
'        WellAnalyse.qliq_sm3day = Q
'        WellSelfFlow.qliq_sm3day = Q
'        WellDesign.qliq_sm3day = Q
'        WellAnalyseTopDown.qliq_sm3day = Q
'
'        'Debug.Assert i < 17
'        If Not calcFast Then
'            Call WellAnalyseTopDown.calc_pwf_plin_atma(plin_atma, t_bh_C)
'            Call WellSelfFlow.calc_pwf_plin_atma(plin_atma, t_bh_C)   ' тут надо бы разобраться с линейным и буферным давлением
'        End If
'
'        If Q < maxQres Then
'            well.isCalcCasing = False
'            Call WellAnalyse.calc_plin_pwf_atma(p_wf)
'
'            WellAnalyseESPdP = WellAnalyse.p_dis_atma - WellAnalyse.p_int_atma  ' нашли перепад давления при текущем дебите и забойном по пласту
'            If (Abs(WellAnalyseESPdP) > 1) Then             ' здесь 1 это допустимая погрешность расчета
'                WellAnalyseESPdP_old = WellAnalyseESPdP
'            Else
'                If (Q < maxQres) Then
'                    If (Abs(WellAnalyseESPdP) > 0) Then
'                        WellAnalyseESPdP_old = WellAnalyseESPdP   ' финализируем процесс поиска тут
'                    ElseIf (Abs(WellAnalyseESPdP_old) > 1) And (stepQ > 0.5) Then   ' на предыдущем расчете перепад давления был, а теперь нет - надо найти точнее дебит при котором это произошло
'                        stepQ = stepQ / 2
'                        Q = Q - stepQ
'                        GoTo setQ:
'                    Else
'                        stepQ = stepQ2 / 2
'                        WellAnalyseESPdP_old = WellAnalyseESPdP
'                    End If
'                End If
'            End If
'         ''''   Call WellDesign.calc_well(plin_atma, 0, p_wf, t_bh_C, CalcChoke:=False)
'            p_ESPdesignHead_m = 100 * (1 - WellDesign.ESP.c_calibr_head)
'            ' набор кривых полученных при расчете дизайна установки под скважину
'            c_HeadRequiredQl_curve.AddPoint Q, p_ESPdesignHead_m                   ' напор необходимый для данной скважины для данного дебита
'            p_ESPdesignRate_m3day = WellDesign.ESP.q_mix_PumpIntake_m3day
'            c_PdischargeDesignQl_curve.AddPoint Q, WellDesign.p_dis_atma       ' давление на выкиде расчетное по дизайну для установки
'           If Not CalcForecast Then c_PS_curve.AddPoint Q, WellDesign.p_dis_atma - WellAnalyse.p_int_atma
'            'набор кривых полученных при расчете анализа установки - расчете снизу вверх по заданному забойному давлению
'          If Not calcFast Then
'
'            c_GasFarctionQl_curve.AddPoint Q, WellAnalyse.ESP.gas_fraction_PumpIntake_d ' доля газа при заданном забойном
'            c_PintakeQl_curve.AddPoint Q, WellAnalyse.p_int_atma                  ' давление на приеме
'            c_PdischargeESPQl_curve.AddPoint Q, WellAnalyse.p_dis_atma         ' давление на выкиде которое сможет развить текушая установка
'            c_HdynQl_curve.AddPoint Q, WellAnalyse.h_dyn_m                          ' динамический уровень
'            c_PanQl_curve.AddPoint Q, WellAnalyse.p_an_atma                          ' затрубное давление
'            c_PwhQl_curve.AddPoint Q, WellAnalyse.pbuf_atma                         ' буферное давление
'            c_p_linQl_curve.AddPoint Q, WellAnalyse.p_line_atma                       ' линейное давление
'
'            c_KsepQl_curve.AddPoint Q, WellAnalyse.ksep_total_d                          '
''            c_ksep_natQl_curve.AddPoint Q, WellAnalyse.ksep_nat_d
''            c_ksep_gassepQl_curve.AddPoint Q, WellAnalyse.ksep_gassep_d
'            ' дополнительные "странные" графики
'            c_q_mix_Ql_curve.AddPoint Q, WellAnalyse.ESP.q_mix_PumpIntake_m3day
'          End If
'        End If
'        c_IPR_curve.AddPoint Q, p_wf
'If Not calcFast Then
'
'        ' начинаем строит кривые для отчета
'        ' набор кривых для фонтанирующей скважины
'        c_VLPselfFlowing_curve.AddPoint Q, WellSelfFlow.pwf_atma
'        c_PdischargeSelfFlowQl_curve.AddPoint Q, WellSelfFlow.p_dis_atma
'
'        ' набор кривых для скважины с граничным условием на поверхности
'        If Not CalcForecast Then c_VLP_curve.AddPoint Q, WellAnalyseTopDown.pwf_atma
''        c_VLP_ESP_curve.AddPoint Q, WellAnalyseTopDown.p_dis_atma
'        c_PdischargeFromTopQl_curve.AddPoint Q, WellAnalyseTopDown.p_dis_atma
'        c_PintakeFromTopQl_curve.AddPoint Q, WellAnalyseTopDown.p_int_atma
'End If
'Loop Until Q >= maxQ
'
'    RaiseEvent ReportProgress("системный анализ завершен, графики построены!!! ")
'
'
'     RaiseEvent ReportProgress("начинаем расчет параметров дизайна на текущее давление")
'
'    p_wf = p_p_wfSol_atma
'
'    Q = P_Reservoir.calc_qliq_sm3day(p_wf)
'    WellDesign.qliq_sm3day = Q
'
'  ''''  Call WellDesign.calc_well(plin_atma, 0, p_wf, t_bh_C, CalcChoke:=False)
'
'    p_p_wfdesign_atma = p_wf
'    p_Qldesign_m3day = Q
'    p_ESPdesigndP_atma = WellDesign.p_dis_atma - WellDesign.p_int_atma
'    p_ESPdesignHead_m = 100 * (1 - WellDesign.ESP.c_calibr_head)
'    p_ESPdesignRate_m3day = WellDesign.ESP.q_mix_PumpIntake_m3day     ' надо будет поправить чтобы тут использовался средний дебит а не максимальный
' '   p_ESPdesignPower_W = WellDesign.ESP.PowerMotor_Wt
'    ' теперь тут надо вытащить забойное давление - определить продуктивность и построить кривые VLP и IPR
'    RaiseEvent ReportProgress("расчет параметров дизайна завершен")
'
'
' End Sub
'
' Private Sub Clearcurves()
'
'    c_HeadRequiredQl_curve.ClearPoints
'    c_GasFarctionQl_curve.ClearPoints
'    c_KsepQl_curve.ClearPoints
'    c_ksep_natQl_curve.ClearPoints
'    c_ksep_gassepQl_curve.ClearPoints
'    c_PintakeQl_curve.ClearPoints
'    c_PdischargeDesignQl_curve.ClearPoints
'    c_PwhQl_curve.ClearPoints
'    c_IPR_curve.ClearPoints
'    c_PS_curve.ClearPoints
'    c_VLPselfFlowing_curve.ClearPoints
'    c_VLP_ESP_curve.ClearPoints
'    c_q_mix_Ql_curve.ClearPoints
'    c_PdischargeSelfFlowQl_curve.ClearPoints
'    c_PdischargeFromTopQl_curve.ClearPoints
'
' End Sub
'
'
'' код, который возможно надо удалить
'
'
'' Public Sub InitQ(Optional arr_h_mes_m = 2000, Optional arr_h_vert_m = 2000, Optional arr_d_cas_m = 0.12, Optional arr_d_tub_m = 0.062, Optional d_choke_m As Double = -1, _
''                 Optional ByVal qliq_m3day As Double, Optional ByVal Pres_atma As Double = 250, Optional ByVal fw_perc As Double = 0, _
''                 Optional ByVal t_bh_C As Double = 90, Optional ByVal t_wh_C As Double = 20, _
''                 Optional ByVal gamma_o As Double = 0.86, Optional ByVal gamma_g As Double = 0.6, Optional ByVal gamma_w As Double = 1, _
''                 Optional ByVal rp_m3m3 As Double = 100, Optional ByVal rsb_m3m3 As Double = 100, Optional ByVal pb_atma As Double = 100, Optional ByVal Bo_m3m3 As Double = 1.2, _
''                 Optional ByVal q_gas_free_sm3day As Double = 0, Optional arr_roughness_m = 0.0001, _
''                 Optional ByVal correlation As H_CORRELATION = Ansari, Optional ByVal Pvt_cor As PVT_CORRELATION = 0, Optional ByVal CalcCorrection As Double = 1, Optional AlongFlow As Integer = 0)
''
''    p_Reservoir.InitProp Pres_atma, pb_atma, fw_perc
''
''    p_well.InitWell arr_h_mes_m, arr_h_vert_m, arr_d_cas_m, arr_d_tub_m, arr_roughness_m, correlation, _
''                    Pvt_cor, CalcCorrection
''    p_well.d_choke_m = d_choke_m
''
''
'' End Sub
'
'
'
'
' ' ----- gamma_o ----------------------------------------------------------------------------------------
'' Public Property get gamma_o() As Double
''    gamma_o = fluid.gamma_o
'' End Property
''
'' Public Property Let gamma_o(val As Double)
''    If (val > const_gamma_oil_min) And (val < const_gamma_oil_max) Then
''        fluid_.gamma_o = val
''        p_well.fluid.gamma_o = val
''        p_PScalculated = False
''    Else
''        addLogMsg "gamma_o: попытка некорректного ввода gamma_o = " & val
''        Err.Raise vbObjectError + 514, , "gamma_o: попытка некорректного ввода gamma_o = " & val
''    End If
'' End Property
'
''  ' ----- gamma_w ----------------------------------------------------------------------------------------
'' Public Property get gamma_w() As Double
''    gamma_w = fluid.gamma_w
'' End Property
'' Public Property Let gamma_w(val As Double)
''    If (val > const_gamma_water_min) And (val < const_gamma_water_max) Then
''        fluid_.gamma_w = val
''        p_well.fluid.gamma_w = val
''        p_PScalculated = False
''    Else
''        addLogMsg "gamma_o: попытка некорректного ввода gamma_w = " & val
''        Err.Raise vbObjectError + 514, , "gamma_w: попытка некорректного ввода gamma_w = " & val
''    End If
'' End Property
'
'
''  ' ----- gamma_g ----------------------------------------------------------------------------------------
'' Public Property get gamma_g() As Double
''    gamma_g = fluid.gamma_g
'' End Property
'' Public Property Let gamma_g(val As Double)
''    If (val > const_gamma_gas_min) And (val < const_gamma_gas_max) Then
''         fluid_.gamma_g = val
''         p_well.fluid.gamma_g = val
''         p_PScalculated = False
''    Else
''        addLogMsg "gamma_o: попытка некорректного ввода gamma_g = " & val
''        Err.Raise vbObjectError + 514, , "gamma_o: попытка некорректного ввода gamma_g = " & val
''    End If
'' End Property
'

