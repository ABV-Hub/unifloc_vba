''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2006-2009, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Data types
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'1-dimensional spline inteprolant
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Type Spline1DInterpolant
    Periodic As Boolean
    N As Long
    K As Long
    X() As Double
    C() As Double
End Type
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Spline fitting report:
'    TaskRCond       reciprocal of task's condition number
'    RMSError        RMS error
'    AvgError        average error
'    AvgRelError     average relative error (for non-zero Y[I])
'    MaxError        maximum error
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Type Spline1DFitReport
    TaskRCond As Double
    RMSError As Double
    AvgError As Double
    AvgRelError As Double
    MaxError As Double
End Type
'Global constants
Private Const Spline1DVNum As Long = 11#
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This subroutine builds linear spline interpolant
'
'INPUT PARAMETERS:
'    X   -   spline nodes, array[0..N-1]
'    Y   -   function values, array[0..N-1]
'    N   -   points count, N>=2
'
'OUTPUT PARAMETERS:
'    C   -   spline interpolant
'
'
'ORDER OF POINTS
'
'Subroutine automatically sorts points, so caller may pass unsorted array.
'
'  -- ALGLIB PROJECT --
'     Copyright 24.06.2007 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub Spline1DBuildLinear(ByRef X_() As Double, _
         ByRef y_() As Double, _
         ByVal N As Long, _
         ByRef C As Spline1DInterpolant)
    Dim X() As Double
    Dim Y() As Double
    Dim i As Long
    X = X_
    Y = y_
    
    '
    ' Sort points
    '
    Call HeapSortPoints(X, Y, N)
    
    '
    ' Build
    '
    C.Periodic = False
    C.N = N
    C.K = 3#
    ReDim C.X(0 To N - 1)
    ReDim C.C(0 To 4# * (N - 1#) - 1)
    For i = 0# To N - 1# Step 1
        C.X(i) = X(i)
    Next i
    For i = 0# To N - 2# Step 1
        C.C(4# * i + 0#) = Y(i)
        C.C(4# * i + 1#) = (Y(i + 1#) - Y(i)) / (X(i + 1#) - X(i))
        C.C(4# * i + 2#) = 0#
        C.C(4# * i + 3#) = 0#
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This subroutine builds cubic spline interpolant.
'
'INPUT PARAMETERS:
'    X           -   spline nodes, array[0..N-1].
'    Y           -   function values, array[0..N-1].
'    N           -   points count, N>=2
'    BoundLType  -   boundary condition type for the left boundary
'    BoundL      -   left boundary condition (first or second derivative,
'                    depending on the BoundLType)
'    BoundRType  -   boundary condition type for the right boundary
'    BoundR      -   right boundary condition (first or second derivative,
'                    depending on the BoundRType)
'
'OUTPUT PARAMETERS:
'    C           -   spline interpolant
'
'
'ORDER OF POINTS
'
'Subroutine automatically sorts points, so caller may pass unsorted array.
'
'SETTING BOUNDARY VALUES:
'
'The BoundLType/BoundRType parameters can have the following values:
'    * -1, which corresonds to the periodic (cyclic) boundary conditions.
'          In this case:
'          * both BoundLType and BoundRType must be equal to -1.
'          * BoundL/BoundR are ignored
'          * Y[last] is ignored (it is assumed to be equal to Y[first]).
'    *  0, which  corresponds  to  the  parabolically   terminated  spline
'          (BoundL and/or BoundR are ignored).
'    *  1, which corresponds to the first derivative boundary condition
'    *  2, which corresponds to the second derivative boundary condition
'
'PROBLEMS WITH PERIODIC BOUNDARY CONDITIONS:
'
'Problems with periodic boundary conditions have Y[first_point]=Y[last_point].
'However, this subroutine doesn't require you to specify equal  values  for
'the first and last points - it automatically forces them to be equal.
'
'  -- ALGLIB PROJECT --
'     Copyright 23.06.2007 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub Spline1DBuildCubic(ByRef X_() As Double, _
         ByRef y_() As Double, _
         ByVal N As Long, _
         ByVal BoundLType As Long, _
         ByVal BoundL As Double, _
         ByVal BoundRType As Long, _
         ByVal BoundR As Double, _
         ByRef C As Spline1DInterpolant)
    Dim X() As Double
    Dim Y() As Double
    Dim A1() As Double
    Dim A2() As Double
    Dim A3() As Double
    Dim B() As Double
    Dim D() As Double
    Dim DT() As Double
    Dim i As Long
    Dim V As Double
    Dim i_ As Long
    X = X_
    Y = y_
    
    '
    ' Special cases:
    ' * N=2, parabolic terminated boundary condition on both ends
    ' * N=2, periodic boundary condition
    '
    If N = 2# And BoundLType = 0# And BoundRType = 0# Then
        
        '
        ' Change task type
        '
        BoundLType = 2#
        BoundL = 0#
        BoundRType = 2#
        BoundR = 0#
    End If
    If N = 2# And BoundLType = -1# And BoundRType = -1# Then
        
        '
        ' Change task type
        '
        BoundLType = 1#
        BoundL = 0#
        BoundRType = 1#
        BoundR = 0#
        Y(1#) = Y(0#)
    End If
    
    '
    ' Periodic and non-periodic boundary conditions are
    ' two separate classes
    '
    If BoundRType = -1# And BoundLType = -1# Then
        
        '
        ' Periodic boundary conditions
        '
        ReDim A1(0 To N - 1# - 1)
        ReDim A2(0 To N - 1# - 1)
        ReDim A3(0 To N - 1# - 1)
        ReDim B(0 To N - 1# - 1)
        
        '
        ' Sort points.
        '
        Call HeapSortPoints(X, Y, N)
        Y(N - 1#) = Y(0#)
        
        '
        ' Boundary conditions at N-1 points
        ' (one point less because last point is the same as first point).
        '
        A1(0#) = X(1#) - X(0#)
        A2(0#) = 2# * (X(1#) - X(0#) + X(N - 1#) - X(N - 2#))
        A3(0#) = X(N - 1#) - X(N - 2#)
        B(0#) = 3# * (Y(N - 1#) - Y(N - 2#)) / (X(N - 1#) - X(N - 2#)) * (X(1#) - X(0#)) + 3# * (Y(1#) - Y(0#)) / (X(1#) - X(0#)) * (X(N - 1#) - X(N - 2#))
        For i = 1# To N - 2# Step 1
            
            '
            ' Altough last point is [N-2], we use X[N-1] and Y[N-1]
            ' (because of periodicity)
            '
            A1(i) = X(i + 1#) - X(i)
            A2(i) = 2# * (X(i + 1#) - X(i - 1#))
            A3(i) = X(i) - X(i - 1#)
            B(i) = 3# * (Y(i) - Y(i - 1#)) / (X(i) - X(i - 1#)) * (X(i + 1#) - X(i)) + 3# * (Y(i + 1#) - Y(i)) / (X(i + 1#) - X(i)) * (X(i) - X(i - 1#))
        Next i
        
        '
        ' Solve, add last point (with index N-1)
        '
        Call SolveCyclicTridiagonal(A1, A2, A3, B, N - 1#, DT)
        ReDim D(0 To N - 1)
        For i_ = 0# To N - 2# Step 1
            D(i_) = DT(i_)
        Next i_
        D(N - 1#) = D(0#)
        
        '
        ' Now problem is reduced to the cubic Hermite spline
        '
        Call Spline1DBuildHermite(X, Y, D, N, C)
        C.Periodic = True
    Else
        
        '
        ' Non-periodic boundary condition
        '
        ReDim A1(0 To N - 1)
        ReDim A2(0 To N - 1)
        ReDim A3(0 To N - 1)
        ReDim B(0 To N - 1)
        
        '
        ' Sort points.
        '
        Call HeapSortPoints(X, Y, N)
        
        '
        ' Left boundary conditions
        '
        If BoundLType = 0# Then
            A1(0#) = 0#
            A2(0#) = 1#
            A3(0#) = 1#
            B(0#) = 2# * (Y(1#) - Y(0#)) / (X(1#) - X(0#))
        End If
        If BoundLType = 1# Then
            A1(0#) = 0#
            A2(0#) = 1#
            A3(0#) = 0#
            B(0#) = BoundL
        End If
        If BoundLType = 2# Then
            A1(0#) = 0#
            A2(0#) = 2#
            A3(0#) = 1#
            B(0#) = 3# * (Y(1#) - Y(0#)) / (X(1#) - X(0#)) - 0.5 * BoundL * (X(1#) - X(0#))
        End If
        
        '
        ' Central conditions
        '
        For i = 1# To N - 2# Step 1
            A1(i) = X(i + 1#) - X(i)
            A2(i) = 2# * (X(i + 1#) - X(i - 1#))
            A3(i) = X(i) - X(i - 1#)
            B(i) = 3# * (Y(i) - Y(i - 1#)) / (X(i) - X(i - 1#)) * (X(i + 1#) - X(i)) + 3# * (Y(i + 1#) - Y(i)) / (X(i + 1#) - X(i)) * (X(i) - X(i - 1#))
        Next i
        
        '
        ' Right boundary conditions
        '
        If BoundRType = 0# Then
            A1(N - 1#) = 1#
            A2(N - 1#) = 1#
            A3(N - 1#) = 0#
            B(N - 1#) = 2# * (Y(N - 1#) - Y(N - 2#)) / (X(N - 1#) - X(N - 2#))
        End If
        If BoundRType = 1# Then
            A1(N - 1#) = 0#
            A2(N - 1#) = 1#
            A3(N - 1#) = 0#
            B(N - 1#) = BoundR
        End If
        If BoundRType = 2# Then
            A1(N - 1#) = 1#
            A2(N - 1#) = 2#
            A3(N - 1#) = 0#
            B(N - 1#) = 3# * (Y(N - 1#) - Y(N - 2#)) / (X(N - 1#) - X(N - 2#)) + 0.5 * BoundR * (X(N - 1#) - X(N - 2#))
        End If
        
        '
        ' Solve
        '
        Call SolveTridiagonal(A1, A2, A3, B, N, D)
        
        '
        ' Now problem is reduced to the cubic Hermite spline
        '
        Call Spline1DBuildHermite(X, Y, D, N, C)
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This subroutine builds Catmull-Rom spline interpolant.
'
'INPUT PARAMETERS:
'    X           -   spline nodes, array[0..N-1].
'    Y           -   function values, array[0..N-1].
'    N           -   points count, N>=2
'    BoundType   -   boundary condition type:
'                    * -1 for periodic boundary condition
'                    *  0 for parabolically terminated spline
'    Tension     -   tension parameter:
'                    * tension=0   corresponds to classic Catmull-Rom spline
'                    * 0<tension<1 corresponds to more general form - cardinal spline
'
'OUTPUT PARAMETERS:
'    C           -   spline interpolant
'
'
'ORDER OF POINTS
'
'Subroutine automatically sorts points, so caller may pass unsorted array.
'
'PROBLEMS WITH PERIODIC BOUNDARY CONDITIONS:
'
'Problems with periodic boundary conditions have Y[first_point]=Y[last_point].
'However, this subroutine doesn't require you to specify equal  values  for
'the first and last points - it automatically forces them to be equal.
'
'  -- ALGLIB PROJECT --
'     Copyright 23.06.2007 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub Spline1DBuildCatmullRom(ByRef X_() As Double, _
         ByRef y_() As Double, _
         ByVal N As Long, _
         ByVal BoundType As Long, _
         ByVal Tension As Double, _
         ByRef C As Spline1DInterpolant)
    Dim X() As Double
    Dim Y() As Double
    Dim A1() As Double
    Dim A2() As Double
    Dim A3() As Double
    Dim B() As Double
    Dim D() As Double
    Dim DT() As Double
    Dim i As Long
    Dim V As Double
    X = X_
    Y = y_
    
    '
    ' Special cases:
    ' * N=2, parabolic terminated boundary condition on both ends
    ' * N=2, periodic boundary condition
    '
    If N = 2# And BoundType = 0# Then
        
        '
        ' Just linear spline
        '
        Call Spline1DBuildLinear(X, Y, N, C)
        Exit Sub
    End If
    If N = 2# And BoundType = -1# Then
        
        '
        ' Same as cubic spline with periodic conditions
        '
        Call Spline1DBuildCubic(X, Y, N, -1#, 0#, -1#, 0#, C)
        Exit Sub
    End If
    
    '
    ' Periodic or non-periodic boundary conditions
    '
    If BoundType = -1# Then
        
        '
        ' Sort points.
        '
        Call HeapSortPoints(X, Y, N)
        Y(N - 1#) = Y(0#)
        
        '
        ' Periodic boundary conditions
        '
        ReDim D(0 To N - 1)
        D(0#) = (Y(1#) - Y(N - 2#)) / (2# * (X(1#) - X(0#) + X(N - 1#) - X(N - 2#)))
        For i = 1# To N - 2# Step 1
            D(i) = (1# - Tension) * (Y(i + 1#) - Y(i - 1#)) / (X(i + 1#) - X(i - 1#))
        Next i
        D(N - 1#) = D(0#)
        
        '
        ' Now problem is reduced to the cubic Hermite spline
        '
        Call Spline1DBuildHermite(X, Y, D, N, C)
        C.Periodic = True
    Else
        
        '
        ' Sort points.
        '
        Call HeapSortPoints(X, Y, N)
        
        '
        ' Non-periodic boundary conditions
        '
        ReDim D(0 To N - 1)
        For i = 1# To N - 2# Step 1
            D(i) = (1# - Tension) * (Y(i + 1#) - Y(i - 1#)) / (X(i + 1#) - X(i - 1#))
        Next i
        D(0#) = 2# * (Y(1#) - Y(0#)) / (X(1#) - X(0#)) - D(1#)
        D(N - 1#) = 2# * (Y(N - 1#) - Y(N - 2#)) / (X(N - 1#) - X(N - 2#)) - D(N - 2#)
        
        '
        ' Now problem is reduced to the cubic Hermite spline
        '
        Call Spline1DBuildHermite(X, Y, D, N, C)
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This subroutine builds Hermite spline interpolant.
'
'INPUT PARAMETERS:
'    X           -   spline nodes, array[0..N-1]
'    Y           -   function values, array[0..N-1]
'    D           -   derivatives, array[0..N-1]
'    N           -   points count, N>=2
'
'OUTPUT PARAMETERS:
'    C           -   spline interpolant.
'
'
'ORDER OF POINTS
'
'Subroutine automatically sorts points, so caller may pass unsorted array.
'
'  -- ALGLIB PROJECT --
'     Copyright 23.06.2007 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub Spline1DBuildHermite(ByRef X_() As Double, _
         ByRef y_() As Double, _
         ByRef D_() As Double, _
         ByVal N As Long, _
         ByRef C As Spline1DInterpolant)
    Dim X() As Double
    Dim Y() As Double
    Dim D() As Double
    Dim i As Long
    Dim Delta As Double
    Dim Delta2 As Double
    Dim Delta3 As Double
    X = X_
    Y = y_
    D = D_
    
    '
    ' Sort points
    '
    Call HeapSortDPoints(X, Y, D, N)
    
    '
    ' Build
    '
    ReDim C.X(0 To N - 1)
    ReDim C.C(0 To 4# * (N - 1#) - 1)
    C.Periodic = False
    C.K = 3#
    C.N = N
    For i = 0# To N - 1# Step 1
        C.X(i) = X(i)
    Next i
    For i = 0# To N - 2# Step 1
        Delta = X(i + 1#) - X(i)
        Delta2 = Square(Delta)
        Delta3 = Delta * Delta2
        C.C(4# * i + 0#) = Y(i)
        C.C(4# * i + 1#) = D(i)
        C.C(4# * i + 2#) = (3# * (Y(i + 1#) - Y(i)) - 2# * D(i) * Delta - D(i + 1#) * Delta) / Delta2
        C.C(4# * i + 3#) = (2# * (Y(i) - Y(i + 1#)) + D(i) * Delta + D(i + 1#) * Delta) / Delta3
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This subroutine builds Akima spline interpolant
'
'INPUT PARAMETERS:
'    X           -   spline nodes, array[0..N-1]
'    Y           -   function values, array[0..N-1]
'    N           -   points count, N>=5
'
'OUTPUT PARAMETERS:
'    C           -   spline interpolant
'
'
'ORDER OF POINTS
'
'Subroutine automatically sorts points, so caller may pass unsorted array.
'
'  -- ALGLIB PROJECT --
'     Copyright 24.06.2007 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub Spline1DBuildAkima(ByRef X_() As Double, _
         ByRef y_() As Double, _
         ByVal N As Long, _
         ByRef C As Spline1DInterpolant)
    Dim X() As Double
    Dim Y() As Double
    Dim i As Long
    Dim D() As Double
    Dim W() As Double
    Dim Diff() As Double
    X = X_
    Y = y_
    
    '
    ' Sort points
    '
    Call HeapSortPoints(X, Y, N)
    
    '
    ' Prepare W (weights), Diff (divided differences)
    '
    ReDim W(0 To N - 1# - 1)
    ReDim Diff(0 To N - 1# - 1)
    For i = 0# To N - 2# Step 1
        Diff(i) = (Y(i + 1#) - Y(i)) / (X(i + 1#) - X(i))
    Next i
    For i = 1# To N - 2# Step 1
        W(i) = Abs(Diff(i) - Diff(i - 1#))
    Next i
    
    '
    ' Prepare Hermite interpolation scheme
    '
    ReDim D(0 To N - 1)
    For i = 2# To N - 3# Step 1
        If Abs(W(i - 1#)) + Abs(W(i + 1#)) <> 0# Then
            D(i) = (W(i + 1#) * Diff(i - 1#) + W(i - 1#) * Diff(i)) / (W(i + 1#) + W(i - 1#))
        Else
            D(i) = ((X(i + 1#) - X(i)) * Diff(i - 1#) + (X(i) - X(i - 1#)) * Diff(i)) / (X(i + 1#) - X(i - 1#))
        End If
    Next i
    D(0#) = DiffThreePoint(X(0#), X(0#), Y(0#), X(1#), Y(1#), X(2#), Y(2#))
    D(1#) = DiffThreePoint(X(1#), X(0#), Y(0#), X(1#), Y(1#), X(2#), Y(2#))
    D(N - 2#) = DiffThreePoint(X(N - 2#), X(N - 3#), Y(N - 3#), X(N - 2#), Y(N - 2#), X(N - 1#), Y(N - 1#))
    D(N - 1#) = DiffThreePoint(X(N - 1#), X(N - 3#), Y(N - 3#), X(N - 2#), Y(N - 2#), X(N - 1#), Y(N - 1#))
    
    '
    ' Build Akima spline using Hermite interpolation scheme
    '
    Call Spline1DBuildHermite(X, Y, D, N, C)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Weighted fitting by cubic  spline,  with constraints on function values or
'derivatives.
'
'Equidistant grid with M-2 nodes on [min(x,xc),max(x,xc)] is  used to build
'basis functions. Basis functions are cubic splines with continuous  second
'derivatives  and  non-fixed first  derivatives  at  interval  ends.  Small
'regularizing term is used  when  solving  constrained  tasks  (to  improve
'stability).
'
'Task is linear, so linear least squares solver is used. Complexity of this
'computational scheme is O(N*M^2), mostly dominated by least squares solver
'
'SEE ALSO
'    Spline1DFitHermiteWC()  -   fitting by Hermite splines (more flexible,
'                                less smooth)
'    Spline1DFitCubic()      -   "lightweight" fitting  by  cubic  splines,
'                                without invididual weights and constraints
'
'INPUT PARAMETERS:
'    X   -   points, array[0..N-1].
'    Y   -   function values, array[0..N-1].
'    W   -   weights, array[0..N-1]
'            Each summand in square  sum  of  approximation deviations from
'            given  values  is  multiplied  by  the square of corresponding
'            weight. Fill it by 1's if you don't  want  to  solve  weighted
'            task.
'    N   -   number of points, N>0.
'    XC  -   points where spline values/derivatives are constrained,
'            array[0..K-1].
'    YC  -   values of constraints, array[0..K-1]
'    DC  -   array[0..K-1], types of constraints:
'            * DC[i]=0   means that S(XC[i])=YC[i]
'            * DC[i]=1   means that S'(XC[i])=YC[i]
'            SEE BELOW FOR IMPORTANT INFORMATION ON CONSTRAINTS
'    K   -   number of constraints, 0<=K<M.
'            K=0 means no constraints (XC/YC/DC are not used in such cases)
'    M   -   number of basis functions ( = number_of_nodes+2), M>=4.
'
'OUTPUT PARAMETERS:
'    Info-   same format as in LSFitLinearWC() subroutine.
'            * Info>0    task is solved
'            * Info<=0   an error occured:
'                        -4 means inconvergence of internal SVD
'                        -3 means inconsistent constraints
'                        -1 means another errors in parameters passed
'                           (N<=0, for example)
'    S   -   spline interpolant.
'    Rep -   report, same format as in LSFitLinearWC() subroutine.
'            Following fields are set:
'            * RMSError      rms error on the (X,Y).
'            * AvgError      average error on the (X,Y).
'            * AvgRelError   average relative error on the non-zero Y
'            * MaxError      maximum error
'                            NON-WEIGHTED ERRORS ARE CALCULATED
'
'IMPORTANT:
'    this subroitine doesn't calculate task's condition number for K<>0.
'
'
'ORDER OF POINTS
'
'Subroutine automatically sorts points, so caller may pass unsorted array.
'
'SETTING CONSTRAINTS - DANGERS AND OPPORTUNITIES:
'
'Setting constraints can lead  to undesired  results,  like ill-conditioned
'behavior, or inconsistency being detected. From the other side,  it allows
'us to improve quality of the fit. Here we summarize  our  experience  with
'constrained regression splines:
'* excessive constraints can be inconsistent. Splines are  piecewise  cubic
'  functions, and it is easy to create an example, where  large  number  of
'  constraints  concentrated  in  small  area will result in inconsistency.
'  Just because spline is not flexible enough to satisfy all of  them.  And
'  same constraints spread across the  [min(x),max(x)]  will  be  perfectly
'  consistent.
'* the more evenly constraints are spread across [min(x),max(x)],  the more
'  chances that they will be consistent
'* the  greater  is  M (given  fixed  constraints),  the  more chances that
'  constraints will be consistent
'* in the general case, consistency of constraints IS NOT GUARANTEED.
'* in the several special cases, however, we CAN guarantee consistency.
'* one of this cases is constraints  on  the  function  values  AND/OR  its
'  derivatives at the interval boundaries.
'* another  special  case  is ONE constraint on the function value (OR, but
'  not AND, derivative) anywhere in the interval
'
'Our final recommendation is to use constraints  WHEN  AND  ONLY  WHEN  you
'can't solve your task without them. Anything beyond  special  cases  given
'above is not guaranteed and may result in inconsistency.
'
'
'  -- ALGLIB PROJECT --
'     Copyright 18.08.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub Spline1DFitCubicWC(ByRef X() As Double, _
         ByRef Y() As Double, _
         ByRef W() As Double, _
         ByVal N As Long, _
         ByRef XC() As Double, _
         ByRef YC() As Double, _
         ByRef DC() As Long, _
         ByVal K As Long, _
         ByVal M As Long, _
         ByRef Info As Long, _
         ByRef S As Spline1DInterpolant, _
         ByRef Rep As Spline1DFitReport)
    Call Spline1DFitInternal(0#, X, Y, W, N, XC, YC, DC, K, M, Info, S, Rep)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Weighted  fitting  by Hermite spline,  with constraints on function values
'or first derivatives.
'
'Equidistant grid with M nodes on [min(x,xc),max(x,xc)] is  used  to  build
'basis functions. Basis functions are Hermite splines.  Small  regularizing
'term is used when solving constrained tasks (to improve stability).
'
'Task is linear, so linear least squares solver is used. Complexity of this
'computational scheme is O(N*M^2), mostly dominated by least squares solver
'
'SEE ALSO
'    Spline1DFitCubicWC()    -   fitting by Cubic splines (less flexible,
'                                more smooth)
'    Spline1DFitHermite()    -   "lightweight" Hermite fitting, without
'                                invididual weights and constraints
'
'INPUT PARAMETERS:
'    X   -   points, array[0..N-1].
'    Y   -   function values, array[0..N-1].
'    W   -   weights, array[0..N-1]
'            Each summand in square  sum  of  approximation deviations from
'            given  values  is  multiplied  by  the square of corresponding
'            weight. Fill it by 1's if you don't  want  to  solve  weighted
'            task.
'    N   -   number of points, N>0.
'    XC  -   points where spline values/derivatives are constrained,
'            array[0..K-1].
'    YC  -   values of constraints, array[0..K-1]
'    DC  -   array[0..K-1], types of constraints:
'            * DC[i]=0   means that S(XC[i])=YC[i]
'            * DC[i]=1   means that S'(XC[i])=YC[i]
'            SEE BELOW FOR IMPORTANT INFORMATION ON CONSTRAINTS
'    K   -   number of constraints, 0<=K<M.
'            K=0 means no constraints (XC/YC/DC are not used in such cases)
'    M   -   number of basis functions (= 2 * number of nodes),
'            M>=4,
'            M IS EVEN!
'
'OUTPUT PARAMETERS:
'    Info-   same format as in LSFitLinearW() subroutine:
'            * Info>0    task is solved
'            * Info<=0   an error occured:
'                        -4 means inconvergence of internal SVD
'                        -3 means inconsistent constraints
'                        -2 means odd M was passed (which is not supported)
'                        -1 means another errors in parameters passed
'                           (N<=0, for example)
'    S   -   spline interpolant.
'    Rep -   report, same format as in LSFitLinearW() subroutine.
'            Following fields are set:
'            * RMSError      rms error on the (X,Y).
'            * AvgError      average error on the (X,Y).
'            * AvgRelError   average relative error on the non-zero Y
'            * MaxError      maximum error
'                            NON-WEIGHTED ERRORS ARE CALCULATED
'
'IMPORTANT:
'    this subroitine doesn't calculate task's condition number for K<>0.
'
'IMPORTANT:
'    this subroitine supports only even M's
'
'
'ORDER OF POINTS
'
'Subroutine automatically sorts points, so caller may pass unsorted array.
'
'SETTING CONSTRAINTS - DANGERS AND OPPORTUNITIES:
'
'Setting constraints can lead  to undesired  results,  like ill-conditioned
'behavior, or inconsistency being detected. From the other side,  it allows
'us to improve quality of the fit. Here we summarize  our  experience  with
'constrained regression splines:
'* excessive constraints can be inconsistent. Splines are  piecewise  cubic
'  functions, and it is easy to create an example, where  large  number  of
'  constraints  concentrated  in  small  area will result in inconsistency.
'  Just because spline is not flexible enough to satisfy all of  them.  And
'  same constraints spread across the  [min(x),max(x)]  will  be  perfectly
'  consistent.
'* the more evenly constraints are spread across [min(x),max(x)],  the more
'  chances that they will be consistent
'* the  greater  is  M (given  fixed  constraints),  the  more chances that
'  constraints will be consistent
'* in the general case, consistency of constraints is NOT GUARANTEED.
'* in the several special cases, however, we can guarantee consistency.
'* one of this cases is  M>=4  and   constraints  on   the  function  value
'  (AND/OR its derivative) at the interval boundaries.
'* another special case is M>=4  and  ONE  constraint on the function value
'  (OR, BUT NOT AND, derivative) anywhere in [min(x),max(x)]
'
'Our final recommendation is to use constraints  WHEN  AND  ONLY  when  you
'can't solve your task without them. Anything beyond  special  cases  given
'above is not guaranteed and may result in inconsistency.
'
'  -- ALGLIB PROJECT --
'     Copyright 18.08.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub Spline1DFitHermiteWC(ByRef X() As Double, _
         ByRef Y() As Double, _
         ByRef W() As Double, _
         ByVal N As Long, _
         ByRef XC() As Double, _
         ByRef YC() As Double, _
         ByRef DC() As Long, _
         ByVal K As Long, _
         ByVal M As Long, _
         ByRef Info As Long, _
         ByRef S As Spline1DInterpolant, _
         ByRef Rep As Spline1DFitReport)
    Call Spline1DFitInternal(1#, X, Y, W, N, XC, YC, DC, K, M, Info, S, Rep)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Least squares fitting by cubic spline.
'
'This subroutine is "lightweight" alternative for more complex and feature-
'rich Spline1DFitCubicWC().  See  Spline1DFitCubicWC() for more information
'about subroutine parameters (we don't duplicate it here because of length)
'
'  -- ALGLIB PROJECT --
'     Copyright 18.08.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub Spline1DFitCubic(ByRef X() As Double, _
         ByRef Y() As Double, _
         ByVal N As Long, _
         ByVal M As Long, _
         ByRef Info As Long, _
         ByRef S As Spline1DInterpolant, _
         ByRef Rep As Spline1DFitReport)
    Dim i As Long
    Dim W() As Double
    Dim XC() As Double
    Dim YC() As Double
    Dim DC() As Long
    If N > 0# Then
        ReDim W(0 To N - 1)
        For i = 0# To N - 1# Step 1
            W(i) = 1#
        Next i
    End If
    Call Spline1DFitCubicWC(X, Y, W, N, XC, YC, DC, 0#, M, Info, S, Rep)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Least squares fitting by Hermite spline.
'
'This subroutine is "lightweight" alternative for more complex and feature-
'rich Spline1DFitHermiteWC().  See Spline1DFitHermiteWC()  description  for
'more information about subroutine parameters (we don't duplicate  it  here
'because of length).
'
'  -- ALGLIB PROJECT --
'     Copyright 18.08.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub Spline1DFitHermite(ByRef X() As Double, _
         ByRef Y() As Double, _
         ByVal N As Long, _
         ByVal M As Long, _
         ByRef Info As Long, _
         ByRef S As Spline1DInterpolant, _
         ByRef Rep As Spline1DFitReport)
    Dim i As Long
    Dim W() As Double
    Dim XC() As Double
    Dim YC() As Double
    Dim DC() As Long
    If N > 0# Then
        ReDim W(0 To N - 1)
        For i = 0# To N - 1# Step 1
            W(i) = 1#
        Next i
    End If
    Call Spline1DFitHermiteWC(X, Y, W, N, XC, YC, DC, 0#, M, Info, S, Rep)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This subroutine calculates the value of the spline at the given point X.
'
'INPUT PARAMETERS:
'    C   -   spline interpolant
'    X   -   point
'
'Result:
'    S(x)
'
'  -- ALGLIB PROJECT --
'     Copyright 23.06.2007 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function Spline1DCalc(ByRef C As Spline1DInterpolant, _
         ByVal X As Double) As Double
    Dim Result As Double
    Dim L As Long
    Dim R As Long
    Dim M As Long
    Dim T As Double
    
    '
    ' correct if periodic
    '
    If C.Periodic Then
        Call APPeriodicMap(X, C.X(0#), C.X(C.N - 1#), T)
    End If
    
    '
    ' Binary search in the [ x[0], ..., x[n-2] ] (x[n-1] is not included)
    '
    L = 0#
    R = C.N - 2# + 1#
    Do While L <> R - 1#
        M = (L + R) \ 2#
        If C.X(M) >= X Then
            R = M
        Else
            L = M
        End If
    Loop
    
    '
    ' Interpolation
    '
    X = X - C.X(L)
    M = 4# * L
    Result = C.C(M) + X * (C.C(M + 1#) + X * (C.C(M + 2#) + X * C.C(M + 3#)))
    Spline1DCalc = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This subroutine differentiates the spline.
'
'INPUT PARAMETERS:
'    C   -   spline interpolant.
'    X   -   point
'
'Result:
'    S   -   S(x)
'    DS  -   S'(x)
'    D2S -   S''(x)
'
'  -- ALGLIB PROJECT --
'     Copyright 24.06.2007 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub Spline1DDiff(ByRef C As Spline1DInterpolant, _
         ByVal X As Double, _
         ByRef S As Double, _
         ByRef DS As Double, _
         ByRef D2S As Double)
    Dim L As Long
    Dim R As Long
    Dim M As Long
    Dim T As Double
    
    '
    ' correct if periodic
    '
    If C.Periodic Then
        Call APPeriodicMap(X, C.X(0#), C.X(C.N - 1#), T)
    End If
    
    '
    ' Binary search
    '
    L = 0#
    R = C.N - 2# + 1#
    Do While L <> R - 1#
        M = (L + R) \ 2#
        If C.X(M) >= X Then
            R = M
        Else
            L = M
        End If
    Loop
    
    '
    ' Differentiation
    '
    X = X - C.X(L)
    M = 4# * L
    S = C.C(M) + X * (C.C(M + 1#) + X * (C.C(M + 2#) + X * C.C(M + 3#)))
    DS = C.C(M + 1#) + 2# * X * C.C(M + 2#) + 3# * Square(X) * C.C(M + 3#)
    D2S = 2# * C.C(M + 2#) + 6# * X * C.C(M + 3#)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This subroutine makes the copy of the spline.
'
'INPUT PARAMETERS:
'    C   -   spline interpolant.
'
'Result:
'    CC  -   spline copy
'
'  -- ALGLIB PROJECT --
'     Copyright 29.06.2007 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub Spline1DCopy(ByRef C As Spline1DInterpolant, _
         ByRef CC As Spline1DInterpolant)
    Dim i_ As Long
    CC.Periodic = C.Periodic
    CC.N = C.N
    CC.K = C.K
    ReDim CC.X(0 To CC.N - 1)
    For i_ = 0# To CC.N - 1# Step 1
        CC.X(i_) = C.X(i_)
    Next i_
    ReDim CC.C(0 To (CC.K + 1#) * (CC.N - 1#) - 1)
    For i_ = 0# To (CC.K + 1#) * (CC.N - 1#) - 1# Step 1
        CC.C(i_) = C.C(i_)
    Next i_
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This subroutine unpacks the spline into the coefficients table.
'
'INPUT PARAMETERS:
'    C   -   spline interpolant.
'    X   -   point
'
'Result:
'    Tbl -   coefficients table, unpacked format, array[0..N-2, 0..5].
'            For I = 0...N-2:
'                Tbl[I,0] = X[i]
'                Tbl[I,1] = X[i+1]
'                Tbl[I,2] = C0
'                Tbl[I,3] = C1
'                Tbl[I,4] = C2
'                Tbl[I,5] = C3
'            On [x[i], x[i+1]] spline is equals to:
'                S(x) = C0 + C1*t + C2*t^2 + C3*t^3
'                t = x-x[i]
'
'  -- ALGLIB PROJECT --
'     Copyright 29.06.2007 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub Spline1DUnpack(ByRef C As Spline1DInterpolant, _
         ByRef N As Long, _
         ByRef Tbl() As Double)
    Dim i As Long
    Dim J As Long
    ReDim Tbl(0# To C.N - 2#, 0# To 2# + C.K)
    N = C.N
    
    '
    ' Fill
    '
    For i = 0# To N - 2# Step 1
        Tbl(i, 0#) = C.X(i)
        Tbl(i, 1#) = C.X(i + 1#)
        For J = 0# To C.K Step 1
            Tbl(i, 2# + J) = C.C((C.K + 1#) * i + J)
        Next J
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This subroutine performs linear transformation of the spline argument.
'
'INPUT PARAMETERS:
'    C   -   spline interpolant.
'    A, B-   transformation coefficients: x = A*t + B
'Result:
'    C   -   transformed spline
'
'  -- ALGLIB PROJECT --
'     Copyright 30.06.2007 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub Spline1DLinTransX(ByRef C As Spline1DInterpolant, _
         ByVal A As Double, _
         ByVal B As Double)
    Dim i As Long
    Dim J As Long
    Dim N As Long
    Dim V As Double
    Dim DV As Double
    Dim D2V As Double
    Dim X() As Double
    Dim Y() As Double
    Dim D() As Double
    N = C.N
    
    '
    ' Special case: A=0
    '
    If A = 0# Then
        V = Spline1DCalc(C, B)
        For i = 0# To N - 2# Step 1
            C.C((C.K + 1#) * i) = V
            For J = 1# To C.K Step 1
                C.C((C.K + 1#) * i + J) = 0#
            Next J
        Next i
        Exit Sub
    End If
    
    '
    ' General case: A<>0.
    ' Unpack, X, Y, dY/dX.
    ' Scale and pack again.
    '
    ReDim X(0# To N - 1#)
    ReDim Y(0# To N - 1#)
    ReDim D(0# To N - 1#)
    For i = 0# To N - 1# Step 1
        X(i) = C.X(i)
        Call Spline1DDiff(C, X(i), V, DV, D2V)
        X(i) = (X(i) - B) / A
        Y(i) = V
        D(i) = A * DV
    Next i
    Call Spline1DBuildHermite(X, Y, D, N, C)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This subroutine performs linear transformation of the spline.
'
'INPUT PARAMETERS:
'    C   -   spline interpolant.
'    A, B-   transformation coefficients: S2(x) = A*S(x) + B
'Result:
'    C   -   transformed spline
'
'  -- ALGLIB PROJECT --
'     Copyright 30.06.2007 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub Spline1DLinTransY(ByRef C As Spline1DInterpolant, _
         ByVal A As Double, _
         ByVal B As Double)
    Dim i As Long
    Dim J As Long
    Dim N As Long
    N = C.N
    For i = 0# To N - 2# Step 1
        C.C((C.K + 1#) * i) = A * C.C((C.K + 1#) * i) + B
        For J = 1# To C.K Step 1
            C.C((C.K + 1#) * i + J) = A * C.C((C.K + 1#) * i + J)
        Next J
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This subroutine integrates the spline.
'
'INPUT PARAMETERS:
'    C   -   spline interpolant.
'    X   -   right bound of the integration interval [a, x],
'            here 'a' denotes min(x[])
'Result:
'    integral(S(t)dt,a,x)
'
'  -- ALGLIB PROJECT --
'     Copyright 23.06.2007 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function Spline1DIntegrate(ByRef C As Spline1DInterpolant, _
         ByVal X As Double) As Double
    Dim Result As Double
    Dim N As Long
    Dim i As Long
    Dim J As Long
    Dim L As Long
    Dim R As Long
    Dim M As Long
    Dim W As Double
    Dim V As Double
    Dim T As Double
    Dim IntAB As Double
    Dim AdditionalTerm As Double
    N = C.N
    
    '
    ' Periodic splines require special treatment. We make
    ' following transformation:
    '
    '     integral(S(t)dt,A,X) = integral(S(t)dt,A,Z)+AdditionalTerm
    '
    ' here X may lie outside of [A,B], Z lies strictly in [A,B],
    ' AdditionalTerm is equals to integral(S(t)dt,A,B) times some
    ' integer number (may be zero).
    '
    If C.Periodic And (X < C.X(0#) Or X > C.X(C.N - 1#)) Then
        
        '
        ' compute integral(S(x)dx,A,B)
        '
        IntAB = 0#
        For i = 0# To C.N - 2# Step 1
            W = C.X(i + 1#) - C.X(i)
            M = (C.K + 1#) * i
            IntAB = IntAB + C.C(M) * W
            V = W
            For J = 1# To C.K Step 1
                V = V * W
                IntAB = IntAB + C.C(M + J) * V / (J + 1#)
            Next J
        Next i
        
        '
        ' map X into [A,B]
        '
        Call APPeriodicMap(X, C.X(0#), C.X(C.N - 1#), T)
        AdditionalTerm = T * IntAB
    Else
        AdditionalTerm = 0#
    End If
    
    '
    ' Binary search in the [ x[0], ..., x[n-2] ] (x[n-1] is not included)
    '
    L = 0#
    R = N - 2# + 1#
    Do While L <> R - 1#
        M = (L + R) \ 2#
        If C.X(M) >= X Then
            R = M
        Else
            L = M
        End If
    Loop
    
    '
    ' Integration
    '
    Result = 0#
    For i = 0# To L - 1# Step 1
        W = C.X(i + 1#) - C.X(i)
        M = (C.K + 1#) * i
        Result = Result + C.C(M) * W
        V = W
        For J = 1# To C.K Step 1
            V = V * W
            Result = Result + C.C(M + J) * V / (J + 1#)
        Next J
    Next i
    W = X - C.X(L)
    M = (C.K + 1#) * L
    V = W
    Result = Result + C.C(M) * W
    For J = 1# To C.K Step 1
        V = V * W
        Result = Result + C.C(M + J) * V / (J + 1#)
    Next J
    Result = Result + AdditionalTerm
    Spline1DIntegrate = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal spline fitting subroutine
'
'  -- ALGLIB PROJECT --
'     Copyright 08.09.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub Spline1DFitInternal(ByVal ST As Long, _
         ByRef X_() As Double, _
         ByRef y_() As Double, _
         ByRef W() As Double, _
         ByVal N As Long, _
         ByRef XC_() As Double, _
         ByRef YC_() As Double, _
         ByRef DC() As Long, _
         ByVal K As Long, _
         ByVal M As Long, _
         ByRef Info As Long, _
         ByRef S As Spline1DInterpolant, _
         ByRef Rep As Spline1DFitReport)
    Dim X() As Double
    Dim Y() As Double
    Dim XC() As Double
    Dim YC() As Double
    Dim FMatrix() As Double
    Dim CMatrix() As Double
    Dim Y2() As Double
    Dim W2() As Double
    Dim SX() As Double
    Dim SY() As Double
    Dim SD() As Double
    Dim Tmp() As Double
    Dim XOriginal() As Double
    Dim YOriginal() As Double
    Dim LRep As LSFitReport
    Dim V0 As Double
    Dim V1 As Double
    Dim V2 As Double
    Dim MX As Double
    Dim S2 As Spline1DInterpolant
    Dim i As Long
    Dim J As Long
    Dim RelCnt As Long
    Dim XA As Double
    Dim XB As Double
    Dim SA As Double
    Dim SB As Double
    Dim BL As Double
    Dim BR As Double
    Dim Decay As Double
    Dim i_ As Long
    X = X_
    Y = y_
    XC = XC_
    YC = YC_
    If ST = 0# And M < 4# Then
        Info = -1#
        Exit Sub
    End If
    If ST = 1# And M < 4# Then
        Info = -1#
        Exit Sub
    End If
    If N < 1# Or K < 0# Or K >= M Then
        Info = -1#
        Exit Sub
    End If
    For i = 0# To K - 1# Step 1
        Info = 0#
        If DC(i) < 0# Then
            Info = -1#
        End If
        If DC(i) > 1# Then
            Info = -1#
        End If
        If Info < 0# Then
            Exit Sub
        End If
    Next i
    If ST = 1# And M Mod 2# <> 0# Then
        
        '
        ' Hermite fitter must have even number of basis functions
        '
        Info = -2#
        Exit Sub
    End If
    
    '
    ' weight decay for correct handling of task which becomes
    ' degenerate after constraints are applied
    '
    Decay = 10000# * MachineEpsilon
    
    '
    ' Scale X, Y, XC, YC
    '
    Call LSFitScaleXY(X, Y, N, XC, YC, DC, K, XA, XB, SA, SB, XOriginal, YOriginal)
    
    '
    ' allocate space, initialize:
    ' * SX     -   grid for basis functions
    ' * SY     -   values of basis functions at grid points
    ' * FMatrix-   values of basis functions at X[]
    ' * CMatrix-   values (derivatives) of basis functions at XC[]
    '
    ReDim Y2(0 To N + M - 1)
    ReDim W2(0 To N + M - 1)
    ReDim FMatrix(0 To N + M - 1, 0 To M - 1)
    If K > 0# Then
        ReDim CMatrix(0 To K - 1, 0 To M + 1# - 1)
    End If
    If ST = 0# Then
        
        '
        ' allocate space for cubic spline
        '
        ReDim SX(0 To M - 2# - 1)
        ReDim SY(0 To M - 2# - 1)
        For J = 0# To M - 2# - 1# Step 1
            SX(J) = 2# * J / (M - 2# - 1#) - 1#
        Next J
    End If
    If ST = 1# Then
        
        '
        ' allocate space for Hermite spline
        '
        ReDim SX(0 To M \ 2# - 1)
        ReDim SY(0 To M \ 2# - 1)
        ReDim SD(0 To M \ 2# - 1)
        For J = 0# To M \ 2# - 1# Step 1
            SX(J) = 2# * J / (M \ 2# - 1#) - 1#
        Next J
    End If
    
    '
    ' Prepare design and constraints matrices:
    ' * fill constraints matrix
    ' * fill first N rows of design matrix with values
    ' * fill next M rows of design matrix with regularizing term
    ' * append M zeros to Y
    ' * append M elements, mean(abs(W)) each, to W
    '
    For J = 0# To M - 1# Step 1
        
        '
        ' prepare Jth basis function
        '
        If ST = 0# Then
            
            '
            ' cubic spline basis
            '
            For i = 0# To M - 2# - 1# Step 1
                SY(i) = 0#
            Next i
            BL = 0#
            BR = 0#
            If J < M - 2# Then
                SY(J) = 1#
            End If
            If J = M - 2# Then
                BL = 1#
            End If
            If J = M - 1# Then
                BR = 1#
            End If
            Call Spline1DBuildCubic(SX, SY, M - 2#, 1#, BL, 1#, BR, S2)
        End If
        If ST = 1# Then
            
            '
            ' Hermite basis
            '
            For i = 0# To M \ 2# - 1# Step 1
                SY(i) = 0#
                SD(i) = 0#
            Next i
            If J Mod 2# = 0# Then
                SY(J \ 2#) = 1#
            Else
                SD(J \ 2#) = 1#
            End If
            Call Spline1DBuildHermite(SX, SY, SD, M \ 2#, S2)
        End If
        
        '
        ' values at X[], XC[]
        '
        For i = 0# To N - 1# Step 1
            FMatrix(i, J) = Spline1DCalc(S2, X(i))
        Next i
        For i = 0# To K - 1# Step 1
            Call Spline1DDiff(S2, XC(i), V0, V1, V2)
            If DC(i) = 0# Then
                CMatrix(i, J) = V0
            End If
            If DC(i) = 1# Then
                CMatrix(i, J) = V1
            End If
            If DC(i) = 2# Then
                CMatrix(i, J) = V2
            End If
        Next i
    Next J
    For i = 0# To K - 1# Step 1
        CMatrix(i, M) = YC(i)
    Next i
    For i = 0# To M - 1# Step 1
        For J = 0# To M - 1# Step 1
            If i = J Then
                FMatrix(N + i, J) = Decay
            Else
                FMatrix(N + i, J) = 0#
            End If
        Next J
    Next i
    ReDim Y2(0 To N + M - 1)
    ReDim W2(0 To N + M - 1)
    For i_ = 0# To N - 1# Step 1
        Y2(i_) = Y(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        W2(i_) = W(i_)
    Next i_
    MX = 0#
    For i = 0# To N - 1# Step 1
        MX = MX + Abs(W(i))
    Next i
    MX = MX / N
    For i = 0# To M - 1# Step 1
        Y2(N + i) = 0#
        W2(N + i) = MX
    Next i
    
    '
    ' Solve constrained task
    '
    If K > 0# Then
        
        '
        ' solve using regularization
        '
        Call LSFitLinearWC(Y2, W2, FMatrix, CMatrix, N + M, M, K, Info, Tmp, LRep)
    Else
        
        '
        ' no constraints, no regularization needed
        '
        Call LSFitLinearWC(Y, W, FMatrix, CMatrix, N, M, K, Info, Tmp, LRep)
    End If
    If Info < 0# Then
        Exit Sub
    End If
    
    '
    ' Generate spline and scale it
    '
    If ST = 0# Then
        
        '
        ' cubic spline basis
        '
        For i_ = 0# To M - 2# - 1# Step 1
            SY(i_) = Tmp(i_)
        Next i_
        Call Spline1DBuildCubic(SX, SY, M - 2#, 1#, Tmp(M - 2#), 1#, Tmp(M - 1#), S)
    End If
    If ST = 1# Then
        
        '
        ' Hermite basis
        '
        For i = 0# To M \ 2# - 1# Step 1
            SY(i) = Tmp(2# * i)
            SD(i) = Tmp(2# * i + 1#)
        Next i
        Call Spline1DBuildHermite(SX, SY, SD, M \ 2#, S)
    End If
    Call Spline1DLinTransX(S, 2# / (XB - XA), -((XA + XB) / (XB - XA)))
    Call Spline1DLinTransY(S, SB - SA, SA)
    
    '
    ' Scale absolute errors obtained from LSFitLinearW.
    ' Relative error should be calculated separately
    ' (because of shifting/scaling of the task)
    '
    Rep.TaskRCond = LRep.TaskRCond
    Rep.RMSError = LRep.RMSError * (SB - SA)
    Rep.AvgError = LRep.AvgError * (SB - SA)
    Rep.MaxError = LRep.MaxError * (SB - SA)
    Rep.AvgRelError = 0#
    RelCnt = 0#
    For i = 0# To N - 1# Step 1
        If YOriginal(i) <> 0# Then
            Rep.AvgRelError = Rep.AvgRelError + Abs(Spline1DCalc(S, XOriginal(i)) - YOriginal(i)) / Abs(YOriginal(i))
            RelCnt = RelCnt + 1#
        End If
    Next i
    If RelCnt <> 0# Then
        Rep.AvgRelError = Rep.AvgRelError / RelCnt
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal subroutine. Heap sort.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub HeapSortPoints(ByRef X() As Double, _
         ByRef Y() As Double, _
         ByVal N As Long)
    Dim i As Long
    Dim J As Long
    Dim K As Long
    Dim T As Long
    Dim Tmp As Double
    Dim IsAscending As Boolean
    Dim IsDescending As Boolean
    
    '
    ' Test for already sorted set
    '
    IsAscending = True
    IsDescending = True
    For i = 1# To N - 1# Step 1
        IsAscending = IsAscending And X(i) > X(i - 1#)
        IsDescending = IsDescending And X(i) < X(i - 1#)
    Next i
    If IsAscending Then
        Exit Sub
    End If
    If IsDescending Then
        For i = 0# To N - 1# Step 1
            J = N - 1# - i
            If J <= i Then
                Exit For
            End If
            Tmp = X(i)
            X(i) = X(J)
            X(J) = Tmp
            Tmp = Y(i)
            Y(i) = Y(J)
            Y(J) = Tmp
        Next i
        Exit Sub
    End If
    
    '
    ' Special case: N=1
    '
    If N = 1# Then
        Exit Sub
    End If
    
    '
    ' General case
    '
    i = 2#
    Do
        T = i
        Do While T <> 1#
            K = T \ 2#
            If X(K - 1#) >= X(T - 1#) Then
                T = 1#
            Else
                Tmp = X(K - 1#)
                X(K - 1#) = X(T - 1#)
                X(T - 1#) = Tmp
                Tmp = Y(K - 1#)
                Y(K - 1#) = Y(T - 1#)
                Y(T - 1#) = Tmp
                T = K
            End If
        Loop
        i = i + 1#
    Loop Until Not i <= N
    i = N - 1#
    Do
        Tmp = X(i)
        X(i) = X(0#)
        X(0#) = Tmp
        Tmp = Y(i)
        Y(i) = Y(0#)
        Y(0#) = Tmp
        T = 1#
        Do While T <> 0#
            K = 2# * T
            If K > i Then
                T = 0#
            Else
                If K < i Then
                    If X(K) > X(K - 1#) Then
                        K = K + 1#
                    End If
                End If
                If X(T - 1#) >= X(K - 1#) Then
                    T = 0#
                Else
                    Tmp = X(K - 1#)
                    X(K - 1#) = X(T - 1#)
                    X(T - 1#) = Tmp
                    Tmp = Y(K - 1#)
                    Y(K - 1#) = Y(T - 1#)
                    Y(T - 1#) = Tmp
                    T = K
                End If
            End If
        Loop
        i = i - 1#
    Loop Until Not i >= 1#
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal subroutine. Heap sort.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub HeapSortDPoints(ByRef X() As Double, _
         ByRef Y() As Double, _
         ByRef D() As Double, _
         ByVal N As Long)
    Dim i As Long
    Dim J As Long
    Dim K As Long
    Dim T As Long
    Dim Tmp As Double
    Dim IsAscending As Boolean
    Dim IsDescending As Boolean
    
    '
    ' Test for already sorted set
    '
    IsAscending = True
    IsDescending = True
    For i = 1# To N - 1# Step 1
        IsAscending = IsAscending And X(i) > X(i - 1#)
        IsDescending = IsDescending And X(i) < X(i - 1#)
    Next i
    If IsAscending Then
        Exit Sub
    End If
    If IsDescending Then
        For i = 0# To N - 1# Step 1
            J = N - 1# - i
            If J <= i Then
                Exit For
            End If
            Tmp = X(i)
            X(i) = X(J)
            X(J) = Tmp
            Tmp = Y(i)
            Y(i) = Y(J)
            Y(J) = Tmp
            Tmp = D(i)
            D(i) = D(J)
            D(J) = Tmp
        Next i
        Exit Sub
    End If
    
    '
    ' Special case: N=1
    '
    If N = 1# Then
        Exit Sub
    End If
    
    '
    ' General case
    '
    i = 2#
    Do
        T = i
        Do While T <> 1#
            K = T \ 2#
            If X(K - 1#) >= X(T - 1#) Then
                T = 1#
            Else
                Tmp = X(K - 1#)
                X(K - 1#) = X(T - 1#)
                X(T - 1#) = Tmp
                Tmp = Y(K - 1#)
                Y(K - 1#) = Y(T - 1#)
                Y(T - 1#) = Tmp
                Tmp = D(K - 1#)
                D(K - 1#) = D(T - 1#)
                D(T - 1#) = Tmp
                T = K
            End If
        Loop
        i = i + 1#
    Loop Until Not i <= N
    i = N - 1#
    Do
        Tmp = X(i)
        X(i) = X(0#)
        X(0#) = Tmp
        Tmp = Y(i)
        Y(i) = Y(0#)
        Y(0#) = Tmp
        Tmp = D(i)
        D(i) = D(0#)
        D(0#) = Tmp
        T = 1#
        Do While T <> 0#
            K = 2# * T
            If K > i Then
                T = 0#
            Else
                If K < i Then
                    If X(K) > X(K - 1#) Then
                        K = K + 1#
                    End If
                End If
                If X(T - 1#) >= X(K - 1#) Then
                    T = 0#
                Else
                    Tmp = X(K - 1#)
                    X(K - 1#) = X(T - 1#)
                    X(T - 1#) = Tmp
                    Tmp = Y(K - 1#)
                    Y(K - 1#) = Y(T - 1#)
                    Y(T - 1#) = Tmp
                    Tmp = D(K - 1#)
                    D(K - 1#) = D(T - 1#)
                    D(T - 1#) = Tmp
                    T = K
                End If
            End If
        Loop
        i = i - 1#
    Loop Until Not i >= 1#
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal subroutine. Tridiagonal solver. Solves
'
'( B[0] C[0]                      )
'( A[1] B[1] C[1]                 )
'(      A[2] B[2] C[2]            )
'(            ..........          ) * X = D
'(            ..........          )
'(           A[N-2] B[N-2] C[N-2] )
'(                  A[N-1] B[N-1] )
'
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub SolveTridiagonal(ByRef A_() As Double, _
         ByRef B_() As Double, _
         ByRef C_() As Double, _
         ByRef D_() As Double, _
         ByVal N As Long, _
         ByRef X() As Double)
    Dim A() As Double
    Dim B() As Double
    Dim C() As Double
    Dim D() As Double
    Dim K As Long
    Dim T As Double
    A = A_
    B = B_
    C = C_
    D = D_
    ReDim X(0# To N - 1#)
    A(0#) = 0#
    C(N - 1#) = 0#
    For K = 1# To N - 1# Step 1
        T = A(K) / B(K - 1#)
        B(K) = B(K) - T * C(K - 1#)
        D(K) = D(K) - T * D(K - 1#)
    Next K
    X(N - 1#) = D(N - 1#) / B(N - 1#)
    For K = N - 2# To 0# Step -1
        X(K) = (D(K) - C(K) * X(K + 1#)) / B(K)
    Next K
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal subroutine. Cyclic tridiagonal solver. Solves
'
'( B[0] C[0]                 A[0] )
'( A[1] B[1] C[1]                 )
'(      A[2] B[2] C[2]            )
'(            ..........          ) * X = D
'(            ..........          )
'(           A[N-2] B[N-2] C[N-2] )
'( C[N-1]           A[N-1] B[N-1] )
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub SolveCyclicTridiagonal(ByRef A() As Double, _
         ByRef B_() As Double, _
         ByRef C() As Double, _
         ByRef D() As Double, _
         ByVal N As Long, _
         ByRef X() As Double)
    Dim B() As Double
    Dim K As Long
    Dim T As Double
    Dim Alpha As Double
    Dim Beta As Double
    Dim Gamma As Double
    Dim Y() As Double
    Dim z() As Double
    Dim U() As Double
    B = B_
    Beta = A(0#)
    Alpha = C(N - 1#)
    Gamma = -B(0#)
    B(0#) = 2# * B(0#)
    B(N - 1#) = B(N - 1#) - Alpha * Beta / Gamma
    ReDim U(0 To N - 1)
    For K = 0# To N - 1# Step 1
        U(K) = 0#
    Next K
    U(0#) = Gamma
    U(N - 1#) = Alpha
    Call SolveTridiagonal(A, B, C, D, N, Y)
    Call SolveTridiagonal(A, B, C, U, N, z)
    ReDim X(0 To N - 1)
    For K = 0# To N - 1# Step 1
        X(K) = Y(K) - (Y(0#) + Beta / Gamma * Y(N - 1#)) / (1# + z(0#) + Beta / Gamma * z(N - 1#)) * z(K)
    Next K
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal subroutine. Three-point differentiation
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function DiffThreePoint(ByVal T As Double, _
         ByVal X0 As Double, _
         ByVal F0 As Double, _
         ByVal X1 As Double, _
         ByVal F1 As Double, _
         ByVal X2 As Double, _
         ByVal F2 As Double) As Double
    Dim Result As Double
    Dim A As Double
    Dim B As Double
    T = T - X0
    X1 = X1 - X0
    X2 = X2 - X0
    A = (F2 - F0 - X2 / X1 * (F1 - F0)) / (Square(X2) - X1 * X2)
    B = (F1 - F0 - A * Square(X1)) / X1
    Result = 2# * A * T + B
    DiffThreePoint = Result
End Function
