'=======================================================================================
'Unifloc 7.6  Vulpes zerda                                           khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2019
'
'=======================================================================================
' абстрактный класс скважины, показывающий интерфейс, но ничего не реализующий
Option Explicit
Option Base 0
' ============ general well objects ===========
' штуцер установленный на поверхности
' choke always exist in well (but can have diam = 0 means - no influence on flow)
Private p_choke As New Cchoke
' input fluid object
Private p_Fluid As New CPVT                  ' флюид из пласта
Public Trajectory As New CTrajectory         ' полная траектория скважины с инклинометрии (основной способ задания скважины)
' abbient formation object needed for full temperature calculation
' must be accessed through property - in order to pass it to pipes properly
Private p_AmbientForm As New CAmbientFormation
Private p_PTbuf As PTtype
Private p_PTlin As PTtype
Private p_PTcas As PTtype
Private p_PTwf As PTtype
Private p_Param As PARAMCALC                 ' параметры расчета по трубе
 ' поправочные коэффициенты для расчета распределения давления
Private p_betta_grav As Double
Private p_betta_fric As Double
Private c_Curves As New Collection           ' коллекция кривых с результатами расчетов
Public Event ReportProgress(msg As String)
' ============ constructor ====================
Private Sub Class_Initialize()
End Sub
'------------------------------------------------------------
' choke general  properties
'------------------------------------------------------------
Property Get Choke() As Cchoke
   Set Choke = p_choke
End Property
Public Sub SetChoke(dchoke_mm, Optional dTub_mm = 62)
' установка параметров штуцера
   p_choke.Dchoke_m = dchoke_mm / 1000
   p_choke.Ddown_m = dTub_mm / 1000
   p_choke.Dup_m = dTub_mm / 1000
End Sub
 
Public Sub clearChoke()
   p_choke.Dchoke_m = 0
End Sub
Private Function isChoke() As Boolean
   isChoke = p_choke.Dchoke_m > 0
End Function
'------------------------------------------------------------
' fluid general properties
'------------------------------------------------------------
Public Property Get Fluid() As CPVT
   Set Fluid = p_Fluid
End Property
Public Property Get FluidTub() As CPVT
End Property
Public Property Get FluidCas() As CPVT
End Property
Public Property Set Fluid(val As CPVT)
End Property
' ---------------------------------------------------------------
' flow correlations tuning methods
' ---------------------------------------------------------------
Public Property Get betta_grav() As Double
   betta_grav = p_betta_grav
End Property
Public Property Get betta_fric() As Double
   betta_fric = p_betta_fric
End Property
Public Property Let betta_grav(val As Double)
End Property
 
Public Property Let betta_fric(val As Double)
End Property
Public Property Let HFlowCorrelation(val As H_CORRELATION)
End Property
 
Public Property Get HFlowCorrelation() As H_CORRELATION
    HFlowCorrelation = Param.correlation
End Property
 
Public Property Let TempCorrelation(val As TEMP_CALC_METHOD)
    Dim prm As PARAMCALC
    prm = Param
    prm.tempMethod = val
    Param = prm
End Property
 
Public Property Get TempCorrelation() As TEMP_CALC_METHOD
    TempCorrelation = Param.tempMethod
End Property
Public Property Let Param(val As PARAMCALC)
    
End Property
 
Public Property Get Param() As PARAMCALC
End Property
'------------------------------------------------------------
' temperature general properties
'------------------------------------------------------------
Public Property Get Tline_C() As Double
    Tline_C = p_PTlin.T_C
End Property
Public Property Get Tbuf_C() As Double
    Tbuf_C = p_PTbuf.T_C
End Property
 
Public Property Get Tbh_C() As Double
    Tbh_C = p_PTwf.T_C
End Property
 
Public Property Get Twh_C() As Double
    Twh_C = p_PTbuf.T_C
End Property
Public Property Get Tsurf_C() As Double
    On Error Resume Next
    Tsurf_C = p_PTbuf.T_C
    Tsurf_C = AmbientForm.AmbTemp_С(0)
End Property
Public Sub SetTempModel(ByVal Tbh_C As Double, _
                        ByVal Twh_C As Double, _
                        Optional ByVal tempMethod As TEMP_CALC_METHOD = StartEndTemp)
                        
End Sub
Public Property Get AmbientForm() As CAmbientFormation
    Set AmbientForm = p_AmbientForm
End Property
Public Property Set AmbientForm(ByVal vNewValue As CAmbientFormation)
    
End Property
'------------------------------------------------------------
' pressure general properties
'------------------------------------------------------------
Public Property Get Pline_atma() As Double
   Pline_atma = p_PTlin.P_atma
End Property
Public Property Get Pbuf_atma() As Double
' buffer pressure
   Pbuf_atma = p_PTbuf.P_atma
End Property
Public Property Get Pwf_atma() As Double
' давление на забое
   Pwf_atma = p_PTwf.P_atma
End Property
Public Property Get Pan_atma() As Double
' annulus presure
   Pan_atma = p_PTcas.P_atma
End Property
'------------------------------------------------------------
' well rates general properties
'------------------------------------------------------------
Property Let Qliq_scm3day(Qval_scm3day As Double)
   Fluid.Qliq_scm3day = Qval_scm3day
   ' далее надо сбросить все флюиды которые были в системе на единый, что возможно потребует пересчета
   Set Fluid = Fluid
 '  p_Calculated = False
End Property
' дебит жидкости из скважины в поверхностных условиях
Public Property Get Qliq_scm3day() As Double
   Qliq_scm3day = p_Fluid.Qliq_scm3day
End Property
Public Property Get W_kgsec() As Double
'    массовый расход продукции рассчитаем
   W_kgsec = p_Fluid.Wm_kgsec
End Property
Public Property Get Qo_scm3day() As Double
   Qo_scm3day = p_Fluid.Qo_m3day
End Property
Public Property Get Qo_sctday() As Double
   Qo_sctday = Qliq_scm3day * (1 - p_Fluid.wc_fr) * p_Fluid.gamma_o
End Property
Public Property Get Qw_scm3day() As Double
   Qw_scm3day = Qliq_scm3day * p_Fluid.wc_fr
End Property
Public Property Get Qg_scm3day() As Double
   Qg_scm3day = p_Fluid.Qgas_scm3day
End Property
Property Get fw_perc() As Double
    fw_perc = p_Fluid.wc_perc
End Property
Property Let fw_perc(wcval As Double)
   Dim Wc As Double
   Wc = wcval / 100
   Fluid.wc_fr = Wc
   ' далее надо сбросить все флюиды которые были в системе на единый, что возможно потребует пересчета
   Set Fluid = p_Fluid
End Property
Property Let Rp_m3m3(Rpval As Double)
   Fluid.Rp_m3m3 = Rpval
   ' далее надо сбросить все флюиды которые были в системе на единый, что возможно потребует пересчета
   Set Fluid = p_Fluid
End Property
' ---------------------------------------------------------
' управление кривыми
' ---------------------------------------------------------
Public Property Get Curve(Key As String) As TInterpolation
On Error Resume Next
    Dim exists As Boolean
    exists = Not IsEmpty(c_Curves.Item(Key))
    If exists Then
       Set Curve = c_Curves.Item(Key)
    Else
       Set Curve = New TInterpolation
       c_Curves.Add Curve, Key
    End If
End Property
Public Property Set Curve(Key As String, valNew As TInterpolation)
 On Error Resume Next
    Dim exists As Boolean
    exists = Not IsEmpty(c_Curves.Item(Key))
    If exists Then
       c_Curves(Key) = valNew
    Else
       c_Curves.Add valNew, Key
    End If
End Property
' =======================================
' методы инициализации скважины
' =======================================
Public Sub InitWell(ByVal Hperf_m As Double, _
                    ByVal Htub_m As Double, _
                    ByVal Udl_m As Double, _
                    ByVal dCas_mm As Double, _
                    ByVal dTub_mm As Double, _
                    ByVal Tbh_C As Double, _
                    ByVal Twh_C As Double)
                    
End Sub
Public Sub InitWellRange(ByVal Incl_Hmes_m_ As Range, _
                          ByVal Incl_Hvert_m_ As Range, _
                          ByVal Hperf_m As Double, _
                          ByVal Htub_m As Double, _
                          ByVal dCas_mm As Double, _
                          ByVal dTub_mm As Double, _
                          ByVal Tbh_C As Double, _
                          ByVal Twh_C As Double)
                          
' метод для инициализации скважины данными инсклинометрии и числами для остальных параметров
End Sub
Public Sub InitWellRangeAll(ByVal Incl_Hmes_m_ As Range, _
                           ByVal Incl_Hvert_m_ As Range, _
                           ByVal hmes_dcas_m_ As Range, _
                           ByVal dcas_arr_mm_ As Range, _
                           ByVal hmes_dtub_m_ As Range, _
                           ByVal dtub_arr_mm_ As Range, _
                           ByVal hmes_tamb_m_ As Range, _
                           ByVal tamb_C_ As Range)
' метод для инициализации скважины из диапазонов измнения ключевых параметров
End Sub
' ---------------------------------------------------------------
' service function
' ---------------------------------------------------------------
   
 Public Function Clone() As CWell
 
 End Function
    
 Public Sub CopyFluid(fl As CPVT)
 End Sub
 Public Sub InitTempLinear(ByVal Tbhinit_C As Double, ByVal Twhinit_C As Double)
' процедура для инициализации температуры в скважине, для линейнго расчета
 End Sub
 
' ============================================================
' основные расчетные функции
' ============================================================
Public Function Calc_Plin_Pwf_atma(Pwf_atma As Double, _
                          Optional CalcCasing As Boolean = True, _
                          Optional CalcChoke As Boolean = True, _
                          Optional calcESPtemp As Boolean = False, _
                          Optional saveCurve As CALC_RESULTS = noCurves) As Double
              
' @brief расчет давления на устье через забойное давление (снизу -> вверх)
' @param Pwf - исходное забойное давление и температура
' @CalcCasing - флаг показывает надо ли считать ветку распределения давления по забтрубу - динамический уровень и затрубное давление
' @CalcChoke - показывает надо ли считать штуцер
' @calcESPtemp - показывает надо ли считать температуру в УЭЦН
' @saveCurve - показывает насколько детально надо сохранять результаты расчета
End Function
Public Function Calc_Pwf_Plin_atma(ByVal Plin_atma As Double, _
                                    Optional saveCurve As CALC_RESULTS = noCurves, _
                                    Optional CalcCasing As Boolean = False, _
                                    Optional calcESPtemp As Boolean = False)
                                    
End Function
Public Function Calc_Well(ByVal Plin_atma As Double, _
                          ByVal Pbuf_atma As Double, _
                          ByVal Pwf_atma As Double, _
                          ByVal Pcas_atma As Double, _
                       Optional CalcChoke As Boolean = True) As Boolean
                       
End Function
