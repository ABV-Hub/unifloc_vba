''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2007, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Pearson product-moment correlation coefficient
'
'Input parameters:
'    X       -   sample 1 (array indexes: [0..N-1])
'    Y       -   sample 2 (array indexes: [0..N-1])
'    N       -   sample size.
'
'Result:
'    Pearson product-moment correlation coefficient
'
'  -- ALGLIB --
'     Copyright 09.04.2007 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function PearsonCorrelation(ByRef X() As Double, _
         ByRef y() As Double, _
         ByVal N As Long) As Double
    Dim Result As Double
    Dim i As Long
    Dim XMean As Double
    Dim YMean As Double
    Dim S As Double
    Dim XV As Double
    Dim YV As Double
    Dim T1 As Double
    Dim T2 As Double
    XV = 0#
    YV = 0#
    If N <= 1# Then
        Result = 0#
        PearsonCorrelation = Result
        Exit Function
    End If
    
    '
    ' Mean
    '
    XMean = 0#
    YMean = 0#
    For i = 0# To N - 1# Step 1
        XMean = XMean + X(i)
        YMean = YMean + y(i)
    Next i
    XMean = XMean / N
    YMean = YMean / N
    
    '
    ' numerator and denominator
    '
    S = 0#
    XV = 0#
    YV = 0#
    For i = 0# To N - 1# Step 1
        T1 = X(i) - XMean
        T2 = y(i) - YMean
        XV = XV + Square(T1)
        YV = YV + Square(T2)
        S = S + T1 * T2
    Next i
    If XV = 0# Or YV = 0# Then
        Result = 0#
    Else
        Result = S / (Sqr(XV) * Sqr(YV))
    End If
    PearsonCorrelation = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Spearman's rank correlation coefficient
'
'Input parameters:
'    X       -   sample 1 (array indexes: [0..N-1])
'    Y       -   sample 2 (array indexes: [0..N-1])
'    N       -   sample size.
'
'Result:
'    Spearman's rank correlation coefficient
'
'  -- ALGLIB --
'     Copyright 09.04.2007 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function SpearmanRankCorrelation(ByRef X_() As Double, _
         ByRef y_() As Double, _
         ByVal N As Long) As Double
    Dim Result As Double
    Dim X() As Double
    Dim y() As Double
    X = X_
    y = y_
    Call RankX(X, N)
    Call RankX(y, N)
    Result = PearsonCorrelation(X, y, N)
    SpearmanRankCorrelation = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal ranking subroutine
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub RankX(ByRef X() As Double, ByVal N As Long)
    Dim i As Long
    Dim j As Long
    Dim K As Long
    Dim T As Long
    Dim Tmp As Double
    Dim TmpI As Long
    Dim R() As Double
    Dim C() As Long
    
    '
    ' Prepare
    '
    If N <= 1# Then
        X(0#) = 1#
        Exit Sub
    End If
    ReDim R(0# To N - 1#)
    ReDim C(0# To N - 1#)
    For i = 0# To N - 1# Step 1
        R(i) = X(i)
        C(i) = i
    Next i
    
    '
    ' sort {R, C}
    '
    If N <> 1# Then
        i = 2#
        Do
            T = i
            Do While T <> 1#
                K = T \ 2#
                If R(K - 1#) >= R(T - 1#) Then
                    T = 1#
                Else
                    Tmp = R(K - 1#)
                    R(K - 1#) = R(T - 1#)
                    R(T - 1#) = Tmp
                    TmpI = C(K - 1#)
                    C(K - 1#) = C(T - 1#)
                    C(T - 1#) = TmpI
                    T = K
                End If
            Loop
            i = i + 1#
        Loop Until Not i <= N
        i = N - 1#
        Do
            Tmp = R(i)
            R(i) = R(0#)
            R(0#) = Tmp
            TmpI = C(i)
            C(i) = C(0#)
            C(0#) = TmpI
            T = 1#
            Do While T <> 0#
                K = 2# * T
                If K > i Then
                    T = 0#
                Else
                    If K < i Then
                        If R(K) > R(K - 1#) Then
                            K = K + 1#
                        End If
                    End If
                    If R(T - 1#) >= R(K - 1#) Then
                        T = 0#
                    Else
                        Tmp = R(K - 1#)
                        R(K - 1#) = R(T - 1#)
                        R(T - 1#) = Tmp
                        TmpI = C(K - 1#)
                        C(K - 1#) = C(T - 1#)
                        C(T - 1#) = TmpI
                        T = K
                    End If
                End If
            Loop
            i = i - 1#
        Loop Until Not i >= 1#
    End If
    
    '
    ' compute tied ranks
    '
    i = 0#
    Do While i <= N - 1#
        j = i + 1#
        Do While j <= N - 1#
            If R(j) <> R(i) Then
                Exit Do
            End If
            j = j + 1#
        Loop
        For K = i To j - 1# Step 1
            R(K) = 1# + (i + j - 1#) / 2#
        Next K
        i = j
    Loop
    
    '
    ' back to x
    '
    For i = 0# To N - 1# Step 1
        X(C(i)) = R(i)
    Next i
End Sub

