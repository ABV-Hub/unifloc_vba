'=======================================================================================
'Unifloc 7.17  Test                                          khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2019
'
'=======================================================================================
'
'
' класс для моделирования работы погружной части ЭЦН
' описывает работу набора одинаковых ступеней
'
Option Explicit
Option Base 0
' геометрические параметры насоса
Public h_mes_top_m As Double           ' глубина установки ЭЦН (по верхней части)
Public angle_deg As Double             ' угол установки УЭЦН (предполагается, что по глубине угол не меняется)
' общие параметры
Public fluid As CPVT                   ' флюид движущийся через насос (с учетом сепарации газа)
Public c_calibr_head As Double         ' деградация характеристики УЭЦН по напору
Public c_calibr_rate As Double         ' деградация характеристики УЭЦН по дебиту
Public c_calibr_power As Double        ' деградация по мощности (она же по КПД системы)
Public freq_Hz As Double               ' частота вращения вала насоса (используется для расчета)
Public curves As New CCurves           ' все кривые планируется прятать тут
' параметры конструкции ЭЦН
Public stage_num As Integer            ' количество ступеней в насосе (используется для расчета характеристики насоса)
Public first_stage_num As Integer      ' номер первой ступени в данной секции в общей сборки насоса (для формирования выходных массивов)
Private t_int_C_ As Double             ' температура потока на приемной сетке УЭЦН (учитывается нагрев двигателем)
Private t_dis_C_ As Double             ' температура потока на выкиде насоса (учитывается нагрев в насосе)
' параметры работы насоса для которых был проведен расчет
Private p_int_atma_ As Double          ' давление на приеме насоса (используется для расчета рабочих характеристик)
Private p_dis_atma_ As Double          ' давление на выкиде насоса
Private power_fluid_Wt_ As Double      ' Мощность передаваемая УЭЦН жидкости
Private power_ESP_Wt_ As Double        ' Мощность потребляемая ЭЦН с вала (механическая)
Private eff_ESP_d_ As Double           ' КПД УЭЦН по факту
Private head_real_m_ As Double
' параметры определяющие установку УЭЦН
Private db_ As ESP_PARAMS            ' набор параметров насоса из базы данных
Private turb_head_factor As Double
Private turb_rate_factor As Double
Private gas_degr_type_ As Integer       ' тип для коррекции по газу
                                        ' ESP_gas_degradation_type       - тип насоса по работе с газом
                                        '      ESP_gas_degradation_type = 0 нет коррекции
                                        '      ESP_gas_degradation_type = 1 стандартный ЭЦН (предел 25%)
                                        '      ESP_gas_degradation_type = 2 ЭЦН с газостабилизирующим модулем (предел 50%)
                                        '      ESP_gas_degradation_type = 3 ЭЦН с осевым модулем (предел 75%)
                                        '      ESP_gas_degradation_type = 4 ЭЦН с модифицированным ступенями (предел 40%)
Private correct_visc_ As Boolean
Private corr_visc_h_ As Double          ' поправочный коэффициент для напорной характеристики на вязкость для текущего дебита и текущего расчета
Private corr_visc_q_ As Double          ' поправочный коэффициент для дебита
Private corr_visc_pow_ As Double        ' поправочный коэффициент для мощности
Private corr_visc_eff_ As Double        ' поправочный коэффициент для КПД
Private h_corr_qd_curve_ As New CInterpolation     ' зависимость поправочного коэффициента для напора от дебита (для расчета по модели американского института нефти)
Private p_curve_ As New CInterpolation  ' кривая распределения давления вдоль насоса   (как снаружи, так и внутри)
Private t_curve_ As New CInterpolation  ' кривая распределения температуры флюида вдоль насоса
Public Property Get db() As ESP_PARAMS
    db = db_
End Property
Public Property Let db(val As ESP_PARAMS)
    db_ = val
End Property
' =======================  геометрия
Public Property Get length_m() As Double
   length_m = db_.stage_height_m * stage_num
End Property
' глубина нижней точки установки
Public Property Get h_mes_down_m() As Double
   h_mes_down_m = h_mes_top_m + length_m
End Property
' функция для расчета высоты сбори из num ступеней
Private Function stages_heigth_m(ByVal num As Integer) As Double
   If num <= stage_num Then
       stages_heigth_m = length_m / stage_num * num
   Else
       stages_heigth_m = length_m
   End If
End Function
' свойство для расчета измеренной глубины расположения i ступени
Public Property Get HmesStage_m(i) As Double
   HmesStage_m = h_mes_down_m + stages_heigth_m(i) ' тут надо отнять длину ступеней выше контрольной
End Property
Public Property Get area_shaft_m2() As Double
   area_shaft_m2 = db_.d_shaft_m * db_.d_shaft_m / 4 * const_Pi
End Property
Public Property Get angle_vert_deg() As Double
   angle_vert_deg = angle_vert_deg - 90
End Property
' ========================  конец блока описания геометрии
Public Property Get head_m() As Double
   head_m = head_real_m_
End Property
Public Function points_num() As Integer
   points_num = UBound(db_.head_points) + 1
End Function
Property Get eff_ESP_d() As Double
   eff_ESP_d = eff_ESP_d_
End Property
Property Get power_fluid_W() As Double
   power_fluid_W = power_fluid_Wt_
End Property
Property Get power_ESP_W() As Double
   power_ESP_W = power_ESP_Wt_
End Property
Public Property Get p_int_atma() As Double
   p_int_atma = p_int_atma_
End Property
Public Property Get p_dis_atma() As Double
   p_dis_atma = p_dis_atma_
End Property
Public Property Get t_int_C() As Double
t_int_C = t_int_C_
End Property
Public Property Get t_dis_C() As Double
t_dis_C = t_dis_C_
End Property
Public Property Get w_obmin() As Double
   w_obmin = freq_Hz * 60
End Property
Public Property Let w_obmin(val As Double)
   freq_Hz = w_obmin / 60
End Property
Public Property Get w_radsec() As Double
   w_radsec = freq_Hz * 2 * const_Pi
End Property
Public Property Get rate_max_m3day() As Double
   rate_max_m3day = db_.rate_max_m3day * freq_Hz / db_.freq_Hz / corr_visc_q_
End Property
Public Property Get rate_nom_m3day() As Double
   rate_nom_m3day = db_.rate_nom_m3day * freq_Hz / db_.freq_Hz / corr_visc_q_
End Property
Public Property Get gas_degr_type() As Integer
   gas_degr_type = gas_degr_type_
End Property
Public Property Let gas_degr_type(val As Integer)
   If val >= 0 And val < 5 Then
       gas_degr_type_ = val
   End If
End Property
Private Function calc_ESP_head_nominal_m(ByVal q_m3day As Double, Optional ByVal stage_num As Integer = 1) As Double
' функция для расчета номинального напора насоса
    Dim b As Double                  ' отношение частот
    With db_
        b = .freq_Hz / freq_Hz  ' определим отношение реальной частоты УЭЦН к номинальной для которой заданы характеристики
        calc_ESP_head_nominal_m = b ^ (-2) * stage_num * crv_interpolation(.rate_points, .head_points, b * q_m3day, 2)(1, 1)
        calc_ESP_head_nominal_m = calc_ESP_head_nominal_m * corr_visc_h_  ' учтем коррекцию на вязкость
    End With
End Function
Public Function get_ESP_head_m(ByVal q_m3day As Double, Optional ByVal stage_num As Integer = -1, Optional ByVal mu_cSt As Double = -1) As Double
    Dim b As Double                 ' отношение частот
    Dim stage_num_to_calc As Integer ' число ступеней с которым будет проводиться расчет
    Dim maxQ As Double
    If q_m3day < 0 Then             ' проверим исходные данные на релевантность
        get_ESP_head_m = 0
        addLogMsg_debug "CPumpESP.get_ESP_head_m: расчет характеристики насоса с отрицательным дебитом  Q_m3day = " & Format(q_m3day, "###0.00") & "Напор установлен = 0"
        Exit Function
    End If
    ' определяем число ступеней с которым будем проводить расчет
    If stage_num > 0 Then           ' если в явном виде задан параметр то его используем
        stage_num_to_calc = stage_num
    Else                            ' иначе использует количество ступеней из характеристики насоса
        stage_num_to_calc = Me.stage_num
    End If
    If CorrectVisc And (mu_cSt > 0) Then   ' если большая вязкость - сделаем коррекцию
        Call calc_CorrVisc_PetrInst(q_m3day, mu_cSt)   ' метод меняет константы класса, которые влияют на характеристики насоса
    End If
    q_m3day = q_m3day / corr_visc_q_    ' делаем коррекцию по вязкости для дебита
    maxQ = rate_max_m3day               ' здесь коррекция на вязкость тоже уже учтена
    If q_m3day < maxQ Then
        get_ESP_head_m = calc_ESP_head_nominal_m(q_m3day, stage_num_to_calc)
    ElseIf maxQ - turb_rate_factor * (q_m3day - maxQ) > 0 Then
        ' apply correction for far rigth interval
        get_ESP_head_m = -turb_head_factor * calc_ESP_head_nominal_m(maxQ - turb_rate_factor * (q_m3day - maxQ), stage_num_to_calc)
    Else
        get_ESP_head_m = -turb_head_factor * calc_ESP_head_nominal_m(0, stage_num_to_calc)
    End If
End Function
Public Function get_ESP_power_W(ByVal q_m3day As Double, _
                       Optional ByVal stage_num As Integer = -1, _
                       Optional ByVal mu_cSt As Double = 1 _
                               ) As Double
    Dim b As Double
    Dim stage_num_to_calc As Integer
    If q_m3day < 0 Then
        get_ESP_power_W = 0
        addLogMsg_debug "CPumpESP.get_ESP_power_W: расчет характеристики насоса с отрицательным дебитом  Q_m3day = " & q_m3day & "Мощность установлена = 0"
        Exit Function
    End If
    If q_m3day > rate_max_m3day Then
        ' assume that for high rate power consumption will not be less that at max rate
       q_m3day = rate_max_m3day
    End If
    ' определяем число ступеней с которым будем проводить расчет
    If stage_num > 0 Then        ' если в явном виде задан параметр то его используем
        stage_num_to_calc = stage_num
    Else                        ' иначе использует количество ступеней из характеристики насоса
        stage_num_to_calc = Me.stage_num
    End If
    If CorrectVisc And (mu_cSt > 0) Then   ' если большая вязкость - сделаем коррекцию
        Call calc_CorrVisc_PetrInst(q_m3day, mu_cSt)   ' метод меняет константы класса, которые влияют на характеристики насоса
    End If
    q_m3day = q_m3day / corr_visc_q_   ' делаем коррекцию по вязкости
    With db_
        b = .freq_Hz / freq_Hz
        get_ESP_power_W = 1000 * b ^ (-3) * stage_num_to_calc * crv_interpolation(.rate_points, .power_points, b * q_m3day, 2)(1, 1)
        If get_ESP_power_W < 0 Then
            get_ESP_power_W = 0
        End If
        get_ESP_power_W = get_ESP_power_W * corr_visc_pow_
    End With
End Function
Public Function get_ESP_effeciency_fr(ByVal q_m3day As Double, Optional ByVal mu_cSt As Double = 1) As Double
    Dim b As Double
    Dim stage_num_to_calc As Integer
    If q_m3day < 0 Then
        get_ESP_effeciency_fr = 0
        addLogMsg "CPumpESP.get_ESP_effeciency_fr: расчет характеристики насоса с отрицательным дебитом  Q_m3day = " & q_m3day & "Мощность установлена = 0"
        Exit Function
    End If
    If q_m3day > rate_max_m3day Then
        get_ESP_effeciency_fr = 0
        Exit Function
    End If
    If CorrectVisc And (mu_cSt > 0) Then   ' если большая вязкость - сделаем коррекцию
        Call calc_CorrVisc_PetrInst(q_m3day, mu_cSt)   ' метод меняет константы класса, которые влияют на характеристики насоса
    End If
    q_m3day = q_m3day / corr_visc_q_   ' делаем коррекцию по вязкости
    b = db_.freq_Hz / freq_Hz
    get_ESP_effeciency_fr = crv_interpolation(db_.rate_points, db_.eff_points, b * q_m3day, 2)(1, 1)
    If get_ESP_effeciency_fr < 0 Then
        get_ESP_effeciency_fr = 0
    End If
    get_ESP_effeciency_fr = get_ESP_effeciency_fr * corr_visc_eff_
End Function
Public Function get_ESP_MaxOptimRate_m3day() As Double
' получения границы оптимального диапазона из базы
    get_ESP_MaxOptimRate_m3day = (freq_Hz / db_.freq_Hz) * db_.rate_opt_max_m3day
End Function
Public Function get_ESP_MinOptimRate_m3day() As Double
' получения границы оптимального диапазона из базы
    get_ESP_MinOptimRate_m3day = (freq_Hz / db_.freq_Hz) * db_.rate_opt_min_m3day
End Function
Private Sub ESP_dPIntegration(ByVal p_atma, _
                      ByVal t_intake_C, _
                   Optional t_dis_C As Double = 0, _
                   Optional calc_from_dis As Boolean = False, _
                   Optional saveCurve As Boolean = False)
    ' Функция расчете распределения давления в УЭЦН - расчет снизу вверх от входного давления до выходного
    ' заодно считает и потребляемую мощность и КПД установки
    ' p_atma         pressure at pump intake
    ' t_intake_C          temprature at pump intake
    ' t_dis_C         температура на выходе, если задана учитывается, если нет то рассчитывается
    ' calc_from_dis  показывает будет ли предпринята попытка проинтегрировать сверху вниз насос
    ' p_int_estimation_atma приближения для давления на приеме, используется для расчета сверху вниз
    
    Dim i As Integer
    Dim head_mix As Double
    Dim dPStage As Double
    Dim PowfluidWt As Double, PowfluidTot_Wt As Double  ' полезная мощность передаваемая насосом жидкости
    Dim PowESP_Wt As Double, PowESPTot_Wt As Double     ' механическая мощность потребляемая насосом
    Dim EffESP_d As Double      ' КПД УЭЦН
    Dim EffStage As Double
    Dim dTpump_C As Double, dTpumpSum_C As Double
    Dim Pst_atma As Double
    Dim Tst_C As Double         ' температура по ступеням
    Dim sign_int As Integer
    Dim q_mix_ As Double, q_mix__degr As Double
    Dim gascorr As Double
    Dim dNst As Integer  ' шаг ускорения при интегрировании большими шагами
    Dim Nst As Integer   ' шаг на текущей итерации
    Dim n As Integer     ' текущий номер ступени
    Dim dPav As Double   ' поправки на давление и температуру при интегрировании
    Dim dTav As Double
    n = 1
    dNst = 10 ' для начала пытаемся интегрировать такими шагами
    dPav = 0:    dTav = 0
    gascorr = 1
On Error GoTo err1:
    If calc_from_dis Then
        Tst_C = t_dis_C
        p_dis_atma_ = p_atma
        sign_int = -1
    Else
        Tst_C = t_intake_C
        p_int_atma_ = p_atma
        sign_int = 1
    End If
    
    Pst_atma = p_atma
    dTpumpSum_C = 0
    head_real_m_ = 0
    t_int_C_ = t_intake_C
    t_dis_C_ = t_dis_C
    corr_visc_h_ = 1                 ' поправочный коэффициент для напорной характеристики на вязкость для текущего дебита и текущего расчета
    corr_visc_q_ = 1                 ' для дебита
    corr_visc_pow_ = 1               ' для мощности
    corr_visc_eff_ = 1               ' для КПД
    
    If saveCurve Then
        curves.Item("gas_fractionInPump").ClearPoints
        curves.Item("PressureInPump").ClearPoints
        curves.Item("TempInPump").ClearPoints
        curves.Item("PowerfluidInPump").ClearPoints
        curves.Item("PowerESPInPump").ClearPoints
        curves.Item("EffESPInPump").ClearPoints
        curves.Item("q_mix_InPump").ClearPoints
        p_curve_.ClearPoints
        t_curve_.ClearPoints
    End If
    
    With fluid
        PowfluidWt = 0: PowfluidTot_Wt = 0
        PowESP_Wt = 0: PowESPTot_Wt = 0
        dTpumpSum_C = 0
        p_curve_.AddPoint HmesStage_m(0), Pst_atma    ' запишем в выходной массив первые точки
        t_curve_.AddPoint HmesStage_m(0), Tst_C
        n = 1
        i = 0
        Do While n < stage_num + 1
            If calc_from_dis Then
                If stage_num + 1 - n - dNst > 0 Then ' смотрим какой будет величина следующего шага
                    Nst = dNst                          ' мелкие шаги оставляем в зоне низкий давлений
                Else
                    Nst = 1
                End If
            Else
                If (stage_num + 1 - n) Mod dNst = 0 Then ' смотрим какой будет величина следующего шага
                    Nst = dNst                          ' мелкие шаги оставляем в зоне низкий давлений
                Else
                    Nst = 1
                End If
            End If
            Call .calc_PVT(Pst_atma + dPav, Tst_C + dTav)  ' делаем поправку на давление и температуру
            If i = 0 Then
                gascorr = GasCorrection_d(.gas_fraction_d, gas_degr_type_)
            End If
            q_mix_ = .q_mix_rc_m3day
            q_mix__degr = q_mix_ * c_calibr_rate
            head_mix = get_ESP_head_m(q_mix__degr, Nst, .mu_mix_cSt) * c_calibr_head * gascorr
            head_real_m_ = head_real_m_ + head_mix
            ' тут когда то надо сделать коррекцию характеристики на плотность
            dPStage = .rho_mix_rc_kgm3 * head_mix * const_g * const_convert_Pa_atma
            Pst_atma = Pst_atma + sign_int * dPStage
            dPav = dPStage / 2 * sign_int
            ' оценим работу совершаемую насосом по перекачке жидкости
            PowfluidWt = q_mix_ * const_convert_m3day_m3sec * dPStage * const_convert_atma_Pa   ' мощность с поправкой на плотность ГЖС
            PowfluidTot_Wt = PowfluidTot_Wt + PowfluidWt
            ' оценим мощность потребляемую насосом с вала
            PowESP_Wt = get_ESP_power_W(q_mix__degr, Nst, .mu_mix_cSt) * .rho_mix_rc_kgm3 / 1000 * c_calibr_power                ' мощность потребляемая одной ступенью на воде
            PowESPTot_Wt = PowESPTot_Wt + PowESP_Wt
            ' оценим КПД ступени в данных условиях
            If (PowESPTot_Wt > 0) Then
                EffESP_d = PowfluidTot_Wt / PowESPTot_Wt
            Else: EffESP_d = 0
            End If
            
            If (PowESP_Wt > 0) Then
                EffStage = PowfluidWt / PowESP_Wt
            Else: EffStage = 0
            End If
            
            If t_dis_C <= 0 And (Not calc_from_dis) Then ' оценка температуры по ступеням
                If EffStage > 0 Then
                    dTpump_C = const_g * head_mix / .cmix_JkgC * (1 - EffStage) / EffStage
                Else: dTpump_C = 0
                End If
            Else
                dTpump_C = (t_dis_C - t_intake_C) / stage_num * 1
            End If
            
            If Tst_C < 299 Then
                Tst_C = Tst_C + sign_int * dTpump_C
                dTav = sign_int * dTpump_C / 2
            End If
            
            If Tst_C > 300 Then
                Tst_C = 299
                dTav = 0
            End If
            
            dTpumpSum_C = dTpumpSum_C + dTpump_C
            
            If saveCurve Then
                curves.Item("gas_fractionInPump").AddPoint n, .f_g
                curves.Item("PressureInPump").AddPoint n, Pst_atma
                curves.Item("TempInPump").AddPoint n, Tst_C
                curves.Item("PowerfluidInPump").AddPoint n, PowfluidWt
                curves.Item("PowerESPInPump").AddPoint n, PowESP_Wt
                curves.Item("EffESPInPump").AddPoint n, EffESP_d
                curves.Item("q_mix_InPump").AddPoint n, q_mix_
                p_curve_.AddPoint HmesStage_m(n), p_atma
                t_curve_.AddPoint HmesStage_m(n), Tst_C
            End If
            n = n + Nst
            i = i + 1
        Loop
        If dTpumpSum_C > 298 Then
                addLogMsg "Перегрев около УЭЦН, расчетная температура =" & Format(Tst_C, "##0") & _
                              " рост температуры на ступени =" & Format(dTpump_C, "##0") & _
                              " КПД ступени =" & Format(EffStage, "##0.00") & _
                              " Дебит ступени =" & Format(.q_mix_rc_m3day, "##0.00") & _
                              " Температура исправлена на 299"
        End If
    End With
    power_ESP_Wt_ = PowESPTot_Wt
    power_fluid_Wt_ = PowfluidTot_Wt
    
    If calc_from_dis Then
        p_int_atma_ = Pst_atma
    Else
        p_dis_atma_ = Pst_atma
        t_dis_C_ = Tst_C
    End If
    
    eff_ESP_d_ = EffESP_d
    Exit Sub
err1:
    Dim errmsg As String
    errmsg = "Error:CESPpump.ESP_dPIntegration: " & sDELIM & Err.Description
    addLogMsg errmsg
    Err.Raise kErrESPcalc, Err.source, errmsg
End Sub
Public Function get_num_stages(q_mix_rc_m3day As Double, head_m As Double) As Integer
'  функция расчета необходимого числа ступеней для обеспечения заданного напора
    Dim Head1st As Double
    Head1st = get_ESP_head_m(q_mix_rc_m3day, 1)
    If Head1st > 0 Then
        get_num_stages = CInt(head_m / Head1st)
    Else
        get_num_stages = 0
    End If
End Function
Public Sub calc_ESP(p_atma As Double, t_intake_C As Double, Optional t_dis_C As Double = 0, _
                        Optional calc_from_intake As Boolean = True)
' метод расчета работы насоса
    Call ESP_dPIntegration(p_atma, t_intake_C, t_dis_C, Not calc_from_intake)
End Sub
Private Sub Class_Initialize()
    Set fluid = New CPVT
    correct_visc_ = True
 ' некоторых параметров может не быть в текущей версии базы, зададим их по умолчанию
    db_.stage_height_m = 0.05   ' 50 mm в среднем закладывается на высоту одной ступени
    db_.d_od_m = 0.092         ' 92 мм для 5 габарита внешний диаметр ЭЦН
    db_.d_cas_min_m = 0.121     ' 121 мм, рекомендуемый для 5 габарита минимальный диаметр обсадной колонны, заданный производителем оборудования
    db_.d_shaft_m = 0.017    ' 17 мм диаметр вала для насоса
    db_.area_shaft_m2 = 0.0002269    ' площадь поперечного сечения вала   (дублирует диаметр, но задается производителем)
    db_.shaft_power_limit_W = 60000   ' 60 кВт максимальная мощность передаваемая валом на номинальной частоте
    db_.shaft_power_limit_max_W = 125000     ' 125 кВт максимальная мощность передаваемая валом на номинальной частоте для высокопрочного вала
    db_.housing_pressure_limit_atma = 390  ' 390 атм максимальное давление на корпус
    db_.freq_Hz = 50
    db_.ID = 0
    
    c_calibr_head = 1 ' по умолчанию нет деградации
    c_calibr_rate = 1 ' по умолчанию нет деградации
    c_calibr_power = 1 ' по умолчанию нет деградации
    
    stage_num = 1
    freq_Hz = 50
    
    first_stage_num = 1 ' по умолчанию первый номер первый
    corr_visc_h_ = 1             ' поправочный коэффициень для напорной характеристики на вязкость для текущего дебита и текущего расчета
    corr_visc_q_ = 1               ' для дебита
    corr_visc_pow_ = 1             ' для мощности
    corr_visc_eff_ = 1             ' для КПД
    
    gas_degr_type_ = 0
    turb_head_factor = 0.5
    turb_rate_factor = 0.9
End Sub
' метод для построения кривых характеристик УЭЦН
Public Sub build_curves(Optional ByVal Qliq As Double = -1)
    Dim i As Integer
    Dim degr_temp As Double
    Dim qmin As Double, qmax As Double, qcalc As Double
    Dim qold As Double
    qold = fluid.qliq_sm3day
    Const num_points = 20
    
    curves.Item("Head").ClearPoints
    curves.Item("Effeciency").ClearPoints
    curves.Item("Power").ClearPoints
    curves.Item("NominalPressureDrop").ClearPoints
    curves.Item("RealPressureDrop").ClearPoints
    curves.Item("RealEfficiency").ClearPoints
    curves.Item("RealPower").ClearPoints
    curves.Item("RealHead").ClearPoints
    curves.Item("PumpTdis").ClearPoints
    curves.Item("PumpTint").ClearPoints
    
    qmin = 0.1
    qmax = rate_max_m3day()
    For i = 0 To num_points
        qcalc = (qmax - qmin) / num_points * i + qmin
        
        Me.fluid.fw_perc = fluid.fw_perc
        Me.fluid.qliq_sm3day = qcalc
    
        curves.Item("Head").AddPoint qcalc, get_ESP_head_m(qcalc)
        curves.Item("Power").AddPoint qcalc, get_ESP_power_W(qcalc)
        curves.Item("Effeciency").AddPoint qcalc, get_ESP_effeciency_fr(qcalc)
        
        degr_temp = c_calibr_head
        c_calibr_head = 0
        Call calc_ESP(p_int_atma_, t_int_C_)
        curves.Item("NominalPressureDrop").AddPoint qcalc, p_dis_atma_ - p_int_atma_
        
        c_calibr_head = degr_temp
        Call calc_ESP(p_int_atma_, t_int_C_)
        curves.Item("RealPressureDrop").AddPoint qcalc, p_dis_atma_ - p_int_atma_
        curves.Item("RealPower").AddPoint qcalc, power_fluid_Wt_
        curves.Item("RealEfficiency").AddPoint qcalc, eff_ESP_d_
        curves.Item("RealHead").AddPoint qcalc, head_real_m_
        curves.Item("PumpTdis").AddPoint qcalc, t_dis_C_
        curves.Item("PumpTint").AddPoint qcalc, t_int_C_
    Next i
    If Qliq < 0 Then Me.fluid.qliq_sm3day = qold
    Call calc_ESP(p_int_atma_, t_int_C_)
End Sub
Public Function Copy(pump As CESPpump) As Boolean
  
 stage_num = pump.stage_num
 freq_Hz = pump.freq_Hz
 t_int_C_ = pump.t_int_C
 t_dis_C_ = pump.t_dis_C
 
 Call fluid.Copy(pump.fluid)
  
 p_int_atma_ = pump.p_int_atma
 p_dis_atma_ = pump.p_dis_atma
 
 db_ = pump.db
 
 c_calibr_head = pump.c_calibr_head
 c_calibr_rate = pump.c_calibr_rate
 c_calibr_power = pump.c_calibr_power
     
End Function
Public Property Get CorrectVisc() As Boolean
    CorrectVisc = correct_visc_
End Property
Public Property Let CorrectVisc(val As Boolean)
    correct_visc_ = val
    If Not correct_visc_ Then
        corr_visc_h_ = 1             ' поправочный коэффициень для напорной характеристики на вязкость для текущего дебита и текущего расчета
        corr_visc_q_ = 1               ' для дебита
        corr_visc_pow_ = 1             ' для мощности
        corr_visc_eff_ = 1             ' для КПД
    End If
End Property
Private Sub calc_CorrVisc_PetrInst(ByVal q_mix_ As Double, ByVal nu_cSt As Double)
' метод для расчета корректировки напорной характеристики УЭЦН на вязкость для текущего насоса
' расчет для одной ступени
    
    corr_visc_h_ = 1             ' поправочный коэффициень для напорной характеристики на вязкость для текущего дебита и текущего расчета
    corr_visc_q_ = 1               ' для дебита
    corr_visc_pow_ = 1             ' для мощности
    corr_visc_eff_ = 1             ' для КПД
    
    If nu_cSt < 5 Then Exit Sub
    
    Dim GAMMA As Double
    Dim QwBEP_100gpm As Double, HwBEP_ft As Double
    'Dim nu_cSt As Double
    Dim Qstar As Double
    
    QwBEP_100gpm = Me.rate_nom_m3day * const_convert_m3day_gpm '/ 100   '   похоже к книге Такаса ошибка - не надо делить на 100 тут
    HwBEP_ft = Me.get_ESP_head_m(Me.rate_nom_m3day, 1) * const_convert_m_ft
    
    'nu_cSt = visc_cP / fluid.rho_oil_sckgm3
    
    GAMMA = -7.5946 + 6.6504 * Log(HwBEP_ft) + 12.8429 * Log(QwBEP_100gpm)
    
    Qstar = Exp((39.5276 + 26.5606 * Log(nu_cSt) - GAMMA) / 51.6565)
    
    corr_visc_q_ = 1 - 4.0327 * 10 ^ (-3) * Qstar - 1.724 * 10 ^ (-4) * Qstar ^ 2
    
    If (corr_visc_q_ < 0) Then
        corr_visc_h_ = 0
        Exit Sub
    End If
    
    corr_visc_eff_ = 1 - 3.3075 * 10 ^ (-2) * Qstar + 2.8875 * 10 ^ (-4) * Qstar ^ 2
    corr_visc_pow_ = 1 / corr_visc_eff_
    
    Dim Q0 As Double, Q0_6 As Double, Q0_8 As Double, Q1_0 As Double, Q1_2 As Double, qmax As Double
    Dim H0 As Double, H0_6 As Double, H0_8 As Double, H1_0 As Double, H1_2 As Double, Hmax As Double
    
    Q0 = 0:
    Q1_0 = rate_nom_m3day * corr_visc_q_: H1_0 = 1 - 7.00763 * 10 ^ (-3) * Qstar - 1.41 * 10 ^ (-5) * Qstar ^ 2
    Q0_8 = Q1_0 * 0.8: H0_8 = 1 - 4.4726 * 10 ^ (-3) * Qstar - 4.18 * 10 ^ (-5) * Qstar ^ 2
    Q0_6 = Q1_0 * 0.6: H0_6 = 1 - 3.68 * 10 ^ (-3) * Qstar - 4.36 * 10 ^ (-5) * Qstar ^ 2
    Q1_2 = Q1_0 * 1.2: H1_2 = 1 - 9.01 * 10 ^ (-3) * Qstar + 1.31 * 10 ^ (-5) * Qstar ^ 2
    qmax = rate_max_m3day * corr_visc_q_: Hmax = H1_2
    
    
    If qmax < Q1_2 Then
       Debug.Assert False
       ' тут что то не так с характеристиков насоса - номинальный и максимальный дебит не соответствуют друг другу
    End If
    
    h_corr_qd_curve_.ClearPoints
    
    'Call h_corr_qd_curve_.AddPoint(Qmax, Hmax)
    Call h_corr_qd_curve_.AddPoint(Q1_2, H1_2)
    Call h_corr_qd_curve_.AddPoint(Q1_0, H1_0)
    Call h_corr_qd_curve_.AddPoint(Q0_8, H0_8)
    Call h_corr_qd_curve_.AddPoint(Q0_6, H0_6)
    H0 = h_corr_qd_curve_.getPoint(Q0) ' пытаемся экстраполировать
    If H0 < 0 Then H0 = H0_6
    Call h_corr_qd_curve_.AddPoint(Q0, H0)
    
    corr_visc_h_ = h_corr_qd_curve_.getPoint(q_mix_)
    'If corr_visc_h_ < 0 Then corr_visc_h_ = 0
End Sub
' метод для доступа к кривой давления в насосе относительно измеренных глубин
Public Property Get p_curve() As CInterpolation
    Set p_curve = p_curve_
End Property
Public Property Get t_curve() As CInterpolation
    Set t_curve = t_curve_
End Property
Public Function CheckShaft(ByVal m_Nm As Double) As Boolean
' проверка допустимой прочности вала
    Dim Pow_nom_w As Double   ' мощность приведенная к номинальной
    Pow_nom_w = m_Nm * w_radsec
    If Pow_nom_w < db_.shaft_power_limit_W Then
        CheckShaft = True
    ElseIf Pow_nom_w < db_.shaft_power_limit_max_W Then
        CheckShaft = False
        addLogMsg "Превышена нагрузка на вал. Требуется использовать вал повышенной прочности"
        ' здесь надо предпринимать действия по прочности вала
    Else
        CheckShaft = False
        addLogMsg "Превышена нагрузка на вал для вала повышенной прочности"
    End If
End Function
' свойство выдает момент на валу потребляемый насосом
Public Property Get m_Nm() As Double
    m_Nm = power_ESP_Wt_ / w_radsec
End Property
' функция расчета деградации из за газа
Private Function GasCorrection_d(GasFracIn As Double, Optional ESPtype As Integer = 0) As Double
Dim b As Double
    b = 0
    If GasFracIn > 0 And GasFracIn < 1 Then
        b = GasFracIn
    End If
    If ESPtype = 0 Then GasCorrection_d = 1
    If ESPtype = 1 Then
        GasCorrection_d = -9 * b ^ 2 + 0.6 * b + 1    ' SPE 117414
    End If
    If ESPtype = 2 Then
        GasCorrection_d = -2 * b ^ 2 + 0.05 * b + 1    ' SPE 117414  corrected rnt
    End If
    If ESPtype = 3 Then
        GasCorrection_d = -1.4 * b ^ 2 + 0.15 * b + 1    ' SPE 117414
    End If
    If ESPtype = 4 Then
        GasCorrection_d = -4 * b ^ 2 + 0.2 * b + 1    ' SPE 117414   corrected rnt
    End If
    If GasCorrection_d < 0 Then GasCorrection_d = 0
End Function

