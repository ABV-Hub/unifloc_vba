''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Cephes Math Library Release 2.8:  June, 2000
'Copyright 1984, 1987, 1988, 1992, 2000 by Stephen L. Moshier
'
'Contributors:
'    * Sergey Bochkanov (ALGLIB project). Translation from C to
'      pseudocode.
'
'See subroutines comments for additional copyrights.
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Error function
'
'The integral is
'
'                          x
'                           -
'                2         | |          2
'  erf(x)  =  --------     |    exp( - t  ) dt.
'             sqrt(pi)   | |
'                         -
'                          0
'
'For 0 <= |x| < 1, erf(x) = x * P4(x**2)/Q5(x**2); otherwise
'erf(x) = 1 - erfc(x).
'
'
'ACCURACY:
'
'                     Relative error:
'arithmetic   domain     # trials      peak         rms
'   IEEE      0,1         30000       3.7e-16     1.0e-16
'
'Cephes Math Library Release 2.8:  June, 2000
'Copyright 1984, 1987, 1988, 1992, 2000 by Stephen L. Moshier
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function Erf(ByVal X As Double) As Double
    Dim Result As Double
    Dim XSq As Double
    Dim S As Double
    Dim P As Double
    Dim q As Double
    S = Sgn(X)
    X = Abs(X)
    If X < 0.5 Then
        XSq = X * X
        P = 7.54772803341863E-03
        P = 0.288805137207594 + XSq * P
        P = 14.3383842191748 + XSq * P
        P = 38.0140318123903 + XSq * P
        P = 3017.82788536508 + XSq * P
        P = 7404.07142710151 + XSq * P
        P = 80437.363096084 + XSq * P
        q = 0#
        q = 1# + XSq * q
        q = 38.0190713951939 + XSq * q
        q = 658.07015545924 + XSq * q
        q = 6379.60017324428 + XSq * q
        q = 34216.5257924629 + XSq * q
        q = 80437.363096084 + XSq * q
        Result = S * 1.12837916709551 * X * P / q
        Erf = Result
        Exit Function
    End If
    If X >= 10# Then
        Result = S
        Erf = Result
        Exit Function
    End If
    Result = S * (1# - ErfC(X))
    Erf = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Complementary error function
'
' 1 - erf(x) =
'
'                          inf.
'                            -
'                 2         | |          2
'  erfc(x)  =  --------     |    exp( - t  ) dt
'              sqrt(pi)   | |
'                          -
'                           x
'
'
'For small x, erfc(x) = 1 - erf(x); otherwise rational
'approximations are computed.
'
'
'ACCURACY:
'
'                     Relative error:
'arithmetic   domain     # trials      peak         rms
'   IEEE      0,26.6417   30000       5.7e-14     1.5e-14
'
'Cephes Math Library Release 2.8:  June, 2000
'Copyright 1984, 1987, 1988, 1992, 2000 by Stephen L. Moshier
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function ErfC(ByVal X As Double) As Double
    Dim Result As Double
    Dim P As Double
    Dim q As Double
    If X < 0# Then
        Result = 2# - ErfC(-X)
        ErfC = Result
        Exit Function
    End If
    If X < 0.5 Then
        Result = 1# - Erf(X)
        ErfC = Result
        Exit Function
    End If
    If X >= 10# Then
        Result = 0#
        ErfC = Result
        Exit Function
    End If
    P = 0#
    P = 0.56418778255074 + X * P
    P = 9.67580788298727 + X * P
    P = 77.0816173036843 + X * P
    P = 368.519615471001 + X * P
    P = 1143.26207070389 + X * P
    P = 2320.43959025164 + X * P
    P = 2898.02932921677 + X * P
    P = 1826.33488422951 + X * P
    q = 1#
    q = 17.1498094362761 + X * q
    q = 137.125596050062 + X * q
    q = 661.736120710765 + X * q
    q = 2094.38436778954 + X * q
    q = 4429.61280388368 + X * q
    q = 6089.54242327244 + X * q
    q = 4958.82756472114 + X * q
    q = 1826.33488422951 + X * q
    Result = Exp(-Square(X)) * P / q
    ErfC = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Normal distribution function
'
'Returns the area under the Gaussian probability density
'function, integrated from minus infinity to x:
'
'                           x
'                            -
'                  1        | |          2
'   ndtr(x)  = ---------    |    exp( - t /2 ) dt
'              sqrt(2pi)  | |
'                          -
'                         -inf.
'
'            =  ( 1 + erf(z) ) / 2
'            =  erfc(z) / 2
'
'where z = x/sqrt(2). Computation is via the functions
'erf and erfc.
'
'
'ACCURACY:
'
'                     Relative error:
'arithmetic   domain     # trials      peak         rms
'   IEEE     -13,0        30000       3.4e-14     6.7e-15
'
'Cephes Math Library Release 2.8:  June, 2000
'Copyright 1984, 1987, 1988, 1992, 2000 by Stephen L. Moshier
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function NormalDistribution(ByVal X As Double) As Double
    Dim Result As Double
    Result = 0.5 * (Erf(X / 1.4142135623731) + 1#)
    NormalDistribution = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Inverse of the error function
'
'Cephes Math Library Release 2.8:  June, 2000
'Copyright 1984, 1987, 1988, 1992, 2000 by Stephen L. Moshier
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function InvErf(ByVal E As Double) As Double
    Dim Result As Double
    Result = InvNormalDistribution(0.5 * (E + 1#)) / Sqr(2#)
    InvErf = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Inverse of Normal distribution function
'
'Returns the argument, x, for which the area under the
'Gaussian probability density function (integrated from
'minus infinity to x) is equal to y.
'
'
'For small arguments 0 < y < exp(-2), the program computes
'z = sqrt( -2.0 * log(y) );  then the approximation is
'x = z - log(z)/z  - (1/z) P(1/z) / Q(1/z).
'There are two rational functions P/Q, one for 0 < y < exp(-32)
'and the other for y up to exp(-2).  For larger arguments,
'w = y - 0.5, and  x/sqrt(2pi) = w + w**3 R(w**2)/S(w**2)).
'
'ACCURACY:
'
'                     Relative error:
'arithmetic   domain        # trials      peak         rms
'   IEEE     0.125, 1        20000       7.2e-16     1.3e-16
'   IEEE     3e-308, 0.135   50000       4.6e-16     9.8e-17
'
'Cephes Math Library Release 2.8:  June, 2000
'Copyright 1984, 1987, 1988, 1992, 2000 by Stephen L. Moshier
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function InvNormalDistribution(ByVal y0 As Double) As Double
    Dim Result As Double
    Dim Expm2 As Double
    Dim S2Pi As Double
    Dim X As Double
    Dim Y As Double
    Dim z As Double
    Dim Y2 As Double
    Dim X0 As Double
    Dim X1 As Double
    Dim code As Long
    Dim P0 As Double
    Dim Q0 As Double
    Dim P1 As Double
    Dim Q1 As Double
    Dim P2 As Double
    Dim Q2 As Double
    Expm2 = 0.135335283236613
    S2Pi = 2.506628274631
    If y0 <= 0# Then
        Result = -MaxRealNumber
        InvNormalDistribution = Result
        Exit Function
    End If
    If y0 >= 1# Then
        Result = MaxRealNumber
        InvNormalDistribution = Result
        Exit Function
    End If
    code = 1#
    Y = y0
    If Y > 1# - Expm2 Then
        Y = 1# - Y
        code = 0#
    End If
    If Y > Expm2 Then
        Y = Y - 0.5
        Y2 = Y * Y
        P0 = -59.9633501014108
        P0 = 98.0010754186 + Y2 * P0
        P0 = -56.676285746907 + Y2 * P0
        P0 = 13.931260938728 + Y2 * P0
        P0 = -1.23916583867381 + Y2 * P0
        Q0 = 1#
        Q0 = 1.95448858338142 + Y2 * Q0
        Q0 = 4.67627912898882 + Y2 * Q0
        Q0 = 86.3602421390891 + Y2 * Q0
        Q0 = -225.462687854119 + Y2 * Q0
        Q0 = 200.260212380061 + Y2 * Q0
        Q0 = -82.0372256168333 + Y2 * Q0
        Q0 = 15.9056225126212 + Y2 * Q0
        Q0 = -1.1833162112133 + Y2 * Q0
        X = Y + Y * Y2 * P0 / Q0
        X = X * S2Pi
        Result = X
        InvNormalDistribution = Result
        Exit Function
    End If
    X = Sqr(-(2# * Log(Y)))
    X0 = X - Log(X) / X
    z = 1# / X
    If X < 8# Then
        P1 = 4.05544892305962
        P1 = 31.5251094599894 + z * P1
        P1 = 57.1628192246421 + z * P1
        P1 = 44.0805073893201 + z * P1
        P1 = 14.6849561928858 + z * P1
        P1 = 2.1866330685079 + z * P1
        P1 = -(1.40256079171354 * 0.1) + z * P1
        P1 = -(3.50424626827848 * 0.01) + z * P1
        P1 = -(8.57456785154685 * 0.0001) + z * P1
        Q1 = 1#
        Q1 = 15.7799883256467 + z * Q1
        Q1 = 45.3907635128879 + z * Q1
        Q1 = 41.3172038254672 + z * Q1
        Q1 = 15.0425385692908 + z * Q1
        Q1 = 2.50464946208309 + z * Q1
        Q1 = -(1.42182922854788 * 0.1) + z * Q1
        Q1 = -(3.80806407691578 * 0.01) + z * Q1
        Q1 = -(9.33259480895457 * 0.0001) + z * Q1
        X1 = z * P1 / Q1
    Else
        P2 = 3.23774891776946
        P2 = 6.91522889068984 + z * P2
        P2 = 3.93881025292474 + z * P2
        P2 = 1.33303460815808 + z * P2
        P2 = 2.01485389549179 * 0.1 + z * P2
        P2 = 1.2371663481782 * 0.01 + z * P2
        P2 = 3.01581553508235 * 0.0001 + z * P2
        P2 = 2.65806974686738 * 0.000001 + z * P2
        P2 = 6.23974539184983 * 0.000000001 + z * P2
        Q2 = 1#
        Q2 = 6.02427039364742 + z * Q2
        Q2 = 3.67983563856161 + z * Q2
        Q2 = 1.37702099489081 + z * Q2
        Q2 = 2.16236993594497 * 0.1 + z * Q2
        Q2 = 1.34204006088543 * 0.01 + z * Q2
        Q2 = 3.28014464682128 * 0.0001 + z * Q2
        Q2 = 2.89247864745381 * 0.000001 + z * Q2
        Q2 = 6.79019408009981 * 0.000000001 + z * Q2
        X1 = z * P2 / Q2
    End If
    X = X0 - X1
    If code <> 0# Then
        X = -X
    End If
    Result = X
    InvNormalDistribution = Result
End Function
