'=======================================================================================
'Unifloc 7.13  Lepus                                           khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2019
'
'=======================================================================================
' class factory functions
' модуль для функций поддержки работы классов
' содержит функции для того чтобы можно было создавать экземпляры классов из других файлов
Option Explicit
' функция генерации нового объекта траектории трубопровода или скважины
Public Function new_trajectory(hmes_habs_list_m, _
                               d_list_mm, _
                Optional ByVal roughness_m As Double = 0.0001) As CPipeTrajectory
' hmes_habs_list_m - инклинометрия - range или двухмерный массив или число,
'                    зависимость значений вертикальной глубины от измеренной,
'                    первый столбец - измеренная глубина, м
'                    второй столбец - вертикальная глубина, м
'                    если передано одно число - то будет задана вертикальная
'                    траектория заданной глубины
' d_list_mm - значения диаметров от измеренной глубины
'             range или двухмерный массив или число
'             первый столбец - измеренная глубина, м
'             второй столбец - диаметр трубы, мм
'             применяется от текущего значения глубины и до следующего
'             если передано одно число - то будет задан постоянный диаметр
'roughness_m - шероховатость, м. Задается одна для всей траектории.
' все параметры обязательно должны быть заданы
    Set new_trajectory = New CPipeTrajectory
    Call new_trajectory.init_from_vert_range(hmes_habs_list_m, d_list_mm)
    new_trajectory.roughness_m = roughness_m
    
End Function
' функция генерации нового объекта - трубопровода или участка скважины
Public Function new_pipeline(ByVal tr As CPipeTrajectory, _
                    Optional ByVal hmes_start_m As Variant, _
                    Optional ByVal hmes_end_m As Variant, _
                    Optional ByVal tr_cas As CPipeTrajectory, _
                    Optional ByVal fluid As CPVT, _
                    Optional ByVal amb As CAmbientFormation) As CPipe
' tr             - объект траектории трубопровода или скважины
' hmes_start_m   - начало трубы - измеренная длина по траектории
'                  если не задана то берется начало траектории
' hmes_end_m     - конец трубы - измеренная длина по траектории
'                  если не задана то берется конец траектории
' tr_cas         - дополнительная траектория с внешними диаметрами
'                  для скважины - траектория обсадной колонны
' fluid          - объект с параметрами флюида и потока в трубе
'                  если не задан то будет флюид с параметрами по умолчанию
' amb            - объект с параметрами теплообмена с окружающей средой
'                  если не задан то будет объект с параметрами по умолчанию
' результат      - на выходе объект трубопровода пригодный для проведения
'                  расчетов - все данные и параметры заданы
    Set new_pipeline = New CPipe
    new_pipeline.init_pipe_constr_by_trajectory tr, hmes_start_m, hmes_end_m, tr_cas
    If Not IsMissing(fluid) Then
        Set new_pipeline.fluid = fluid
    End If
    If Not IsMissing(amb) Then
        Set new_pipeline.ambient_formation = amb
    End If
End Function
' функция генерации нового объекта - пласта (заканчивания скважины)
Public Function new_reservoir(ByVal prod_index_sm3dayatm As Double, _
                              ByVal pres_atma As Double, _
                              ByVal fluid As CPVT _
                              ) As CReservoirVogel
' prod_index_sm3dayatm - коэффициент продуктивности
' pres_atma            - пластовое давление
' fluid                - объект с параметрами флюида и потока в пласте
    Set new_reservoir = New CReservoirVogel
    new_reservoir.InitProp pres_atma, fluid.pb_atma, fluid.fw_perc
    new_reservoir.PI_sm3dayatm = prod_index_sm3dayatm
End Function
' функция генерации нового объекта описывающего температуру окружающей среды и параметры теплообмена
Public Function new_ambient_formation(Optional ByVal h_perf_abs_m As Double = 3000, _
                                      Optional ByVal t_bh_C As Double = 100, _
                                      Optional ByVal t_wh_C As Double = 30, _
                                      Optional ByVal tamb_arr_hmes_m, _
                                      Optional ByVal tamb_arr_C) As CAmbientFormation
'h_perf_abs_m    - вертикальная глубина пласта (самая низкая точка по вертикали где задана температура)
't_bh_C          - температура пласта (самой низкой точки по вертикали)
't_wh_C          - температура поверхности (самой высокой точки по вертикали)
'tamb_arr_hmes_m - значения глубина для которых заданы температуры tamb_arr_C
'                  если задан то предполагается, что данные переданы одномерным массивом или range
'tamb_arr_C      - кривая распределения температуры по вертикали
'                  range или двумерный массив - температуры от вертикальной глубины (если не задан tamb_arr_hmes_m)
'                  range или одномерный массив - температуры, если задан tamb_arr_hmes_m
'если tamb_arr_C не задан - то объект инициализируется по точечным значениям h_perf_abs_m, t_bh_C, t_wh_C
'                если задан, то точечные значения игнорируются
    Set new_ambient_formation = New CAmbientFormation
    Call new_ambient_formation.init_amb_temp(h_perf_abs_m, t_bh_C, t_wh_C, tamb_arr_hmes_m, tamb_arr_C)
End Function
' функция генерации нового объекта описывающего параметры флюида и потока
Public Function new_PVT_fluid( _
                    Optional ByVal qliq_sm3day As Double = 0, _
                    Optional ByVal fw_perc As Double = 0, _
                    Optional ByVal gamma_gas As Double = const_gg_, _
                    Optional ByVal gamma_oil As Double = const_go_, _
                    Optional ByVal gamma_wat As Double = const_gw_, _
                    Optional ByVal rsb_m3m3 = const_rsb_default, _
                    Optional ByVal rp_m3m3 = -1, _
                    Optional ByVal pb_atma = -1, _
                    Optional ByVal tres_C = const_tres_default, _
                    Optional ByVal bob_m3m3 = -1, _
                    Optional ByVal muob_cP = -1, _
                    Optional ByVal PVTcorr = Standing_based, _
                    Optional ByVal ksep_fr = 0, _
                    Optional ByVal p_ksep_atma = -1, _
                    Optional ByVal t_ksep_C = -1, _
                    Optional ByVal gas_only As Boolean = False) As CPVT
' qliq_sm3day - дебит жидкости
' fw_perc   - обводненность
' gamma_gas - удельная плотность газа, по воздуху.
'             По умолчанию const_gg_ = 0.6
' gamma_oil - удельная плотность нефти, по воде.
'             По умолчанию const_go_ = 0.86
' gamma_wat - удельная плотность воды, по воде.
'             По умолчанию const_gw_ = 1
' rsb_m3m3  - газосодержание при давлении насыщения, м3/м3.
'             По умолчанию const_rsb_default = 100
' rp_m3m3 - замерной газовый фактор, м3/м3.
'           Имеет приоритет перед rsb если rp < rsb
' pb_atma - давление насыщения при  температуре tres_C, атма.
'           Опциональный калибровочный параметр,
'           если не задан или = 0, то рассчитается по корреляции.
' tres_C  - пластовая температура, С.
'           Учитывается при расчете давления насыщения.
'           По умолчанию  const_tres_default = 90
' bob_m3m3 - объемный коэффициент нефти при давлении насыщения
'            и пластовой температуре, м3/м3.
'            По умолчанию рассчитывается по корреляции.
' muob_cP  - вязкость нефти при давлении насыщения.
'            и пластовой температуре, сП.
'            По умолчанию рассчитывается по корреляции.
' PVTcorr - номер набора PVT корреляций для расчета:
'           0 - на основе корреляции Стендинга;
'           1 - на основе кор-ии Маккейна;
'           2 - на основе упрощенных зависимостей.
' ksep_fr - коэффициент сепарации - определяет изменение свойств
'           нефти после сепарации части свободного газа.
'           Зависит от давления и температуры
'           сепарации газа, которые должны быть явно заданы.
' p_ksep_atma - давление при которой была сепарация
' t_ksep_C    - температура при которой была сепарация
' gas_only   - флаг - в потоке только газ
'              по умолчанию False (нефть вода и газ)
    Dim PVT As New CPVT
    PVT.Init gamma_gas, gamma_oil, gamma_wat, rsb_m3m3, pb_atma, bob_m3m3, PVTcorr, tres_C, rp_m3m3, muob_cP
    PVT.gas_only = gas_only
    If ksep_fr > 0 And ksep_fr <= 1 And p_ksep_atma > 0 And t_ksep_C > 0 Then
        Call PVT.mod_after_separation(p_ksep_atma, t_ksep_C, ksep_fr, GasGoesIntoSolution)
    End If
    PVT.qliq_sm3day = qliq_sm3day
    PVT.fw_perc = fw_perc
    Set new_PVT_fluid = PVT ' создаем объект с базовым флюидом, с которым будем работать далее
End Function
' генерация класса скважины с простыми свойствами
Public Function new_well_factory( _
                          ByVal h_perf_m As Double, _
                 Optional ByVal h_tub_m As Double = 0, _
                 Optional ByVal udl_m As Double = 0, _
                 Optional ByVal d_cas_mm As Variant, _
                 Optional ByVal d_tub_mm As Variant, _
                 Optional ByVal well_type As Integer = 0, _
                 Optional ByVal incl_h_mes_m As Variant, _
                 Optional ByVal incl_h_vert_m As Variant, _
                 Optional ByVal dcas_arr_hmes_m As Variant, _
                 Optional ByVal dcas_arr_mm As Variant, _
                 Optional ByVal dtub_arr_hmes_m As Variant, _
                 Optional ByVal dtub_arr_mm As Variant, _
                 Optional ByVal tr_cas As CPipeTrajectory, _
                 Optional ByVal tr_tub As CPipeTrajectory, _
                 Optional ByVal fluid As CPVT, _
                 Optional ByVal amb As CAmbientFormation _
                                ) As Variant
' универсальный метод генерации объетов скважины (как ESP так и GL)
' можно задавать скважину несколькими вариантами
'   1. минимальный набор просты чисел
'           h_perf_m
'           h_tub_m
'           udl_m
'           d_cas_mm
'           d_tub_mm
'           well_type
'   2. расширенный набор с заданием инклинометрии и диаметров
'           h_perf_m
'           incl_h_mes_m
'           incl_h_vert_m
'           dcas_arr_hmes_m
'           dcas_arr_mm
'           dtub_arr_hmes_m
'           dtub_arr_mm
'           well_type
'   3. генерация из готовых траекторий для обсадной колонны и НКТ
'           h_perf_m
'           tr_cas
'           tr_tub
'           well_type
'
    Dim habs_curve_m As New CInterpolation
    Dim dcas_curve_mm As New CInterpolation
    Dim dtub_curve_mm As New CInterpolation
'    Dim wellESP As New CWellESP
'    Dim wellGL As New CWellGL
    Dim well As Variant
    Dim errmsg As String
    Dim rng As range
On Error GoTo err1:
    Select Case well_type
        Case 0
             Set well = New CWellESP
        Case 1
             Set well = New CWellESP
        Case 2
             Set well = New CWellGL
    End Select
    With well
        If IsMissing(tr_cas) Or IsMissing(tr_tub) Then
            ' проверим сначала конструкцию и инклинометрию скважины
            ' не делаем лишних проверок - ожидаем что прочитать получится
            If Not IsMissing(incl_h_mes_m) And IsMissing(incl_h_vert_m) Then
                Call habs_curve_m.loadFromVertRange(incl_h_mes_m) ' читаем инклинометрию из одной таблицы
            ElseIf Not IsMissing(incl_h_mes_m) And Not IsMissing(incl_h_vert_m) Then
                Call habs_curve_m.loadFromVertRange(incl_h_mes_m, incl_h_vert_m) ' читаем инклинометрию из двух столбцов
            ElseIf IsMissing(incl_h_mes_m) And IsMissing(incl_h_vert_m) Then
                habs_curve_m.AddPoint 0, 0
                habs_curve_m.AddPoint h_perf_m, h_perf_m - udl_m
            End If
            
    
            ' проверим диаметры эксплуатационной колонны
            If Not IsMissing(d_cas_mm) And Not IsNumeric(d_cas_mm) Then
                Call dcas_curve_mm.loadFromVertRange(d_cas_mm) ' читаем инклинометрию из одной таблицы
            ElseIf Not IsMissing(dcas_arr_mm) And IsMissing(dcas_arr_hmes_m) Then
                Call dcas_curve_mm.loadFromVertRange(dcas_arr_mm) ' читаем инклинометрию из одной таблицы
            ElseIf Not IsMissing(dcas_arr_mm) And Not IsMissing(dcas_arr_hmes_m) Then
                Call dcas_curve_mm.loadFromVertRange(dcas_arr_hmes_m, dcas_arr_mm) ' читаем инклинометрию из двух столбцов
            ElseIf IsMissing(dcas_arr_mm) And IsMissing(dcas_arr_hmes_m) Then
                dcas_curve_mm.AddPoint 0, d_cas_mm
                dcas_curve_mm.AddPoint h_perf_m, d_cas_mm
            End If
            
            ' проверим диаметры НКТ
            If Not IsMissing(d_tub_mm) And Not IsNumeric(d_tub_mm) Then
                Call dtub_curve_mm.loadFromVertRange(d_tub_mm) ' читаем инклинометрию из одной таблицы
            ElseIf Not IsMissing(dtub_arr_mm) And IsMissing(dtub_arr_hmes_m) Then
                Call dtub_curve_mm.loadFromVertRange(dtub_arr_mm) ' читаем инклинометрию из одной таблицы
            ElseIf Not IsMissing(dtub_arr_mm) And Not IsMissing(dtub_arr_hmes_m) Then
                Call dtub_curve_mm.loadFromVertRange(dtub_arr_hmes_m, dtub_arr_mm) ' читаем инклинометрию из двух столбцов
            ElseIf IsMissing(dtub_arr_mm) And IsMissing(dtub_arr_hmes_m) Then
                dtub_curve_mm.AddPoint 0, d_tub_mm
                dtub_curve_mm.AddPoint h_tub_m, d_tub_mm
            End If
            Call .trajectory_tub.init_from_curves(habs_curve_m, dtub_curve_mm)
            Call .trajectory_cas.init_from_curves(habs_curve_m, dcas_curve_mm)
        Else
            Set .trajectory_tub = tr_tub
            Set .trajectory_cas = tr_cas
        End If
        .h_perf_m = h_perf_m
        .h_tub_m = .trajectory_tub.bottom_m
        
        Call .FillWellConstructionTr
        If Not IsMissing(amb) Then
             Set .ambient_formation = amb
        End If
        If Not IsMissing(fluid) Then
            Set .fluid = fluid
        End If
    End With
    Set new_well_factory = well
    Exit Function
err1:
   errmsg = "new_well_factory: Ошибка простой инициализации скважины " & sDELIM & Err.Description
   Err.Raise kErrInitCalc, Err.Source, errmsg
    
End Function
' функция генерации нового объекта описывающего параметры газлифтной системы
Public Function new_GLV_set( _
                    Optional ByVal q_gas_inj_sm3day As Double = 0, _
                    Optional ByVal p_gas_inj_atma As Double = 0, _
                    Optional ByVal d_gas_inj_mm As Double = 0, _
                    Optional h_glv_m = 0, _
                    Optional d_glv_mm = 0, _
                    Optional p_glv_atma = 0) As CGLValveSet
' q_gas_inj_sm3day - расход газа закачки
' p_gas_inj_atma - давление газа закачки на поверхности
' d_gas_inj_mm - диаметр штуцера регулировки закачки газа на поверхности
' H_glv_m     - измеренные глубины установки газлифтных клапанов
' d_glv_mm       - диаметры порта установленных газлифтных клапанов
' p_glv_atma - давления зарядки газлифтных клапанов
' результат     - строка с закодированными параметрами
                    
Dim glv_set As New CGLValveSet
Dim harr() As Double
Dim darr() As Double
Dim parr() As Double
Dim i As Integer
        If IsNumeric(h_glv_m) Then
            ReDim harr(1)
            ReDim darr(1)
            ReDim parr(1)
            harr(0) = h_glv_m
            darr(0) = d_glv_mm
            parr(0) = p_glv_atma
        ElseIf IsArray(h_glv_m) Then
            ReDim harr(0 To UBound(h_glv_m) - LBound(h_glv_m))
            For i = LBound(h_glv_m) To UBound(h_glv_m)
                harr(i - LBound(h_glv_m)) = h_glv_m(i)
                darr(i - LBound(h_glv_m)) = d_glv_mm(i)
                parr(i - LBound(h_glv_m)) = p_glv_atma(i)
            Next i
        End If
        
        Call glv_set.loadFromArray(harr, darr, parr)
        glv_set.q_gas_inj_sm3day = q_gas_inj_sm3day
        glv_set.p_gas_inj_atma = p_gas_inj_atma
        glv_set.d_gas_inj_mm = d_gas_inj_mm
        
        Set new_GLV_set = glv_set
End Function
Public Function NewCPVT() As CPVT
   Set NewCPVT = New CPVT
End Function
Public Function new_ESP_sys() As CESPsystemSimple
    Set new_ESP_sys = New CESPsystemSimple
End Function
Public Function new_well() As CWellESP
    Set new_well = New CWellESP
End Function
Public Function new_well_GL() As CWellGL
    Set new_well_GL = New CWellGL
End Function
Public Function NewChoke() As Cchoke
   Set NewChoke = New Cchoke
End Function
Public Function NewCurve() As CInterpolation
   Set NewCurve = New CInterpolation
End Function
Public Function NewCPipe() As CPipe
    Set NewCPipe = New CPipe
End Function
Public Function NewTRFacade() As C_TR_Facade
    Set NewTRFacade = New C_TR_Facade
End Function

