''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'ARGONNE NATIONAL LABORATORY. MINPACK PROJECT. JUNE 1983
'JORGE J. MORE', DAVID J. THUENTE
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Data types
Public Type LINMINState
    BRACKT As Boolean
    STAGE1 As Boolean
    INFOC As Long
    DG As Double
    DGM As Double
    DGINIT As Double
    DGTEST As Double
    DGX As Double
    DGXM As Double
    DGY As Double
    DGYM As Double
    FINIT As Double
    FTEST1 As Double
    FM As Double
    FX As Double
    FXM As Double
    FY As Double
    FYM As Double
    STX As Double
    STY As Double
    STMIN As Double
    STMAX As Double
    WIDTH As Double
    WIDTH1 As Double
    XTRAPF As Double
End Type
'Global constants
Private Const FTOL As Double = 0.001
Private Const XTOL As Double = 100# * MachineEpsilon
Private Const GTOL As Double = 0.3
Private Const MAXFEV As Long = 20#
Private Const STPMIN As Double = 1E-50
Private Const DefSTPMAX As Double = 1E+50
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Normalizes direction/step pair: makes |D|=1, scales Stp.
'If |D|=0, it returns, leavind D/Stp unchanged.
'
'  -- ALGLIB --
'     Copyright 01.04.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub LinMinNormalizeD(ByRef D() As Double, _
         ByRef STP As Double, _
         ByVal N As Long)
    Dim MX As Double
    Dim S As Double
    Dim i As Long
    Dim i_ As Long
    
    '
    ' first, scale D to avoid underflow/overflow durng squaring
    '
    MX = 0#
    For i = 0# To N - 1# Step 1
        MX = MaxReal(MX, Abs(D(i)))
    Next i
    If MX = 0# Then
        Exit Sub
    End If
    S = 1# / MX
    For i_ = 0# To N - 1# Step 1
        D(i_) = S * D(i_)
    Next i_
    STP = STP / S
    
    '
    ' normalize D
    '
    S = 0#
    For i_ = 0# To N - 1# Step 1
        S = S + D(i_) * D(i_)
    Next i_
    S = 1# / Sqr(S)
    For i_ = 0# To N - 1# Step 1
        D(i_) = S * D(i_)
    Next i_
    STP = STP / S
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'THE  PURPOSE  OF  MCSRCH  IS  TO  FIND A STEP WHICH SATISFIES A SUFFICIENT
'DECREASE CONDITION AND A CURVATURE CONDITION.
'
'AT EACH STAGE THE SUBROUTINE  UPDATES  AN  INTERVAL  OF  UNCERTAINTY  WITH
'ENDPOINTS  STX  AND  STY.  THE INTERVAL OF UNCERTAINTY IS INITIALLY CHOSEN
'SO THAT IT CONTAINS A MINIMIZER OF THE MODIFIED FUNCTION
'
'    F(X+STP*S) - F(X) - FTOL*STP*(GRADF(X)'S).
'
'IF  A STEP  IS OBTAINED FOR  WHICH THE MODIFIED FUNCTION HAS A NONPOSITIVE
'FUNCTION  VALUE  AND  NONNEGATIVE  DERIVATIVE,   THEN   THE   INTERVAL  OF
'UNCERTAINTY IS CHOSEN SO THAT IT CONTAINS A MINIMIZER OF F(X+STP*S).
'
'THE  ALGORITHM  IS  DESIGNED TO FIND A STEP WHICH SATISFIES THE SUFFICIENT
'DECREASE CONDITION
'
'    F(X+STP*S) .LE. F(X) + FTOL*STP*(GRADF(X)'S),
'
'AND THE CURVATURE CONDITION
'
'    ABS(GRADF(X+STP*S)'S)) .LE. GTOL*ABS(GRADF(X)'S).
'
'IF  FTOL  IS  LESS  THAN GTOL AND IF, FOR EXAMPLE, THE FUNCTION IS BOUNDED
'BELOW,  THEN  THERE  IS  ALWAYS  A  STEP  WHICH SATISFIES BOTH CONDITIONS.
'IF  NO  STEP  CAN BE FOUND  WHICH  SATISFIES  BOTH  CONDITIONS,  THEN  THE
'ALGORITHM  USUALLY STOPS  WHEN  ROUNDING ERRORS  PREVENT FURTHER PROGRESS.
'IN THIS CASE STP ONLY SATISFIES THE SUFFICIENT DECREASE CONDITION.
'
'PARAMETERS DESCRIPRION
'
'N IS A POSITIVE INTEGER INPUT VARIABLE SET TO THE NUMBER OF VARIABLES.
'
'X IS  AN  ARRAY  OF  LENGTH N. ON INPUT IT MUST CONTAIN THE BASE POINT FOR
'THE LINE SEARCH. ON OUTPUT IT CONTAINS X+STP*S.
'
'F IS  A  VARIABLE. ON INPUT IT MUST CONTAIN THE VALUE OF F AT X. ON OUTPUT
'IT CONTAINS THE VALUE OF F AT X + STP*S.
'
'G IS AN ARRAY OF LENGTH N. ON INPUT IT MUST CONTAIN THE GRADIENT OF F AT X.
'ON OUTPUT IT CONTAINS THE GRADIENT OF F AT X + STP*S.
'
'S IS AN INPUT ARRAY OF LENGTH N WHICH SPECIFIES THE SEARCH DIRECTION.
'
'STP  IS  A NONNEGATIVE VARIABLE. ON INPUT STP CONTAINS AN INITIAL ESTIMATE
'OF A SATISFACTORY STEP. ON OUTPUT STP CONTAINS THE FINAL ESTIMATE.
'
'FTOL AND GTOL ARE NONNEGATIVE INPUT VARIABLES. TERMINATION OCCURS WHEN THE
'SUFFICIENT DECREASE CONDITION AND THE DIRECTIONAL DERIVATIVE CONDITION ARE
'SATISFIED.
'
'XTOL IS A NONNEGATIVE INPUT VARIABLE. TERMINATION OCCURS WHEN THE RELATIVE
'WIDTH OF THE INTERVAL OF UNCERTAINTY IS AT MOST XTOL.
'
'STPMIN AND STPMAX ARE NONNEGATIVE INPUT VARIABLES WHICH SPECIFY LOWER  AND
'UPPER BOUNDS FOR THE STEP.
'
'MAXFEV IS A POSITIVE INTEGER INPUT VARIABLE. TERMINATION OCCURS WHEN THE
'NUMBER OF CALLS TO FCN IS AT LEAST MAXFEV BY THE END OF AN ITERATION.
'
'INFO IS AN INTEGER OUTPUT VARIABLE SET AS FOLLOWS:
'    INFO = 0  IMPROPER INPUT PARAMETERS.
'
'    INFO = 1  THE SUFFICIENT DECREASE CONDITION AND THE
'              DIRECTIONAL DERIVATIVE CONDITION HOLD.
'
'    INFO = 2  RELATIVE WIDTH OF THE INTERVAL OF UNCERTAINTY
'              IS AT MOST XTOL.
'
'    INFO = 3  NUMBER OF CALLS TO FCN HAS REACHED MAXFEV.
'
'    INFO = 4  THE STEP IS AT THE LOWER BOUND STPMIN.
'
'    INFO = 5  THE STEP IS AT THE UPPER BOUND STPMAX.
'
'    INFO = 6  ROUNDING ERRORS PREVENT FURTHER PROGRESS.
'              THERE MAY NOT BE A STEP WHICH SATISFIES THE
'              SUFFICIENT DECREASE AND CURVATURE CONDITIONS.
'              TOLERANCES MAY BE TOO SMALL.
'
'NFEV IS AN INTEGER OUTPUT VARIABLE SET TO THE NUMBER OF CALLS TO FCN.
'
'WA IS A WORK ARRAY OF LENGTH N.
'
'ARGONNE NATIONAL LABORATORY. MINPACK PROJECT. JUNE 1983
'JORGE J. MORE', DAVID J. THUENTE
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MCSRCH(ByRef N As Long, _
         ByRef X() As Double, _
         ByRef F As Double, _
         ByRef G() As Double, _
         ByRef S() As Double, _
         ByRef STP As Double, _
         ByVal STPMAX As Double, _
         ByRef Info As Long, _
         ByRef NFEV As Long, _
         ByRef WA() As Double, _
         ByRef State As LINMINState, _
         ByRef Stage As Long)
    Dim V As Double
    Dim P5 As Double
    Dim P66 As Double
    Dim ZERO As Double
    Dim i_ As Long
    
    '
    ' init
    '
    P5 = 0.5
    P66 = 0.66
    State.XTRAPF = 4#
    ZERO = 0#
    If STPMAX = 0# Then
        STPMAX = DefSTPMAX
    End If
    If STP < STPMIN Then
        STP = STPMIN
    End If
    If STP > STPMAX Then
        STP = STPMAX
    End If
    
    '
    ' Main cycle
    '
    Do While True
        If Stage = 0# Then
            
            '
            ' NEXT
            '
            Stage = 2#
            GoTo Cont_1
        End If
        If Stage = 2# Then
            State.INFOC = 1#
            Info = 0#
            
            '
            '     CHECK THE INPUT PARAMETERS FOR ERRORS.
            '
            If N <= 0# Or STP <= 0# Or FTOL < 0# Or GTOL < ZERO Or XTOL < ZERO Or STPMIN < ZERO Or STPMAX < STPMIN Or MAXFEV <= 0# Then
                Stage = 0#
                Exit Sub
            End If
            
            '
            '     COMPUTE THE INITIAL GRADIENT IN THE SEARCH DIRECTION
            '     AND CHECK THAT S IS A DESCENT DIRECTION.
            '
            V = 0#
            For i_ = 0# To N - 1# Step 1
                V = V + G(i_) * S(i_)
            Next i_
            State.DGINIT = V
            If State.DGINIT >= 0# Then
                Stage = 0#
                Exit Sub
            End If
            
            '
            '     INITIALIZE LOCAL VARIABLES.
            '
            State.BRACKT = False
            State.STAGE1 = True
            NFEV = 0#
            State.FINIT = F
            State.DGTEST = FTOL * State.DGINIT
            State.WIDTH = STPMAX - STPMIN
            State.WIDTH1 = State.WIDTH / P5
            For i_ = 0# To N - 1# Step 1
                WA(i_) = X(i_)
            Next i_
            
            '
            '     THE VARIABLES STX, FX, DGX CONTAIN THE VALUES OF THE STEP,
            '     FUNCTION, AND DIRECTIONAL DERIVATIVE AT THE BEST STEP.
            '     THE VARIABLES STY, FY, DGY CONTAIN THE VALUE OF THE STEP,
            '     FUNCTION, AND DERIVATIVE AT THE OTHER ENDPOINT OF
            '     THE INTERVAL OF UNCERTAINTY.
            '     THE VARIABLES STP, F, DG CONTAIN THE VALUES OF THE STEP,
            '     FUNCTION, AND DERIVATIVE AT THE CURRENT STEP.
            '
            State.STX = 0#
            State.FX = State.FINIT
            State.DGX = State.DGINIT
            State.STY = 0#
            State.FY = State.FINIT
            State.DGY = State.DGINIT
            
            '
            ' NEXT
            '
            Stage = 3#
            GoTo Cont_1
        End If
        If Stage = 3# Then
            
            '
            '     START OF ITERATION.
            '
            '     SET THE MINIMUM AND MAXIMUM STEPS TO CORRESPOND
            '     TO THE PRESENT INTERVAL OF UNCERTAINTY.
            '
            If State.BRACKT Then
                If State.STX < State.STY Then
                    State.STMIN = State.STX
                    State.STMAX = State.STY
                Else
                    State.STMIN = State.STY
                    State.STMAX = State.STX
                End If
            Else
                State.STMIN = State.STX
                State.STMAX = STP + State.XTRAPF * (STP - State.STX)
            End If
            
            '
            '        FORCE THE STEP TO BE WITHIN THE BOUNDS STPMAX AND STPMIN.
            '
            If STP > STPMAX Then
                STP = STPMAX
            End If
            If STP < STPMIN Then
                STP = STPMIN
            End If
            
            '
            '        IF AN UNUSUAL TERMINATION IS TO OCCUR THEN LET
            '        STP BE THE LOWEST POINT OBTAINED SO FAR.
            '
            If State.BRACKT And (STP <= State.STMIN Or STP >= State.STMAX) Or NFEV >= MAXFEV - 1# Or State.INFOC = 0# Or State.BRACKT And State.STMAX - State.STMIN <= XTOL * State.STMAX Then
                STP = State.STX
            End If
            
            '
            '        EVALUATE THE FUNCTION AND GRADIENT AT STP
            '        AND COMPUTE THE DIRECTIONAL DERIVATIVE.
            '
            For i_ = 0# To N - 1# Step 1
                X(i_) = WA(i_)
            Next i_
            For i_ = 0# To N - 1# Step 1
                X(i_) = X(i_) + STP * S(i_)
            Next i_
            
            '
            ' NEXT
            '
            Stage = 4#
            Exit Sub
        End If
        If Stage = 4# Then
            Info = 0#
            NFEV = NFEV + 1#
            V = 0#
            For i_ = 0# To N - 1# Step 1
                V = V + G(i_) * S(i_)
            Next i_
            State.DG = V
            State.FTEST1 = State.FINIT + STP * State.DGTEST
            
            '
            '        TEST FOR CONVERGENCE.
            '
            If State.BRACKT And (STP <= State.STMIN Or STP >= State.STMAX) Or State.INFOC = 0# Then
                Info = 6#
            End If
            If STP = STPMAX And F <= State.FTEST1 And State.DG <= State.DGTEST Then
                Info = 5#
            End If
            If STP = STPMIN And (F > State.FTEST1 Or State.DG >= State.DGTEST) Then
                Info = 4#
            End If
            If NFEV >= MAXFEV Then
                Info = 3#
            End If
            If State.BRACKT And State.STMAX - State.STMIN <= XTOL * State.STMAX Then
                Info = 2#
            End If
            If F <= State.FTEST1 And Abs(State.DG) <= -(GTOL * State.DGINIT) Then
                Info = 1#
            End If
            
            '
            '        CHECK FOR TERMINATION.
            '
            If Info <> 0# Then
                Stage = 0#
                Exit Sub
            End If
            
            '
            '        IN THE FIRST STAGE WE SEEK A STEP FOR WHICH THE MODIFIED
            '        FUNCTION HAS A NONPOSITIVE VALUE AND NONNEGATIVE DERIVATIVE.
            '
            If State.STAGE1 And F <= State.FTEST1 And State.DG >= MinReal(FTOL, GTOL) * State.DGINIT Then
                State.STAGE1 = False
            End If
            
            '
            '        A MODIFIED FUNCTION IS USED TO PREDICT THE STEP ONLY IF
            '        WE HAVE NOT OBTAINED A STEP FOR WHICH THE MODIFIED
            '        FUNCTION HAS A NONPOSITIVE FUNCTION VALUE AND NONNEGATIVE
            '        DERIVATIVE, AND IF A LOWER FUNCTION VALUE HAS BEEN
            '        OBTAINED BUT THE DECREASE IS NOT SUFFICIENT.
            '
            If State.STAGE1 And F <= State.FX And F > State.FTEST1 Then
                
                '
                '           DEFINE THE MODIFIED FUNCTION AND DERIVATIVE VALUES.
                '
                State.FM = F - STP * State.DGTEST
                State.FXM = State.FX - State.STX * State.DGTEST
                State.FYM = State.FY - State.STY * State.DGTEST
                State.DGM = State.DG - State.DGTEST
                State.DGXM = State.DGX - State.DGTEST
                State.DGYM = State.DGY - State.DGTEST
                
                '
                '           CALL CSTEP TO UPDATE THE INTERVAL OF UNCERTAINTY
                '           AND TO COMPUTE THE NEW STEP.
                '
                Call MCSTEP(State.STX, State.FXM, State.DGXM, State.STY, State.FYM, State.DGYM, STP, State.FM, State.DGM, State.BRACKT, State.STMIN, State.STMAX, State.INFOC)
                
                '
                '           RESET THE FUNCTION AND GRADIENT VALUES FOR F.
                '
                State.FX = State.FXM + State.STX * State.DGTEST
                State.FY = State.FYM + State.STY * State.DGTEST
                State.DGX = State.DGXM + State.DGTEST
                State.DGY = State.DGYM + State.DGTEST
            Else
                
                '
                '           CALL MCSTEP TO UPDATE THE INTERVAL OF UNCERTAINTY
                '           AND TO COMPUTE THE NEW STEP.
                '
                Call MCSTEP(State.STX, State.FX, State.DGX, State.STY, State.FY, State.DGY, STP, F, State.DG, State.BRACKT, State.STMIN, State.STMAX, State.INFOC)
            End If
            
            '
            '        FORCE A SUFFICIENT DECREASE IN THE SIZE OF THE
            '        INTERVAL OF UNCERTAINTY.
            '
            If State.BRACKT Then
                If Abs(State.STY - State.STX) >= P66 * State.WIDTH1 Then
                    STP = State.STX + P5 * (State.STY - State.STX)
                End If
                State.WIDTH1 = State.WIDTH
                State.WIDTH = Abs(State.STY - State.STX)
            End If
            
            '
            '  NEXT.
            '
            Stage = 3#
            GoTo Cont_1
        End If
Cont_1:
    Loop
End Sub
Private Sub MCSTEP(ByRef STX As Double, _
         ByRef FX As Double, _
         ByRef DX As Double, _
         ByRef STY As Double, _
         ByRef FY As Double, _
         ByRef DY As Double, _
         ByRef STP As Double, _
         ByRef FP As Double, _
         ByRef DP As Double, _
         ByRef BRACKT As Boolean, _
         ByRef STMIN As Double, _
         ByRef STMAX As Double, _
         ByRef Info As Long)
    Dim BOUND As Boolean
    Dim GAMMA As Double
    Dim P As Double
    Dim Q As Double
    Dim R As Double
    Dim S As Double
    Dim SGND As Double
    Dim STPC As Double
    Dim STPF As Double
    Dim STPQ As Double
    Dim THETA As Double
    Info = 0#
    
    '
    '     CHECK THE INPUT PARAMETERS FOR ERRORS.
    '
    If BRACKT And (STP <= MinReal(STX, STY) Or STP >= MaxReal(STX, STY)) Or DX * (STP - STX) >= 0# Or STMAX < STMIN Then
        Exit Sub
    End If
    
    '
    '     DETERMINE IF THE DERIVATIVES HAVE OPPOSITE SIGN.
    '
    SGND = DP * (DX / Abs(DX))
    
    '
    '     FIRST CASE. A HIGHER FUNCTION VALUE.
    '     THE MINIMUM IS BRACKETED. IF THE CUBIC STEP IS CLOSER
    '     TO STX THAN THE QUADRATIC STEP, THE CUBIC STEP IS TAKEN,
    '     ELSE THE AVERAGE OF THE CUBIC AND QUADRATIC STEPS IS TAKEN.
    '
    If FP > FX Then
        Info = 1#
        BOUND = True
        THETA = 3# * (FX - FP) / (STP - STX) + DX + DP
        S = MaxReal(Abs(THETA), MaxReal(Abs(DX), Abs(DP)))
        GAMMA = S * Sqr(Square(THETA / S) - DX / S * (DP / S))
        If STP < STX Then
            GAMMA = -GAMMA
        End If
        P = GAMMA - DX + THETA
        Q = GAMMA - DX + GAMMA + DP
        R = P / Q
        STPC = STX + R * (STP - STX)
        STPQ = STX + DX / ((FX - FP) / (STP - STX) + DX) / 2# * (STP - STX)
        If Abs(STPC - STX) < Abs(STPQ - STX) Then
            STPF = STPC
        Else
            STPF = STPC + (STPQ - STPC) / 2#
        End If
        BRACKT = True
    Else
        If SGND < 0# Then
            
            '
            '     SECOND CASE. A LOWER FUNCTION VALUE AND DERIVATIVES OF
            '     OPPOSITE SIGN. THE MINIMUM IS BRACKETED. IF THE CUBIC
            '     STEP IS CLOSER TO STX THAN THE QUADRATIC (SECANT) STEP,
            '     THE CUBIC STEP IS TAKEN, ELSE THE QUADRATIC STEP IS TAKEN.
            '
            Info = 2#
            BOUND = False
            THETA = 3# * (FX - FP) / (STP - STX) + DX + DP
            S = MaxReal(Abs(THETA), MaxReal(Abs(DX), Abs(DP)))
            GAMMA = S * Sqr(Square(THETA / S) - DX / S * (DP / S))
            If STP > STX Then
                GAMMA = -GAMMA
            End If
            P = GAMMA - DP + THETA
            Q = GAMMA - DP + GAMMA + DX
            R = P / Q
            STPC = STP + R * (STX - STP)
            STPQ = STP + DP / (DP - DX) * (STX - STP)
            If Abs(STPC - STP) > Abs(STPQ - STP) Then
                STPF = STPC
            Else
                STPF = STPQ
            End If
            BRACKT = True
        Else
            If Abs(DP) < Abs(DX) Then
                
                '
                '     THIRD CASE. A LOWER FUNCTION VALUE, DERIVATIVES OF THE
                '     SAME SIGN, AND THE MAGNITUDE OF THE DERIVATIVE DECREASES.
                '     THE CUBIC STEP IS ONLY USED IF THE CUBIC TENDS TO INFINITY
                '     IN THE DIRECTION OF THE STEP OR IF THE MINIMUM OF THE CUBIC
                '     IS BEYOND STP. OTHERWISE THE CUBIC STEP IS DEFINED TO BE
                '     EITHER STPMIN OR STPMAX. THE QUADRATIC (SECANT) STEP IS ALSO
                '     COMPUTED AND IF THE MINIMUM IS BRACKETED THEN THE THE STEP
                '     CLOSEST TO STX IS TAKEN, ELSE THE STEP FARTHEST AWAY IS TAKEN.
                '
                Info = 3#
                BOUND = True
                THETA = 3# * (FX - FP) / (STP - STX) + DX + DP
                S = MaxReal(Abs(THETA), MaxReal(Abs(DX), Abs(DP)))
                
                '
                '        THE CASE GAMMA = 0 ONLY ARISES IF THE CUBIC DOES NOT TEND
                '        TO INFINITY IN THE DIRECTION OF THE STEP.
                '
                GAMMA = S * Sqr(MaxReal(0#, Square(THETA / S) - DX / S * (DP / S)))
                If STP > STX Then
                    GAMMA = -GAMMA
                End If
                P = GAMMA - DP + THETA
                Q = GAMMA + (DX - DP) + GAMMA
                R = P / Q
                If R < 0# And GAMMA <> 0# Then
                    STPC = STP + R * (STX - STP)
                Else
                    If STP > STX Then
                        STPC = STMAX
                    Else
                        STPC = STMIN
                    End If
                End If
                STPQ = STP + DP / (DP - DX) * (STX - STP)
                If BRACKT Then
                    If Abs(STP - STPC) < Abs(STP - STPQ) Then
                        STPF = STPC
                    Else
                        STPF = STPQ
                    End If
                Else
                    If Abs(STP - STPC) > Abs(STP - STPQ) Then
                        STPF = STPC
                    Else
                        STPF = STPQ
                    End If
                End If
            Else
                
                '
                '     FOURTH CASE. A LOWER FUNCTION VALUE, DERIVATIVES OF THE
                '     SAME SIGN, AND THE MAGNITUDE OF THE DERIVATIVE DOES
                '     NOT DECREASE. IF THE MINIMUM IS NOT BRACKETED, THE STEP
                '     IS EITHER STPMIN OR STPMAX, ELSE THE CUBIC STEP IS TAKEN.
                '
                Info = 4#
                BOUND = False
                If BRACKT Then
                    THETA = 3# * (FP - FY) / (STY - STP) + DY + DP
                    S = MaxReal(Abs(THETA), MaxReal(Abs(DY), Abs(DP)))
                    GAMMA = S * Sqr(Square(THETA / S) - DY / S * (DP / S))
                    If STP > STY Then
                        GAMMA = -GAMMA
                    End If
                    P = GAMMA - DP + THETA
                    Q = GAMMA - DP + GAMMA + DY
                    R = P / Q
                    STPC = STP + R * (STY - STP)
                    STPF = STPC
                Else
                    If STP > STX Then
                        STPF = STMAX
                    Else
                        STPF = STMIN
                    End If
                End If
            End If
        End If
    End If
    
    '
    '     UPDATE THE INTERVAL OF UNCERTAINTY. THIS UPDATE DOES NOT
    '     DEPEND ON THE NEW STEP OR THE CASE ANALYSIS ABOVE.
    '
    If FP > FX Then
        STY = STP
        FY = FP
        DY = DP
    Else
        If SGND < 0# Then
            STY = STX
            FY = FX
            DY = DX
        End If
        STX = STP
        FX = FP
        DX = DP
    End If
    
    '
    '     COMPUTE THE NEW STEP AND SAFEGUARD IT.
    '
    STPF = MinReal(STMAX, STPF)
    STPF = MaxReal(STMIN, STPF)
    STP = STPF
    If BRACKT And BOUND Then
        If STY > STX Then
            STP = MinReal(STX + 0.66 * (STY - STX), STP)
        Else
            STP = MaxReal(STX + 0.66 * (STY - STX), STP)
        End If
    End If
End Sub
