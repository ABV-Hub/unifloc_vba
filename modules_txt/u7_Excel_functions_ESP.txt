'=======================================================================================
'Unifloc 7.24  coronav                                          khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2019
'
'=======================================================================================
' функции для проведения расчетов по режимам работы УЭЦН из интерфейса Excel
Option Explicit
' =============== функции для расчета УЭЦН  ============================
'
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' номинальный напор ЭЦН (на основе каталога ЭЦН)
' учитывается поправка на вязкость
Public Function ESP_head_m( _
        ByVal qliq_m3day As Double, _
        Optional ByVal num_stages As Integer = 1, _
        Optional ByVal freq_Hz As Double = 50, _
        Optional ByVal pump_id = 674, _
        Optional ByVal mu_cSt As Double = -1, _
        Optional ByVal c_calibr = 1) As Double
' qliq_m3day - дебит жидкости в условиях насоса (стенд)
' num_stages  - количество ступеней
' freq_Hz    - частота вращения насоса
' pump_id    - номер насоса в базе данных
' mu_cSt     - вязкость жидкости, сСт;
' c_calibr    - коэффициент поправки на напор.
'               если массив то второе значение - поправыка на подачу (множитель)
'               третье на мощность (множитель)
'description_end
On Error GoTo err1:
    If Not checkID_ESP(pump_id) Then
        ESP_head_m = 0
        Exit Function
    End If
    
    Dim c_calibr_head As Double
    Dim c_calibr_rate As Double
    Dim c_calibr_power As Double
    Call read_ESP_calibr(c_calibr, c_calibr_head, c_calibr_rate, c_calibr_power)
    
    ESP.freq_Hz = freq_Hz
    ESP.stage_num = num_stages
    qliq_m3day = qliq_m3day / c_calibr_rate
    ESP_head_m = ESP.get_ESP_head_m(qliq_m3day, num_stages, mu_cSt)
    ESP_head_m = ESP_head_m * c_calibr_head
    Exit Function
err1:
    ESP_head_m = -1
    addLogMsg "Error:ESP_head_m:" & Err.Description
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' номинальная мощность потребляемая ЭЦН с вала (на основе каталога ЭЦН)
' учитывается поправка на вязкость
Public Function ESP_power_W( _
        ByVal qliq_m3day As Double, _
        Optional ByVal num_stages As Integer = 1, _
        Optional ByVal freq_Hz As Double = 50, _
        Optional ByVal pump_id = 674, _
        Optional ByVal mu_cSt As Double = -1, _
        Optional ByVal c_calibr = 1) As Double
' мощность УЭЦН номинальная потребляемая
' qliq_m3day - дебит жидкости в условиях насоса (стенд)
' num_stages  - количество ступеней
' freq_Hz       - частота вращения насоса
' pump_id     - номер насоса в базе данных
' mu_cSt     - вязкость жидкости
' c_calibr    - коэффициент поправки на напор.
'               если массив то второе значение - поправыка на подачу (множитель)
'               третье на мощность (множитель)
'description_end
    
On Error GoTo err1:
    If Not checkID_ESP(pump_id) Then
        ESP_power_W = 0
        Exit Function
    End If
    
    Dim c_calibr_head As Double
    Dim c_calibr_rate As Double
    Dim c_calibr_power As Double
    Call read_ESP_calibr(c_calibr, c_calibr_head, c_calibr_rate, c_calibr_power)
    
    ESP.freq_Hz = freq_Hz
    ESP.stage_num = num_stages
    qliq_m3day = qliq_m3day / c_calibr_rate
    ESP_power_W = ESP.get_ESP_power_W(qliq_m3day, num_stages, mu_cSt)
    ESP_power_W = ESP_power_W * c_calibr_power
    Exit Function
err1:
    ESP_power_W = -1
    addLogMsg "Error:ESP_power_W:" & Err.Description
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' номинальный КПД ЭЦН (на основе каталога ЭЦН)
' учитывается поправка на вязкость
Public Function ESP_eff_fr( _
        ByVal qliq_m3day As Double, _
        Optional ByVal num_stages As Integer = 1, _
        Optional ByVal freq_Hz As Double = 50, _
        Optional ByVal pump_id = 674, _
        Optional ByVal mu_cSt As Double = -1, _
        Optional ByVal c_calibr = 1) As Double
' qliq_m3day - дебит жидкости в условиях насоса (стенд)
' num_stages  - количество ступеней
' freq_Hz       - частота вращения насоса
' pump_id     - номер насоса в базе данных
' mu_cSt     - вязкость жидкости
' c_calibr    - коэффициент поправки на напор.
'               если массив то второе значение - поправыка на подачу (множитель)
'               третье на мощность (множитель)
'description_end
    
On Error GoTo err1:
    
    If Not checkID_ESP(pump_id) Then
        ESP_eff_fr = 0
        Exit Function
    End If
    
    Dim c_calibr_head As Double
    Dim c_calibr_rate As Double
    Dim c_calibr_power As Double
    Call read_ESP_calibr(c_calibr, c_calibr_head, c_calibr_rate, c_calibr_power)
    
    ESP.freq_Hz = freq_Hz
    ESP.stage_num = num_stages
    qliq_m3day = qliq_m3day / c_calibr_rate
    ESP.correct_visc = True
    ESP_eff_fr = ESP.get_ESP_effeciency_fr(qliq_m3day, mu_cSt)
    ESP_eff_fr = ESP_eff_fr * c_calibr_head * c_calibr_rate / c_calibr_power
    Exit Function
err1:
    ESP_eff_fr = -1
    addLogMsg "Error:ESP_eff_fr:" & Err.Description
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' название ЭЦН по номеру
Public Function ESP_name(Optional ByVal pump_id = 674) As String
' pump_id    - идентификатор насоса в базе данных
' результат - название насоса
'description_end
    
On Error GoTo err1:
    If Not checkID_ESP(pump_id) Then
        ESP_name = ""
        Exit Function
    End If
    ESP_name = ESP.db.name
    
    Exit Function
err1:
    ESP_name = -1
    addLogMsg "Error:ESP_name:" & Err.Description
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' максимальный дебит ЭЦН для заданной частоты
' по номинальной кривой РНХ
Public Function ESP_rate_max_sm3day( _
    Optional ByVal freq_Hz As Double = 50, _
    Optional ByVal pump_id = 674, _
    Optional ByVal mu_cSt As Double = -1) As Double
' freq_Hz   - частота вращения ЭЦН
' pump_id    - идентификатор насоса в базе данных
'description_end
On Error GoTo err1:
    If Not checkID_ESP(pump_id) Then
        ESP_rate_max_sm3day = 0
        Exit Function
    End If
    ESP.freq_Hz = freq_Hz
    ESP_rate_max_sm3day = ESP.rate_max_sm3day(mu_cSt)
    Exit Function
err1:
    ESP_rate_max_sm3day = -1
    addLogMsg "Error:ESP_rate_max_sm3day:" & Err.Description
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' оптимальный дебит ЭЦН для заданной частоты
' по номинальной кривой РНХ
Public Function ESP_optRate_m3day( _
    Optional ByVal freq_Hz As Double = 50, _
    Optional ByVal pump_id = 674) As Double
' freq_Hz   - частота вращения ЭЦН
' pump_id    - идентификатор насоса в базе данных
'description_end
On Error GoTo err1:
    If Not checkID_ESP(pump_id) Then
        ESP_optRate_m3day = 0
        Exit Function
    End If
    ESP.freq_Hz = freq_Hz
    ESP_optRate_m3day = ESP.rate_nom_sm3day
    Exit Function
err1:
    ESP_optRate_m3day = -1
    addLogMsg "Error:ESP_optRate_m3day:" & Err.Description
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция возвращает идентификатор типового насоса по значению
' номинального дебита
Public Function ESP_id_by_rate(q As Double)
' возвращает ID в зависимости от номинального дебита.
' насосы подобраны вручную из текущей базы.
' Q - номинальный дебит
'description_end
    If q > 0 And q < 20 Then ESP_id_by_rate = 738: ' ЭЦН5-15
    If q >= 20 And q < 40 Then ESP_id_by_rate = 740: ' ЭЦН5-30
    If q >= 40 And q < 60 Then ESP_id_by_rate = 1005: ' ЭЦН5-50
    If q >= 60 And q < 100 Then ESP_id_by_rate = 1006: ' ЭЦН5-80
    If q >= 100 And q < 150 Then ESP_id_by_rate = 737: ' ЭЦН5-125
    If q >= 150 And q < 250 Then ESP_id_by_rate = 748: ' ЭЦН5A-200
    If q >= 250 And q < 350 Then ESP_id_by_rate = 750: ' ЭЦН5A-320Э
    If q >= 350 And q < 600 Then ESP_id_by_rate = 753: ' ЭЦН5А-500
    If q >= 600 And q < 800 Then ESP_id_by_rate = 754: ' ЭЦН5А-700
    If q >= 800 And q < 1200 Then ESP_id_by_rate = 755: ' ЭЦН6-1000
    If q > 1200 Then ESP_id_by_rate = 758
End Function
'description_end
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
'функция расчета давления на выходе/входе ЭЦН в рабочих условиях
Public Function ESP_p_atma( _
                 ByVal qliq_sm3day As Double, _
                 ByVal fw_perc As Double, _
                 ByVal p_calc_atma As Double, _
        Optional ByVal num_stages As Integer = 1, _
        Optional ByVal freq_Hz As Double = 50, _
        Optional ByVal pump_id = 674, _
        Optional ByVal str_PVT As String = PVT_DEFAULT, _
        Optional ByVal t_intake_C As Double = 50, _
        Optional ByVal t_dis_C As Double = 50, _
        Optional ByVal calc_along_flow As Boolean = 1, _
        Optional ByVal ESP_gas_correct As Double = 1, _
        Optional ByVal c_calibr = 1, _
        Optional ByVal dnum_stages_integrate As Integer = 1, _
        Optional ByVal out_curves_num_points As Integer = 20, _
        Optional ByVal num_value As Integer = 0)
' qliq_sm3day       - дебит жидкости на поверхности
' fw_perc           - обводненность
' p_calc_atma        - давление для которого делается расчет
'                     либо давление на приеме насоса
'                     либо давление на выкиде насоса
'                     определяется параметром calc_along_flow
' num_stages        - количество ступеней
' freq_Hz           - частота вращения вала ЭЦН, Гц
' pump_id           - идентификатор насоса
' str_PVT            - набор данных PVT
' t_intake_C        - температура на приеме насоа
' t_dis_C            - температура на выкиде насоса.
'                     если = 0 и calc_along_flow = 1 то рассчитывается
' calc_along_flow    - режим расчета снизу вверх или сверху вниз
'                 calc_along_flow = True => p_atma давление на приеме
'                 calc_along_flow = False => p_atma давление на выкиде
' ESP_gas_correct  - деградация по газу:
'      0 - 2 задает значение вручную;
'      10 стандартный ЭЦН (предел 25%);
'      20 ЭЦН с газостабилизирующим модулем (предел 50%);
'      30 ЭЦН с осевым модулем (предел 75%);
'      40 ЭЦН с модифицированным ступенями (предел 40%).
'      110+, тогда модель n-100 применяется ко всем ступеням отдельно
'         Предел по доле газа на входе в насос после сепарации
'         на основе статьи SPE 117414 (с корректировкой)
'         поправка дополнительная к деградации (суммируется).
' c_calibr  - коэффициент поправки на напор.
'       если массив то второе значение - поправыка на подачу (множитель)
'       третье на мощность (множитель)
' dnum_stages_integrate - шаг интегрирования ЭЦН
'           если >1 будет быстрее но менее точно
' out_curves_num_points - количество точек для вывода значений
'                   по ступеням
' num_value       - значение которое будет выводиться первым
' результат   - массив значений включающий
'description_end
    Dim arr
    Dim clbr
    Dim ESP As CESPpump
    Dim c_calibr_head As Double
    Dim c_calibr_rate As Double
    Dim c_calibr_power As Double
    
On Error GoTo er1:
    ' get ESP from database
    Set ESP = getESP(pump_id)
    With ESP
        If str_PVT <> "" Then
             Set .fluid = PVT_decode_string(str_PVT)
        End If
         
        Call read_ESP_calibr(c_calibr, c_calibr_head, c_calibr_rate, c_calibr_power)
        
        .c_calibr_head = c_calibr_head
        .c_calibr_rate = c_calibr_rate
        .c_calibr_power = c_calibr_power
            
        .fluid.qliq_sm3day = qliq_sm3day
        .fluid.fw_perc = fw_perc
            
        .freq_Hz = freq_Hz
        .stage_num = num_stages
        .gas_correct = ESP_gas_correct
        .dnum_stages_integrate = dnum_stages_integrate
         
        Call .calc_ESP(p_calc_atma, t_intake_C, t_dis_C, calc_along_flow, saveCurve:=True)
         
        arr = .array_out(out_curves_num_points)
        If calc_along_flow Then
            arr(0, 0) = .p_dis_atma
            arr(1, 0) = "p_dis_atma"
        Else
            arr(0, 0) = .p_int_atma
            arr(1, 0) = "p_intake_atma"
        End If
    End With
    
    arr(0, 0) = arr(0, num_value)
    arr(1, 0) = arr(1, num_value)
    
    ESP_p_atma = arr
    Exit Function
er1:
    ESP_p_atma = "error"
    addLogMsg "Error:ESP_dp_atm:" & Err.Description
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет подстроечных параметров системы УЭЦН
Public Function ESP_calibr_pump( _
                 ByVal qliq_sm3day As Double, _
                 ByVal fw_perc As Double, _
                 ByVal p_int_atma As Double, _
                 ByVal p_dis_atma As Double, _
        Optional ByVal num_stages As Integer = 1, _
        Optional ByVal freq_Hz As Double = 50, _
        Optional ByVal pump_id = 674, _
        Optional ByVal str_PVT As String = PVT_DEFAULT, _
        Optional ByVal t_intake_C As Double = 50, _
        Optional ByVal t_dis_C As Double = 50, _
        Optional ByVal calc_along_flow As Boolean = 1, _
        Optional ByVal ESP_gas_correct As Double = 1, _
        Optional ByVal c_calibr = 1, _
        Optional ByVal dnum_stages_integrate As Integer = 1, _
        Optional ByVal calibr_type As Integer = 0)
' qliq_sm3day       - дебит жидкости на поверхности
' fw_perc           - обводненность
' p_int_atma        - давление на приеме насоса
' p_dis_atma        - давление на выкиде насоса
' num_stages        - количество ступеней
' freq_Hz           - частота вращения вала ЭЦН, Гц
' pump_id           - идентификатор насоса
' str_PVT            - набор данных PVT
' t_intake_C        - температура на приеме насоа
' t_dis_C            - температура на выкиде насоса.
'                     если = 0 и calc_along_flow = 1 то рассчитывается
' calc_along_flow    - режим расчета снизу вверх или сверху вниз
'                 calc_along_flow = True => p_atma давление на приеме
'                 calc_along_flow = False => p_atma давление на выкиде
' ESP_gas_correct  - деградация по газу:
'     0 - 2 задает значение вручную;
'     10 стандартный ЭЦН (предел 25%);
'     20 ЭЦН с газостабилизирующим модулем (предел 50%);
'     30 ЭЦН с осевым модулем (предел 75%);
'     40 ЭЦН с модифицированным ступенями (предел 40%).
'     110+, тогда модель n-100 применяется ко всем ступеням отдельно
'     Предел по доле газа на входе в насос после сепарации
'     на основе статьи SPE 117414 (с корректировкой)
'     поправка дополнительная к деградации (суммируется).
' c_calibr  - коэффициент поправки на напор.
'     если массив то второе значение - поправыка на подачу (множитель)
'     третье на мощность (множитель)
' dnum_stages_integrate - шаг интегрирования ЭЦН
'           если >1 будет быстрее но менее точно
' calibr_type - тип калибровки
' результат   - массив значений включающий
'description_end
   
    
    Dim ESP As CESPpump
    Dim c_calibr_head As Double
    Dim c_calibr_rate As Double
    Dim c_calibr_power As Double
    
    Dim prm As New CSolveParam
    
    Dim coeffA(0 To 4)
    Dim func As String
    Dim cal_type_string As String
    Dim val_min As Double, val_max As Double
    Dim out, out_desc
    
On Error GoTo er1:
    ' get ESP from database
    Set ESP = getESP(pump_id)
    With ESP
        If str_PVT <> "" Then
             Set .fluid = PVT_decode_string(str_PVT)
        End If
         
        Call read_ESP_calibr(c_calibr, c_calibr_head, c_calibr_rate, c_calibr_power)
        
        .c_calibr_head = c_calibr_head
        .c_calibr_rate = c_calibr_rate
        .c_calibr_power = c_calibr_power
            
        .fluid.qliq_sm3day = qliq_sm3day
        .fluid.fw_perc = fw_perc
            
        .freq_Hz = freq_Hz
        .stage_num = num_stages
        .gas_correct = ESP_gas_correct
        
        .dnum_stages_integrate = dnum_stages_integrate
    End With
        ' prepare solution function
    Set coeffA(0) = ESP
    coeffA(1) = p_int_atma
    coeffA(2) = p_dis_atma
    coeffA(3) = t_intake_C
    coeffA(4) = t_dis_C
    
    Select Case calibr_type
        Case 0
            func = "calc_ESP_dp_error_calibr_head_atm"
            cal_type_string = "calibr_head"
            val_min = 0.5
            val_max = 1.5
        Case 1
            func = "calc_ESP_dp_error_calibr_rate_atm"
            cal_type_string = "calibr_rate"
            val_min = 0.5
            val_max = 1.5
    End Select
    
    prm.y_tolerance = const_pressure_tolerance
    
    If solve_equation_bisection(func, val_min, val_max, coeffA, prm) Then
    
        out = Array(prm.x_solution, _
                    cal_type_string, _
                    prm.y_solution, _
                    prm.iterations, _
                    prm.msg)
    Else
        out = Array("no solution", _
                    cal_type_string, _
                    CStr(prm.y_solution), _
                    CStr(prm.iterations), _
                    prm.msg)
    End If
        
    out_desc = Array("solution", _
                     "cal_type", _
                     "y_solution", _
                     "iterations", _
                     "description")
    ESP_calibr_pump = array_join(Array(out, out_desc))
    
    Exit Function
er1:
    ESP_calibr_pump = "error"
    addLogMsg "Error:ESP_calibr_pump:" & Err.Description
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет производительности системы УЭЦН
' считает перепад давления, электрические параметры и деградацию КПД
Public Function ESP_system_calc( _
                 ByVal qliq_sm3day As Double, _
                 ByVal fw_perc As Double, _
                 ByVal p_calc_atma As Double, _
        Optional ByVal str_PVT As String, _
        Optional ByVal str_ESP As String, _
        Optional ByVal calc_along_flow As Boolean = 1, _
        Optional ByVal out_curves_num_points As Integer = 20, _
        Optional ByVal num_value As Integer = 0)
' qliq_sm3day       - дебит жидкости на поверхности
' fw_perc           - обводненность
' p_calc_atma        - давление для которого делается расчет
'                     либо давление на приеме насоса
'                     либо давление на выкиде насоса
'                     определяется параметром calc_along_flow
' str_PVT            - набор данных PVT
' str_ESP            - набор данных ЭЦН
' calc_along_flow    - режим расчета снизу вверх или сверху вниз
'            calc_along_flow = True => p_atma давление на приеме
'           calc_along_flow = False => p_atma давление на выкиде
' out_curves_num_points - количество точек для вывода значений
'            по ступеня.
' num_value       - значение которое будет выводиться первым
' результат   - массив значений включающий
'            перепад давления
'            перепад температур
'            мощность потребляемая с вала, Вт
'            мощность гидравлическая по перекачке жидкости, Вт
'            КПД ЭЦН
'            список неполон
'description_end
    Dim arr
    Dim i As Integer
    Dim nrows As Integer
On Error GoTo er1:
   ' Dim ESP As CESPpump
    Dim ESPsys As New CESPsystemSimple
    Dim fluid As CPVT
    
    Set ESPsys = ESP_decode_string(str_ESP)
    Set fluid = PVT_decode_string(str_PVT)
    
    Set ESPsys.fluid = fluid
    Set ESPsys.ESP_pump.fluid = fluid
    fluid.qliq_sm3day = qliq_sm3day
    fluid.fw_perc = fw_perc
    Call ESPsys.calc_ESPsys(p_calc_atma, calc_along_flow, saveCurve:=True)
    
    
    arr = ESPsys.ESP_pump.array_out(out_curves_num_points)
    nrows = UBound(arr, 1)
    
    ReDim Preserve arr(nrows, 17)
    i = 0
    arr(0, 0) = ESPsys.p_dis_atma - ESPsys.p_int_atma
    arr(1, 0) = "dP_atm"
    
    i = i + 1
    arr(0, i) = ESPsys.t_dis_C - ESPsys.t_int_C
    arr(1, i) = "dT_C"
    
    i = i + 1
    arr(0, i) = ESP.p_int_atma
    arr(1, i) = "p_int_atma"
    
    i = i + 1
    arr(0, i) = ESP.p_dis_atma
    arr(1, i) = "p_dis_atma"
    
    i = i + 1
    arr(0, i) = ESPsys.ESP_pump.stage_num
    arr(1, i) = "stage_num"
    
    i = i + 1
    arr(0, i) = ESPsys.freq_Hz
    arr(1, i) = "Pow freq_Hz"
    
    i = i + 1
    arr(0, i) = ESPsys.ESP_pump.freq_Hz
    arr(1, i) = "ESP freq_Hz"
    
    i = i + 1
    arr(0, i) = ESPsys.I_A
    arr(1, i) = "I, A"
    
    i = i + 1
    arr(0, i) = ESPsys.load_fr
    arr(1, i) = "load_fr"
    
    i = i + 1
    arr(0, i) = ESPsys.power_CS_calc_W
    arr(1, i) = "power_CS_W"
    
    i = i + 1
    arr(0, i) = ESPsys.power_motor_W
    arr(1, i) = "power_motor_W"
    
    i = i + 1
    arr(0, i) = ESPsys.power_shaft_W
    arr(1, i) = "power_shaft_W"
     
    i = i + 1
    arr(0, i) = ESPsys.ESP_pump.power_ESP_W
    arr(1, i) = "power_ESP_W"
        
    i = i + 1
    arr(0, i) = ESPsys.ESP_pump.power_fluid_W
    arr(1, i) = "power_fluid_W"
        
    i = i + 1
    arr(0, i) = ESPsys.U_trans_high_V
    arr(1, i) = "U_trans_high_V"
    
    i = i + 1
    arr(0, i) = ESPsys.cable_dU_V
    arr(1, i) = "cable_dU_V"
         
    i = i + 1
    arr(0, i) = ESPsys.eff_d
    arr(1, i) = "eff_d"
    
    i = i + 1
    arr(0, i) = ESPsys.ESP_pump.eff_ESP_d
    arr(1, i) = "eff_ESP_d"
    
    
    arr(0, 0) = arr(0, num_value)
    arr(1, 0) = arr(1, num_value)
    
    ESP_system_calc = arr
    Exit Function
er1:
    ESP_system_calc = -1
    addLogMsg "Error:ESP_system_calc:" & Err.Description
End Function
'--------------------- Двигатель -----------------------
'' функция загрузки параметров двигателя с листа
'Public Function loadmotorManually(Optional  Byval P_kW = 30, Optional  Byval U_V = 1000, Optional  Byval I_A = 10, _
'                    Optional  Byval Eff = 0.8, Optional  Byval CosPhi = 0.8, Optional  Byval F_Hz = 50, _
'                    Optional  Byval s = 0.05, Optional  Byval lambda = 2, Optional  Byval Diam = 117) As String
'    ' возвращаяет код двигателя
''On Error GoTo er1:
''    With motor
''        .ID = 0
''        .motorName = "_ПЭД_" & P_kW & "-" & Diam & "-" & U_V
''        .manufacturer_name = "Ручной ввод"
''        .Pnom_kW = P_kW
''        .Unom_lin_V = U_V
''        .Inom_phase_A = I_A
''        .Effnom_d = Eff
''        .CosPhinom_d = Cosphi
''        .fnom_Hz = f_Hz
''        .Snom_d = s
''        .Lambda_d = lambda
''        .minDcas_mm = Diam + 6
''
''        Call .CalcModelGridin
''    End With
''    loadmotorManually = motor.motorName
''    Exit Function
''er1:
'' addLogMsg "Не удалось загрузить вручную параметры двигателя. Загружены параметры по умолчанию"
'' Set motor = New CESPmotor
'End Function
'' функция расчета загрузки двигателя от скольжения
'' rnt 03/2016
'Public Function motor_load_d(s As Double, _
'                    Optional  Byval freq_HzU_Hz As Double = 50, _
'                    Optional  Byval U_V As Double = -1, _
'                    Optional  Byval motorID As Integer = 0) As Double
''
''   s           - скольжение от 0 до 1
'' опциональные параметры
''   freq_HzU_Hz    - частота вращения внешнего поля
''   U_V         - напряжение питания двигателя, фазовое, В
'' выход
''   число       - значение момента двигателя при заданных частоте и напряжении
'
'
''    Application.Volatile (True)  ' поскольку пока есть зависимость от внешнего объекта - сделаем функцию чувствительной к пересчету
''
''
'''    Dim motor As New CESPmotor
'''    motor.CalcModelGridin
''
''    If freq_HzU_Hz > 0 Then motor.f_Hz = freq_HzU_Hz
''    If U_V > 0 Then motor.Ulin_V = U_V
''
''    motor.S_d = s
''    motorload_d = motor.load_d
'
'End Function
' rnt 03/2016
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция расчета момента двигателя от проскальзования
Public Function motor_M_slip_Nm(ByVal S As Double, _
                      Optional ByVal freq_Hz As Double = 50, _
                      Optional ByVal U_V As Double = -1, _
                      Optional ByVal Unom_V As Double = 500, _
                      Optional ByVal Inom_A As Double = 10, _
                      Optional ByVal Fnom_Hz As Double = 50, _
                      Optional ByVal motorID As Integer = 0) As Double
'   s           - скольжение двигателя
' опциональные параметры
'   freq_Hz     - частота вращения внешнего поля
'   U_V         - напряжение рабочее, линейное, В
'   Unom_V      - номинальное напряжение питания двигателя, линейное, В
'   Inom_A      - номинальный ток двигателя, линейный, А
'   fnom_Hz     - номинальная частота вращения поля, Гц
'   motorID     - тип двигателя 0 - задается по схеме замещения,
'                               1 - задается по каталожным кривым
'                 корректно работает, толко для motorID = 0
' выход
'   результат   - значение момента двигателя при заданных частоте и напряжении
'description_end
On Error GoTo er1:
    
    Dim motor As New CESPMotor
    motor.InitMotor motorID, Unom_V, Inom_A, Fnom_Hz
    motor.calc_motor_slip S, freq_Hz, U_V
    motor_M_slip_Nm = motor.m_Nm
    
    Exit Function
er1:
    motor_M_slip_Nm = -1
    addLogMsg "Error:motor_M_slip_Nm:" & Err.Description
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' Расчет потребляемого тока
' погружного ассинхронного двигателя от проскальзывания
Public Function motor_I_slip_A(ByVal S As Double, _
                     Optional ByVal freq_Hz As Double = 50, _
                     Optional ByVal U_V As Double = -1, _
                     Optional ByVal Unom_V As Double = 500, _
                     Optional ByVal Inom_A As Double = 10, _
                     Optional ByVal Fnom_Hz As Double = 50, _
                     Optional ByVal motorID As Integer = 0) As Double
'   s           - скольжение двигателя
' опциональные параметры
'   freq_Hz     - частота вращения внешнего поля
'   U_V         - напряжение рабочее, линейное, В
'   Unom_V      - номинальное напряжение питания двигателя, линейное, В
'   Inom_A      - номинальный ток двигателя, линейный, А
'   fnom_Hz     - номинальная частота вращения поля, Гц
'   motorID     - тип двигателя 0 - задается по схеме замещения,
'                               1 - задается по каталожным кривым
'                 корректно работает, толко для motorID = 0
' выход
'   результат   - ток
'description_end
On Error GoTo er1:
    Dim motor As New CESPMotor
    motor.InitMotor motorID, Unom_V, Inom_A, Fnom_Hz
    motor.calc_motor_slip S, freq_Hz, U_V
    motor_I_slip_A = motor.I_lin_A
    
    Exit Function
er1:
    motor_I_slip_A = -1
    addLogMsg "Error:motor_I_slip_A:" & Err.Description
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' Расчет коэффициента мощности
' погружного ассинхронного двигателя от проскальзывания
Public Function motor_CosPhi_slip(ByVal S As Double, _
                        Optional ByVal freq_Hz As Double = 50, _
                        Optional ByVal U_V As Double = -1, _
                        Optional ByVal Unom_V As Double = 500, _
                        Optional ByVal Inom_A As Double = 10, _
                        Optional ByVal Fnom_Hz As Double = 50, _
                        Optional ByVal motorID As Integer = 0) As Double
'   s           - скольжение двигателя
' опциональные параметры
'   freq_Hz     - частота вращения внешнего поля
'   U_V         - напряжение рабочее, линейное, В
'   Unom_V      - номинальное напряжение питания двигателя, линейное, В
'   Inom_A      - номинальный ток двигателя, линейный, А
'   fnom_Hz     - номинальная частота вращения поля, Гц
'   motorID     - тип двигателя 0 - задается по схеме замещения,
'                               1 - задается по каталожным кривым
'                 корректно работает, толко для motorID = 0
' выход
'   результат   - коэффициент мощности cos phi
'description_end
On Error GoTo er1:
    Dim motor As New CESPMotor
    motor.InitMotor motorID, Unom_V, Inom_A, Fnom_Hz
    motor.calc_motor_slip S, freq_Hz, U_V
    motor_CosPhi_slip = motor.CosPhi_d
    
    Exit Function
er1:
    motor_CosPhi_slip = -1
    addLogMsg "Error:motor_CosPhi_slip:" & Err.Description
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' Расчет КПД погружного ассинхронного двигателя от проскальзывания
Public Function motor_Eff_slip(ByVal S As Double, _
                     Optional ByVal freq_Hz As Double = 50, _
                     Optional ByVal U_V As Double = -1, _
                     Optional ByVal Unom_V As Double = 500, _
                     Optional ByVal Inom_A As Double = 10, _
                     Optional ByVal Fnom_Hz As Double = 50, _
                     Optional ByVal motorID As Integer = 0) As Double
'   s           - скольжение двигателя
' опциональные параметры
'   freq_Hz     - частота вращения внешнего поля
'   U_V         - напряжение рабочее, линейное, В
'   Unom_V      - номинальное напряжение питания двигателя, линейное, В
'   Inom_A      - номинальный ток двигателя, линейный, А
'   fnom_Hz     - номинальная частота вращения поля, Гц
'   motorID     - тип двигателя 0 - задается по схеме замещения,
'                               1 - задается по каталожным кривым
'                 корректно работает, толко для motorID = 0
' выход
'   результат   -  КПД преобразования электрической мощности
'                 в механическую
'description_end
On Error GoTo er1:
    Dim motor As New CESPMotor
    motor.InitMotor motorID, Unom_V, Inom_A, Fnom_Hz
    motor.calc_motor_slip S, freq_Hz, U_V
    motor_Eff_slip = motor.eff_d
    Exit Function
er1:
    motor_Eff_slip = -1
    addLogMsg "Error:motor_Eff_slip:" & Err.Description
    
End Function
' rnt 03/2016
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция расчета момента двигателя от мощности на валу
Public Function motor_M_Nm(ByVal Pshaft_kW As Double, _
                Optional ByVal freq_Hz As Double = 50, _
                Optional ByVal U_V As Double = -1, _
                Optional ByVal Unom_V As Double = 500, _
                Optional ByVal Inom_A As Double = 10, _
                Optional ByVal Fnom_Hz As Double = 50, _
                Optional ByVal motorID As Integer = 0) As Double
' Pshaft_kW     - мощность развиваемая двигателем на валу
' опциональные параметры
'   freq_Hz     - частота вращения внешнего поля
'   U_V         - напряжение рабочее, линейное, В
'   Unom_V      - номинальное напряжение питания двигателя, линейное, В
'   Inom_A      - номинальный ток двигателя, линейный, А
'   fnom_Hz     - номинальная частота вращения поля, Гц
'   motorID     - тип двигателя 0 - задается по схеме замещения,
'                               1 - задается по каталожным кривым
' выход
'   результат   - момент на валу двигателя
'description_end
On Error GoTo er1:
    Dim motor As New CESPMotor
    motor.InitMotor motorID, Unom_V, Inom_A, Fnom_Hz
    motor.calc_motor Pshaft_kW, freq_Hz, U_V
    motor_M_Nm = motor.m_Nm
    
    Exit Function
er1:
    motor_M_Nm = -1
    addLogMsg "Error:motor_M_Nm:" & Err.Description
End Function
' rnt 03/2016
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция расчета рабочего тока двигателя
Public Function motor_I_A(ByVal Pshaft_kW As Double, _
                Optional ByVal freq_Hz As Double = 50, _
                Optional ByVal U_V As Double = -1, _
                Optional ByVal Unom_V As Double = 500, _
                Optional ByVal Inom_A As Double = 10, _
                Optional ByVal Fnom_Hz As Double = 50, _
                Optional ByVal motorID As Integer = 0) As Double
'  Pshaft_kW     - мощность развиваемая двигателем на валу
' опциональные параметры
'   freq_Hz     - частота вращения внешнего поля
'   U_V         - напряжение рабочее, линейное, В
'   Unom_V      - номинальное напряжение питания двигателя, линейное, В
'   Inom_A      - номинальный ток двигателя, линейный, А
'   fnom_Hz     - номинальная частота вращения поля, Гц
'   motorID     - тип двигателя 0 - задается по схеме замещения,
'                               1 - задается по каталожным кривым
' выход
'   число       - значение тока при данном режиме работы
'description_end
On Error GoTo er1:
    Dim motor As New CESPMotor
    motor.InitMotor motorID, Unom_V, Inom_A, Fnom_Hz
    motor.calc_motor Pshaft_kW, freq_Hz, U_V
    motor_I_A = motor.I_lin_A
    
    Exit Function
er1:
    motor_I_A = -1
    addLogMsg "Error:motor_I_A:" & Err.Description
End Function
' rnt 03/2016
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция расчета коэффициента мощности двигателя
Public Function motor_CosPhi_d(ByVal Pshaft_kW As Double, _
                Optional ByVal freq_Hz As Double = 50, _
                Optional ByVal U_V As Double = -1, _
                Optional ByVal Unom_V As Double = 500, _
                Optional ByVal Inom_A As Double = 10, _
                Optional ByVal Fnom_Hz As Double = 50, _
                Optional ByVal motorID As Integer = 0) As Double
'   Pshaft_kW     - мощность развиваемая двигателем на валу
' опциональные параметры
'   freq_Hz     - частота вращения внешнего поля
'   U_V         - напряжение рабочее, линейное, В
'   Unom_V      - номинальное напряжение питания двигателя, линейное, В
'   Inom_A      - номинальный ток двигателя, линейный, А
'   fnom_Hz     - номинальная частота вращения поля, Гц
'   motorID     - тип двигателя 0 - задается по схеме замещения,
'                               1 - задается по каталожным кривым
' выход
'   результат   - коэффициент мощности двигателя
'description_end
On Error GoTo er1:
    Dim motor As New CESPMotor
    motor.InitMotor motorID, Unom_V, Inom_A, Fnom_Hz
    motor.calc_motor Pshaft_kW, freq_Hz, U_V
    motor_CosPhi_d = motor.CosPhi_d
    
    Exit Function
er1:
    motor_CosPhi_d = -1
    addLogMsg "Error:motor_CosPhi_d:" & Err.Description
End Function
' rnt 03/2016
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция расчета КПД двигателя
Public Function motor_Eff_d(ByVal Pshaft_kW As Double, _
                Optional ByVal freq_Hz As Double = 50, _
                Optional ByVal U_V As Double = -1, _
                Optional ByVal Unom_V As Double = 500, _
                Optional ByVal Inom_A As Double = 10, _
                Optional ByVal Fnom_Hz As Double = 50, _
                Optional ByVal motorID As Integer = 0) As Double
' Pshaft_kW     - мощность развиваемая двигателем на валу
' опциональные параметры
'   freq_Hz     - частота вращения внешнего поля
'   U_V         - напряжение рабочее, линейное, В
'   Unom_V      - номинальное напряжение питания двигателя, линейное, В
'   Inom_A      - номинальный ток двигателя, линейный, А
'   fnom_Hz     - номинальная частота вращения поля, Гц
'   motorID     - тип двигателя 0 - задается по схеме замещения,
'                               1 - задается по каталожным кривым
' выход
'   результат   - КПД преобразования электрической мощности
'                 в механическую
'description_end
On Error GoTo er1:
    Dim motor As New CESPMotor
    motor.InitMotor motorID, Unom_V, Inom_A, Fnom_Hz
    motor.calc_motor Pshaft_kW, freq_Hz, U_V
    motor_Eff_d = motor.eff_d
    
    Exit Function
er1:
    motor_Eff_d = -1
    addLogMsg "Error:motor_Eff_d:" & Err.Description
End Function
' rnt 07/2018
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
'функция расчета скольжения от мощности на валу
Public Function motor_S_d(ByVal Pshaft_kW As Double, _
                Optional ByVal freq_Hz As Double = 50, _
                Optional ByVal U_V As Double = -1, _
                Optional ByVal Unom_V As Double = 500, _
                Optional ByVal Inom_A As Double = 10, _
                Optional ByVal Fnom_Hz As Double = 50, _
                Optional ByVal motorID As Integer = 0) As Double
'   Pshaft_kW     - мощность развиваемая двигателем на валу
' опциональные параметры
'   freq_Hz     - частота вращения внешнего поля
'   U_V         - напряжение рабочее, линейное, В
'   Unom_V      - номинальное напряжение питания двигателя, линейное, В
'   Inom_A      - номинальный ток двигателя, линейный, А
'   fnom_Hz     - номинальная частота вращения поля, Гц
'   motorID     - тип двигателя 0 - задается по схеме замещения,
'                               1 - задается по каталожным кривым
' выход
'   результат   - скольжения от мощности на валу
'description_end
On Error GoTo er1:
    Dim motor As New CESPMotor
    motor.InitMotor motorID, Unom_V, Inom_A, Fnom_Hz
    motor.calc_motor Pshaft_kW, freq_Hz, U_V
    motor_S_d = motor.s_d
    
    Exit Function
er1:
    motor_S_d = -1
    addLogMsg "Error:motor_S_d:" & Err.Description
End Function
' rnt 07/2018
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция выдает название двигателя по его характеристикам
Public Function motor_Name(Optional ByVal Unom_V As Double = 500, _
                          Optional ByVal Inom_A As Double = 10, _
                          Optional ByVal Fnom_Hz As Double = 50, _
                          Optional ByVal motorID As Integer = 0)
'
' опциональные параметры
'   Unom_V      - номинальное напряжение питания двигателя, линейное, В
'   Inom_A      - номинальный ток двигателя, линейный, А
'   fnom_Hz     - номинальная частота вращения поля, Гц
'   motorID     - тип двигателя 0 - задается по схеме замещения,
'                               1 - задается по каталожным кривым' выход
'   результат   - формальное название ПЭД
'description_end
On Error GoTo er1:
    Dim motor As New CESPMotor
    motor.InitMotor motorID, Unom_V, Inom_A, Fnom_Hz
    motor_Name = motor.motorName
    
    Exit Function
er1:
    motor_Name = -1
    addLogMsg "Error:motor_Name:" & Err.Description
End Function
' rnt 07/2018
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' функция выдает номинальную мощность ПЭД по его характеристикам
Public Function motor_Pnom_kW(Optional ByVal Unom_V As Double = 500, _
                             Optional ByVal Inom_A As Double = 10, _
                             Optional ByVal Fnom_Hz As Double = 50, _
                             Optional ByVal motorID As Integer = 0)
' опциональные параметры
'   Unom_V      - номинальное напряжение питания двигателя, линейное, В
'   Inom_A      - номинальный ток двигателя, линейный, А
'   fnom_Hz     - номинальная частота вращения поля, Гц
'   motorID     - тип двигателя 0 - задается по схеме замещения,
'                               1 - задается по каталожным кривым' выход
'   результат   - номинальная мощность ПЭД
'description_end
On Error GoTo er1:
    Dim motor As New CESPMotor
    motor.InitMotor motorID, Unom_V, Inom_A, Fnom_Hz
    motor_Pnom_kW = motor.Pnom_kW
    
    Exit Function
er1:
    motor_Pnom_kW = -1
    addLogMsg "Error:motor_Pnom_kW:" & Err.Description
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' расчет коэффициента сепарации газосепаратора
' по результатам стендовых испытаний РГУ нефти и газа
Public Function ESP_ksep_gasseparator_d( _
                ByVal gsep_type_TYPE As Integer, _
                ByVal gas_frac_d As Double, _
                ByVal qliq_sm3day As Double, _
       Optional ByVal freq_Hz As Double = 50) As Double
' MY_SEPFACTOR - Вычисление коэффициента сепрации в точке
'   gsep_type_TYPE    - тип сепаратора (номер от 1 до 29)
'    1  - 'GDNK5'
'    2  - 'VGSA (VORTEX)'
'    3  - 'GDNK5A'
'    4  - 'GSA5-1'
'    5  - 'GSA5-3'
'    6  - 'GSA5-4'
'    7  - 'GSAN-5A'
'    8  - 'GSD-5A'
'    9  - 'GSD5'
'    10 - '3MNGB5'
'    11 - '3MNGB5A'
'    12 - '3MNGDB5'
'    13 - '3MNGDB5A'
'    14 - 'MNGSL5A-M'
'    15 - 'MNGSL5A-TM'
'    16 - 'MNGSL5-M'
'    17 - 'MNGSL5-TM'
'    18 - 'MNGSLM 5'
'    19 - 'MNGD 5'
'    20 - 'GSIK 5A'
'    21 - '338DSR'
'    22 - '400GSR'
'    23 - '400GSV'
'    24 - '400GSVHV'
'    25 - '538 GSR'
'    26 - '538 GSVHV'
'    27 - '400FSR(OLD)'
'    28 - '513GRS(OLD)'
'    29 - '675HRS'
'
'   gas_frac_d       - газосодержание на входе в газосепаратор
'   qliq_sm3day      - дебит жидкости в стандартных условиях
'   freq_Hz          - частота врашения, Гц
'description_end
    Dim GS As New CESPGasSep
    ESP_ksep_gasseparator_d = GS.my_sepfactor(gsep_type_TYPE, gas_frac_d * 100, qliq_sm3day, freq_Hz * 60) / 100
    
End Function
'description_to_manual      - для автогенерации описания - помещает заголовок функции и окружающие комментарии в мануал (со след строки)
' название газосопаратора
Public Function ESP_gasseparator_name( _
                ByVal gsep_type_TYPE As Integer)
' MY_SEPFACTOR - Вычисление коэффициента сепрации в точке
'   gsep_type_TYPE    - тип сепаратора (номер от 1 до 29)
'    1  - 'GDNK5'
'    2  - 'VGSA (VORTEX)'
'    3  - 'GDNK5A'
'    4  - 'GSA5-1'
'    5  - 'GSA5-3'
'    6  - 'GSA5-4'
'    7  - 'GSAN-5A'
'    8  - 'GSD-5A'
'    9  - 'GSD5'
'    10 - '3MNGB5'
'    11 - '3MNGB5A'
'    12 - '3MNGDB5'
'    13 - '3MNGDB5A'
'    14 - 'MNGSL5A-M'
'    15 - 'MNGSL5A-TM'
'    16 - 'MNGSL5-M'
'    17 - 'MNGSL5-TM'
'    18 - 'MNGSLM 5'
'    19 - 'MNGD 5'
'    20 - 'GSIK 5A'
'    21 - '338DSR'
'    22 - '400GSR'
'    23 - '400GSV'
'    24 - '400GSVHV'
'    25 - '538 GSR'
'    26 - '538 GSVHV'
'    27 - '400FSR(OLD)'
'    28 - '513GRS(OLD)'
'    29 - '675HRS'
'description_end
    Dim GS As New CESPGasSep
    ESP_gasseparator_name = GS.Separator_Name(gsep_type_TYPE)
    
End Function
Private Sub read_ESP_calibr(ByVal c_calibr, _
                            ByRef c_calibr_head As Double, _
                            ByRef c_calibr_rate As Double, _
                            ByRef c_calibr_power As Double)
    
    
    c_calibr_head = 1
    c_calibr_rate = 1
    c_calibr_power = 1
    
    
    Dim clbr
    
    ' set calibration properties
    clbr = array1d_from_range(c_calibr, num_only:=True, no_zero:=False)
    c_calibr_head = clbr(1)
    If UBound(clbr) >= 2 Then
        c_calibr_rate = clbr(2)
    Else
        c_calibr_rate = 1
    End If
    
    If UBound(clbr) >= 3 Then
        c_calibr_power = clbr(3)
    Else
        c_calibr_power = 1
    End If
    
End Sub

