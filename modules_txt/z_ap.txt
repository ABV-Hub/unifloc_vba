Public Type Complex
    X As Double
    y As Double
End Type
Public Type RCommState
    Stage As Long
    BA() As Boolean
    IA() As Long
    RA() As Double
    CA() As Complex
End Type
Public Type ALGLIBDataset
    NIn As Long
    NOut As Long
    NClasses As Long
    
    Trn() As Double
    TST() As Double
    val() As Double
    AllDataset() As Double
    
    TrnSize As Long
    TstSize As Long
    ValSize As Long
    TotalSize As Long
End Type
Public Const MachineEpsilon = 5E-16
Public Const MaxRealNumber = 1E+300
Public Const MinRealNumber = 1E-300
Private Const BigNumber As Double = 1E+70
Private Const SmallNumber As Double = 1E-70
Private Const PiNumber As Double = 3.14159265358979
Public Function FormatInteger(i As Long, w As Long) As String
    If w <= 1 Then
        FormatInteger = Format(i, "0")
    Else
        Tmp = Format(i, String(w - 1, "#") & "0")
        Do While Len(Tmp) < w
            Tmp = " " & Tmp
        Loop
        FormatInteger = Tmp
    End If
End Function
Public Function FormatFReal(R As Double, w As Long, p As Long) As String
    Tmp = Format(R, "0." & String(p, "0"))
    Do While Len(Tmp) < w
        Tmp = " " & Tmp
    Loop
    FormatFReal = Tmp
End Function
Public Function FormatEReal(R As Double, w As Long, p As Long) As String
    Tmp = Format(R, "0." & String(p, "0") & "E+0")
    Do While Len(Tmp) < w
        Tmp = " " & Tmp
    Loop
    FormatEReal = Tmp
End Function
Public Sub ConsoleOutputString(S As String)
End Sub
Public Function MaxReal(ByVal M1 As Double, ByVal M2 As Double) As Double
    If M1 > M2 Then
        MaxReal = M1
    Else
        MaxReal = M2
    End If
End Function
Public Function MinReal(ByVal M1 As Double, ByVal M2 As Double) As Double
    If M1 < M2 Then
        MinReal = M1
    Else
        MinReal = M2
    End If
End Function
Public Function MaxInt(ByVal M1 As Long, ByVal M2 As Long) As Long
    If M1 > M2 Then
        MaxInt = M1
    Else
        MaxInt = M2
    End If
End Function
Public Function MinInt(ByVal M1 As Long, ByVal M2 As Long) As Long
    If M1 < M2 Then
        MinInt = M1
    Else
        MinInt = M2
    End If
End Function
Public Function ArcSin(ByVal X As Double) As Double
    Dim T As Double
    T = Sqr(1 - X * X)
    If T < SmallNumber Then
        ArcSin = Atn(BigNumber * Sgn(X))
    Else
        ArcSin = Atn(X / T)
    End If
End Function
Public Function ArcCos(ByVal X As Double) As Double
    Dim T As Double
    T = Sqr(1 - X * X)
    If T < SmallNumber Then
        ArcCos = Atn(BigNumber * Sgn(-X)) + 2 * Atn(1)
    Else
        ArcCos = Atn(-X / T) + 2 * Atn(1)
    End If
End Function
Public Function SinH(ByVal X As Double) As Double
    SinH = (Exp(X) - Exp(-X)) / 2
End Function
Public Function CosH(ByVal X As Double) As Double
    CosH = (Exp(X) + Exp(-X)) / 2
End Function
Public Function TanH(ByVal X As Double) As Double
    Dim T As Double
    If X > 0 Then
        T = Exp(-X)
        T = T * T
        TanH = (1 - T) / (1 + T)
    Else
        T = Exp(X)
        T = T * T
        TanH = (T - 1) / (T + 1)
    End If
End Function
Public Function Pi() As Double
    'Pi = PiNumber
    Pi = ArcCos(-1)
End Function
Public Function Power(ByVal Base As Double, ByVal Exponent As Double) As Double
    Power = Base ^ Exponent
End Function
Public Function Square(ByVal X As Double) As Double
    Square = X * X
End Function
Public Function Log10(ByVal X As Double) As Double
    Log10 = Log(X) / Log(10)
End Function
Public Function Ceil(ByVal X As Double) As Double
    Ceil = -Int(-X)
End Function
Public Function RandomInteger(ByVal X As Long) As Long
    RandomInteger = Int(Rnd() * X)
End Function
Public Function Atn2(ByVal y As Double, ByVal X As Double) As Double
    If SmallNumber * Abs(y) < Abs(X) Then
        If X < 0 Then
            If y = 0 Then
                Atn2 = Pi()
            Else
                Atn2 = Atn(y / X) + Pi() * Sgn(y)
            End If
        Else
            Atn2 = Atn(y / X)
        End If
    Else
        Atn2 = Sgn(y) * Pi() / 2
    End If
End Function
Public Function C_Complex(ByVal X As Double) As Complex
    Dim Result As Complex
    Result.X = X
    Result.y = 0
    C_Complex = Result
End Function
Public Function AbsComplex(ByRef z As Complex) As Double
    Dim Result As Double
    Dim w As Double
    Dim XABS As Double
    Dim YABS As Double
    Dim V As Double
    XABS = Abs(z.X)
    YABS = Abs(z.y)
    w = MaxReal(XABS, YABS)
    V = MinReal(XABS, YABS)
    If V = 0 Then
        Result = w
    Else
        Result = w * Sqr(1 + Square(V / w))
    End If
    AbsComplex = Result
End Function
Public Function C_Opposite(ByRef z As Complex) As Complex
    Dim Result As Complex
    Result.X = -z.X
    Result.y = -z.y
    C_Opposite = Result
End Function
Public Function Conj(ByRef z As Complex) As Complex
    Dim Result As Complex
    Result.X = z.X
    Result.y = -z.y
    Conj = Result
End Function
Public Function CSqr(ByRef z As Complex) As Complex
    Dim Result As Complex
    Result.X = Square(z.X) - Square(z.y)
    Result.y = 2 * z.X * z.y
    CSqr = Result
End Function
Public Function C_Add(ByRef Z1 As Complex, ByRef Z2 As Complex) As Complex
    Dim Result As Complex
    Result.X = Z1.X + Z2.X
    Result.y = Z1.y + Z2.y
    C_Add = Result
End Function
Public Function C_Mul(ByRef Z1 As Complex, ByRef Z2 As Complex) As Complex
    Dim Result As Complex
    Result.X = Z1.X * Z2.X - Z1.y * Z2.y
    Result.y = Z1.X * Z2.y + Z1.y * Z2.X
    C_Mul = Result
End Function
Public Function C_AddR(ByRef Z1 As Complex, ByVal R As Double) As Complex
    Dim Result As Complex
    Result.X = Z1.X + R
    Result.y = Z1.y
    C_AddR = Result
End Function
Public Function C_MulR(ByRef Z1 As Complex, ByVal R As Double) As Complex
    Dim Result As Complex
    Result.X = Z1.X * R
    Result.y = Z1.y * R
    C_MulR = Result
End Function
Public Function C_Sub(ByRef Z1 As Complex, ByRef Z2 As Complex) As Complex
    Dim Result As Complex
    Result.X = Z1.X - Z2.X
    Result.y = Z1.y - Z2.y
    C_Sub = Result
End Function
Public Function C_SubR(ByRef Z1 As Complex, ByVal R As Double) As Complex
    Dim Result As Complex
    Result.X = Z1.X - R
    Result.y = Z1.y
    C_SubR = Result
End Function
Public Function C_RSub(ByVal R As Double, ByRef Z1 As Complex) As Complex
    Dim Result As Complex
    Result.X = R - Z1.X
    Result.y = -Z1.y
    C_RSub = Result
End Function
Public Function C_Div(ByRef Z1 As Complex, ByRef Z2 As Complex) As Complex
    Dim Result As Complex
    Dim A As Double
    Dim B As Double
    Dim C As Double
    Dim D As Double
    Dim E As Double
    Dim F As Double
    A = Z1.X
    B = Z1.y
    C = Z2.X
    D = Z2.y
    If Abs(D) < Abs(C) Then
        E = D / C
        F = C + D * E
        Result.X = (A + B * E) / F
        Result.y = (B - A * E) / F
    Else
        E = C / D
        F = D + C * E
        Result.X = (B + A * E) / F
        Result.y = (-A + B * E) / F
    End If
    C_Div = Result
End Function
Public Function C_DivR(ByRef Z1 As Complex, ByVal R As Double) As Complex
    Dim Result As Complex
    Result.X = Z1.X / R
    Result.y = Z1.y / R
    C_DivR = Result
End Function
Public Function C_RDiv(ByVal R As Double, ByRef Z2 As Complex) As Complex
    Dim Result As Complex
    Dim A As Double
    Dim C As Double
    Dim D As Double
    Dim E As Double
    Dim F As Double
    A = R
    C = Z2.X
    D = Z2.y
    If Abs(D) < Abs(C) Then
        E = D / C
        F = C + D * E
        Result.X = A / F
        Result.y = -(A * E / F)
    Else
        E = C / D
        F = D + C * E
        Result.X = A * E / F
        Result.y = -(A / F)
    End If
    C_RDiv = Result
End Function
Public Function C_Equal(ByRef Z1 As Complex, ByRef Z2 As Complex) As Boolean
    Dim Result As Boolean
    Result = Z1.X = Z2.X And Z1.y = Z2.y
    C_Equal = Result
End Function
Public Function C_NotEqual(ByRef Z1 As Complex, _
         ByRef Z2 As Complex) As Boolean
    Dim Result As Boolean
    Result = Z1.X <> Z2.X Or Z1.y <> Z2.y
    C_NotEqual = Result
End Function
Public Function C_EqualR(ByRef Z1 As Complex, ByVal R As Double) As Boolean
    Dim Result As Boolean
    Result = Z1.X = R And Z1.y = 0
    C_EqualR = Result
End Function
Public Function C_NotEqualR(ByRef Z1 As Complex, _
         ByVal R As Double) As Boolean
    Dim Result As Boolean
    Result = Z1.X <> R Or Z1.y <> 0
    C_NotEqualR = Result
End Function
Public Function SplitTrim(ByVal S As String, ByVal SEP As String) As String()
    Dim SPrev As String
    S = Trim(S)
    Do
        SPrev = S
        S = Replace(S, "  ", " ")
    Loop Until S = SPrev
    SplitTrim = Split(S, SEP)
End Function
Public Function OpenDataset(ByVal FileName As String, ByRef DS As ALGLIBDataset) As Boolean
    DS.NClasses = 0
    DS.NIn = 0
    DS.NOut = 0
    DS.TotalSize = 0
    DS.TrnSize = 0
    DS.TstSize = 0
    DS.ValSize = 0
    
    FileNumber = FreeFile()
    LinesRead = 0
    On Error GoTo HandleNoFile
    Open FileName For Input As FileNumber
    On Error GoTo HandleErrorWithinFile
    Do While Not EOF(FileNumber)
        Line Input #FileNumber, TextLine
        If (Left(TextLine, 2) <> "//") And (Trim(TextLine) <> "") Then
            If LinesRead = 0 Then
                '
                ' read header
                '
                HeadArr = SplitTrim(TextLine, "#")
                If UBound(HeadArr) <> 1 Then Error 1
                
                '
                ' rows information
                '
                RowsArr = SplitTrim(HeadArr(0), " ")
                If (UBound(RowsArr) < 0) Or (UBound(RowsArr) > 2) Then Error 1
                If UBound(RowsArr) = 0 Then
                    DS.TotalSize = val(RowsArr(0))
                    DS.TrnSize = DS.TotalSize
                End If
                If UBound(RowsArr) = 1 Then
                    DS.TrnSize = val(RowsArr(0))
                    DS.TstSize = val(RowsArr(1))
                    DS.TotalSize = DS.TrnSize + DS.TstSize
                End If
                If UBound(RowsArr) = 2 Then
                    DS.TrnSize = val(RowsArr(0))
                    DS.ValSize = val(RowsArr(1))
                    DS.TstSize = val(RowsArr(2))
                    DS.TotalSize = DS.TrnSize + DS.ValSize + DS.TstSize
                End If
                If DS.TotalSize <= 0 Or DS.TrnSize < 0 Or DS.ValSize < 0 Or DS.TstSize < 0 Then Error 1
                TrnFirst = 0
                TrnLast = TrnFirst + DS.TrnSize
                ValFirst = TrnLast
                ValLast = ValFirst + DS.ValSize
                TstFirst = ValLast
                TstLast = TstFirst + DS.TstSize
                
                '
                ' columns
                '
                ColsArr = SplitTrim(HeadArr(1), " ")
                If (UBound(ColsArr) <> 0) And (UBound(ColsArr) <> 3) Then Error 1
                If UBound(ColsArr) = 0 Then
                    DS.NIn = val(ColsArr(0))
                    If DS.NIn <= 0 Then Error 1
                End If
                If UBound(ColsArr) = 3 Then
                    If (LCase(ColsArr(0)) <> "reg") And (LCase(ColsArr(0)) <> "cls") Then Error 1
                    If ColsArr(2) <> "=>" Then Error 1
                    DS.NIn = val(ColsArr(1))
                    If DS.NIn < 1 Then Error 1
                    If LCase(ColsArr(0)) = "reg" Then
                        DS.NClasses = 0
                        DS.NOut = val(ColsArr(3))
                        If DS.NOut < 1 Then Error 1
                    Else
                        DS.NClasses = val(ColsArr(3))
                        DS.NOut = 1
                        If DS.NClasses < 2 Then Error 1
                    End If
                End If
                
                '
                ' initialize arrays
                '
                ReDim DS.AllDataset(0 To DS.TotalSize - 1, 0 To DS.NIn + DS.NOut - 1)
                If DS.TrnSize > 0 Then ReDim DS.Trn(0 To DS.TrnSize - 1, 0 To DS.NIn + DS.NOut - 1)
                If DS.ValSize > 0 Then ReDim DS.val(0 To DS.ValSize - 1, 0 To DS.NIn + DS.NOut - 1)
                If DS.TstSize > 0 Then ReDim DS.TST(0 To DS.TstSize - 1, 0 To DS.NIn + DS.NOut - 1)
            Else
                '
                ' read data
                '
                VarsArr = SplitTrim(TextLine, " ")
                If UBound(VarsArr) <> DS.NIn + DS.NOut - 1 Then Error 1
                TmpC = Round(VarsArr(DS.NIn + DS.NOut - 1))
                If (DS.NClasses > 0) And ((TmpC < 0) Or (TmpC >= DS.NClasses)) Then Error 1
                RowIndex = LinesRead - 1
                For i = 0 To DS.NIn + DS.NOut - 1 Step 1
                    DS.AllDataset(RowIndex, i) = VarsArr(i)
                    If RowIndex >= TrnFirst And RowIndex < TrnLast Then
                        DS.Trn(RowIndex - TrnFirst, i) = VarsArr(i)
                    End If
                    If RowIndex >= ValFirst And RowIndex < ValLast Then
                        DS.val(RowIndex - ValFirst, i) = VarsArr(i)
                    End If
                    If RowIndex >= TstFirst And RowIndex < TstLast Then
                        DS.TST(RowIndex - TstFirst, i) = VarsArr(i)
                    End If
                Next i
            End If
            LinesRead = LinesRead + 1
        End If
    Loop
    Close FileNumber
    OpenDataset = True
    Exit Function
HandleNoFile:
    OpenDataset = False
    Exit Function
HandleErrorWithinFile:
    Close FileNumber
    OpenDataset = False
    Exit Function
End Function

