''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright 2008 by Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
Public Sub TagSort(ByRef A() As Double, _
         ByVal N As Long, _
         ByRef P1() As Long, _
         ByRef P2() As Long)
    Dim i As Long
    Dim PV() As Long
    Dim VP() As Long
    Dim LV As Long
    Dim LP As Long
    Dim RV As Long
    Dim RP As Long
    
    '
    ' Special cases
    '
    If N <= 0# Then
        Exit Sub
    End If
    If N = 1# Then
        ReDim P1(0# To 0#)
        ReDim P2(0# To 0#)
        P1(0#) = 0#
        P2(0#) = 0#
        Exit Sub
    End If
    
    '
    ' General case, N>1: prepare permutations table P1
    '
    ReDim P1(0# To N - 1#)
    For i = 0# To N - 1# Step 1
        P1(i) = i
    Next i
    
    '
    ' General case, N>1: sort, update P1
    '
    Call TagSortFastI(A, P1, N)
    
    '
    ' General case, N>1: fill permutations table P2
    '
    ' To fill P2 we maintain two arrays:
    ' * PV, Position(Value). PV[i] contains position of I-th key at the moment
    ' * VP, Value(Position). VP[i] contains key which has position I at the moment
    '
    ' At each step we making permutation of two items:
    '   Left, which is given by position/value pair LP/LV
    '   and Right, which is given by RP/RV
    ' and updating PV[] and VP[] correspondingly.
    '
    ReDim PV(0# To N - 1#)
    ReDim VP(0# To N - 1#)
    ReDim P2(0# To N - 1#)
    For i = 0# To N - 1# Step 1
        PV(i) = i
        VP(i) = i
    Next i
    For i = 0# To N - 1# Step 1
        
        '
        ' calculate LP, LV, RP, RV
        '
        LP = i
        LV = VP(LP)
        RV = P1(i)
        RP = PV(RV)
        
        '
        ' Fill P2
        '
        P2(i) = RP
        
        '
        ' update PV and VP
        '
        VP(LP) = RV
        VP(RP) = LV
        PV(LV) = RP
        PV(RV) = LP
    Next i
End Sub
Public Sub TagSortFastI(ByRef A() As Double, _
         ByRef B() As Long, _
         ByVal N As Long)
    Dim i As Long
    Dim K As Long
    Dim T As Long
    Dim Tmp As Double
    Dim TmpI As Long
    
    '
    ' Special cases
    '
    If N <= 1# Then
        Exit Sub
    End If
    
    '
    ' General case, N>1: sort, update B
    '
    i = 2#
    Do
        T = i
        Do While T <> 1#
            K = T \ 2#
            If A(K - 1#) >= A(T - 1#) Then
                T = 1#
            Else
                Tmp = A(K - 1#)
                A(K - 1#) = A(T - 1#)
                A(T - 1#) = Tmp
                TmpI = B(K - 1#)
                B(K - 1#) = B(T - 1#)
                B(T - 1#) = TmpI
                T = K
            End If
        Loop
        i = i + 1#
    Loop Until Not i <= N
    i = N - 1#
    Do
        Tmp = A(i)
        A(i) = A(0#)
        A(0#) = Tmp
        TmpI = B(i)
        B(i) = B(0#)
        B(0#) = TmpI
        T = 1#
        Do While T <> 0#
            K = 2# * T
            If K > i Then
                T = 0#
            Else
                If K < i Then
                    If A(K) > A(K - 1#) Then
                        K = K + 1#
                    End If
                End If
                If A(T - 1#) >= A(K - 1#) Then
                    T = 0#
                Else
                    Tmp = A(K - 1#)
                    A(K - 1#) = A(T - 1#)
                    A(T - 1#) = Tmp
                    TmpI = B(K - 1#)
                    B(K - 1#) = B(T - 1#)
                    B(T - 1#) = TmpI
                    T = K
                End If
            End If
        Loop
        i = i - 1#
    Loop Until Not i >= 1#
End Sub
Public Sub TagSortFastR(ByRef A() As Double, _
         ByRef B() As Double, _
         ByVal N As Long)
    Dim i As Long
    Dim K As Long
    Dim T As Long
    Dim Tmp As Double
    Dim TmpR As Double
    
    '
    ' Special cases
    '
    If N <= 1# Then
        Exit Sub
    End If
    
    '
    ' General case, N>1: sort, update B
    '
    i = 2#
    Do
        T = i
        Do While T <> 1#
            K = T \ 2#
            If A(K - 1#) >= A(T - 1#) Then
                T = 1#
            Else
                Tmp = A(K - 1#)
                A(K - 1#) = A(T - 1#)
                A(T - 1#) = Tmp
                TmpR = B(K - 1#)
                B(K - 1#) = B(T - 1#)
                B(T - 1#) = TmpR
                T = K
            End If
        Loop
        i = i + 1#
    Loop Until Not i <= N
    i = N - 1#
    Do
        Tmp = A(i)
        A(i) = A(0#)
        A(0#) = Tmp
        TmpR = B(i)
        B(i) = B(0#)
        B(0#) = TmpR
        T = 1#
        Do While T <> 0#
            K = 2# * T
            If K > i Then
                T = 0#
            Else
                If K < i Then
                    If A(K) > A(K - 1#) Then
                        K = K + 1#
                    End If
                End If
                If A(T - 1#) >= A(K - 1#) Then
                    T = 0#
                Else
                    Tmp = A(K - 1#)
                    A(K - 1#) = A(T - 1#)
                    A(T - 1#) = Tmp
                    TmpR = B(K - 1#)
                    B(K - 1#) = B(T - 1#)
                    B(T - 1#) = TmpR
                    T = K
                End If
            End If
        Loop
        i = i - 1#
    Loop Until Not i >= 1#
End Sub
Public Sub TagSortFast(ByRef A() As Double, ByVal N As Long)
    Dim i As Long
    Dim K As Long
    Dim T As Long
    Dim Tmp As Double
    
    '
    ' Special cases
    '
    If N <= 1# Then
        Exit Sub
    End If
    
    '
    ' General case, N>1: sort, update B
    '
    i = 2#
    Do
        T = i
        Do While T <> 1#
            K = T \ 2#
            If A(K - 1#) >= A(T - 1#) Then
                T = 1#
            Else
                Tmp = A(K - 1#)
                A(K - 1#) = A(T - 1#)
                A(T - 1#) = Tmp
                T = K
            End If
        Loop
        i = i + 1#
    Loop Until Not i <= N
    i = N - 1#
    Do
        Tmp = A(i)
        A(i) = A(0#)
        A(0#) = Tmp
        T = 1#
        Do While T <> 0#
            K = 2# * T
            If K > i Then
                T = 0#
            Else
                If K < i Then
                    If A(K) > A(K - 1#) Then
                        K = K + 1#
                    End If
                End If
                If A(T - 1#) >= A(K - 1#) Then
                    T = 0#
                Else
                    Tmp = A(K - 1#)
                    A(K - 1#) = A(T - 1#)
                    A(T - 1#) = Tmp
                    T = K
                End If
            End If
        Loop
        i = i - 1#
    Loop Until Not i >= 1#
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Heap operations: adds element to the heap
'
'PARAMETERS:
'    A       -   heap itself, must be at least array[0..N]
'    B       -   array of integer tags, which are updated according to
'                permutations in the heap
'    N       -   size of the heap (without new element).
'                updated on output
'    VA      -   value of the element being added
'    VB      -   value of the tag
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub TagHeapPushI(ByRef A() As Double, _
         ByRef B() As Long, _
         ByRef N As Long, _
         ByVal VA As Double, _
         ByVal VB As Long)
    Dim J As Long
    Dim K As Long
    Dim V As Double
    If N < 0# Then
        Exit Sub
    End If
    
    '
    ' N=0 is a special case
    '
    If N = 0# Then
        A(0#) = VA
        B(0#) = VB
        N = N + 1#
        Exit Sub
    End If
    
    '
    ' add current point to the heap
    ' (add to the bottom, then move up)
    '
    ' we don't write point to the heap
    ' until its final position is determined
    ' (it allow us to reduce number of array access operations)
    '
    J = N
    N = N + 1#
    Do While J > 0#
        K = (J - 1#) \ 2#
        V = A(K)
        If V < VA Then
            
            '
            ' swap with higher element
            '
            A(J) = V
            B(J) = B(K)
            J = K
        Else
            
            '
            ' element in its place. terminate.
            '
            Exit Do
        End If
    Loop
    A(J) = VA
    B(J) = VB
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Heap operations: replaces top element with new element
'(which is moved down)
'
'PARAMETERS:
'    A       -   heap itself, must be at least array[0..N-1]
'    B       -   array of integer tags, which are updated according to
'                permutations in the heap
'    N       -   size of the heap
'    VA      -   value of the element which replaces top element
'    VB      -   value of the tag
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub TagHeapReplaceTopI(ByRef A() As Double, _
         ByRef B() As Long, _
         ByVal N As Long, _
         ByVal VA As Double, _
         ByVal VB As Long)
    Dim J As Long
    Dim K1 As Long
    Dim K2 As Long
    Dim V As Double
    Dim V1 As Double
    Dim V2 As Double
    If N < 1# Then
        Exit Sub
    End If
    
    '
    ' N=1 is a special case
    '
    If N = 1# Then
        A(0#) = VA
        B(0#) = VB
        Exit Sub
    End If
    
    '
    ' move down through heap:
    ' * J  -   current element
    ' * K1 -   first child (always exists)
    ' * K2 -   second child (may not exists)
    '
    ' we don't write point to the heap
    ' until its final position is determined
    ' (it allow us to reduce number of array access operations)
    '
    J = 0#
    K1 = 1#
    K2 = 2#
    Do While K1 < N
        If K2 >= N Then
            
            '
            ' only one child.
            '
            ' swap and terminate (because this child
            ' have no siblings due to heap structure)
            '
            V = A(K1)
            If V > VA Then
                A(J) = V
                B(J) = B(K1)
                J = K1
            End If
            Exit Do
        Else
            
            '
            ' two childs
            '
            V1 = A(K1)
            V2 = A(K2)
            If V1 > V2 Then
                If VA < V1 Then
                    A(J) = V1
                    B(J) = B(K1)
                    J = K1
                Else
                    Exit Do
                End If
            Else
                If VA < V2 Then
                    A(J) = V2
                    B(J) = B(K2)
                    J = K2
                Else
                    Exit Do
                End If
            End If
            K1 = 2# * J + 1#
            K2 = 2# * J + 2#
        End If
    Loop
    A(J) = VA
    B(J) = VB
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Heap operations: pops top element from the heap
'
'PARAMETERS:
'    A       -   heap itself, must be at least array[0..N-1]
'    B       -   array of integer tags, which are updated according to
'                permutations in the heap
'    N       -   size of the heap, N>=1
'
'On output top element is moved to A[N-1], B[N-1], heap is reordered, N is
'decreased by 1.
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub TagHeapPopI(ByRef A() As Double, ByRef B() As Long, ByRef N As Long)
    Dim VA As Double
    Dim VB As Long
    If N < 1# Then
        Exit Sub
    End If
    
    '
    ' N=1 is a special case
    '
    If N = 1# Then
        N = 0#
        Exit Sub
    End If
    
    '
    ' swap top element and last element,
    ' then reorder heap
    '
    VA = A(N - 1#)
    VB = B(N - 1#)
    A(N - 1#) = A(0#)
    B(N - 1#) = B(0#)
    N = N - 1#
    Call TagHeapReplaceTopI(A, B, N, VA, VB)
End Sub
