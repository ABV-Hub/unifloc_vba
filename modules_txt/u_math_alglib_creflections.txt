''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 1992-2007 The University of Tennessee.  All rights reserved.
'
'Contributors:
'    * Sergey Bochkanov (ALGLIB project). Translation from FORTRAN to
'      pseudocode.
'
'See subroutines comments for additional copyrights.
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Generation of an elementary complex reflection transformation
'
'The subroutine generates elementary complex reflection H of  order  N,  so
'that, for a given X, the following equality holds true:
'
'     ( X(1) )   ( Beta )
'H' * (  ..  ) = (  0   ),   H'*H = I,   Beta is a real number
'     ( X(n) )   (  0   )
'
'where
'
'              ( V(1) )
'H = 1 - Tau * (  ..  ) * ( conj(V(1)), ..., conj(V(n)) )
'              ( V(n) )
'
'where the first component of vector V equals 1.
'
'Input parameters:
'    X   -   vector. Array with elements [1..N].
'    N   -   reflection order.
'
'Output parameters:
'    X   -   components from 2 to N are replaced by vector V.
'            The first component is replaced with parameter Beta.
'    Tau -   scalar value Tau.
'
'This subroutine is the modification of CLARFG subroutines  from the LAPACK
'library. It has similar functionality except for the fact that it  doesn’t
'handle errors when intermediate results cause an overflow.
'
'  -- LAPACK auxiliary routine (version 3.0) --
'     Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd.,
'     Courant Institute, Argonne National Lab, and Rice University
'     September 30, 1994
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub ComplexGenerateReflection(ByRef X() As Complex, _
         ByVal N As Long, _
         ByRef Tau As Complex)
    Dim J As Long
    Dim Alpha As Complex
    Dim ALPHI As Double
    Dim ALPHR As Double
    Dim Beta As Double
    Dim XNorm As Double
    Dim MX As Double
    Dim T As Complex
    Dim S As Double
    Dim V As Complex
    Dim i_ As Long
    If N <= 0# Then
        Tau = C_Complex(0#)
        Exit Sub
    End If
    
    '
    ' Scale if needed (to avoid overflow/underflow during intermediate
    ' calculations).
    '
    MX = 0#
    For J = 1# To N Step 1
        MX = MaxReal(AbsComplex(X(J)), MX)
    Next J
    S = 1#
    If MX <> 0# Then
        If MX < 1# Then
            S = Sqr(MinRealNumber)
            V = C_Complex(1# / S)
            For i_ = 1# To N Step 1
                X(i_) = C_Mul(V, X(i_))
            Next i_
        Else
            S = Sqr(MaxRealNumber)
            V = C_Complex(1# / S)
            For i_ = 1# To N Step 1
                X(i_) = C_Mul(V, X(i_))
            Next i_
        End If
    End If
    
    '
    ' calculate
    '
    Alpha = X(1#)
    MX = 0#
    For J = 2# To N Step 1
        MX = MaxReal(AbsComplex(X(J)), MX)
    Next J
    XNorm = 0#
    If MX <> 0# Then
        For J = 2# To N Step 1
            T = C_DivR(X(J), MX)
            XNorm = XNorm + C_Mul(T, Conj(T)).X
        Next J
        XNorm = Sqr(XNorm) * MX
    End If
    ALPHR = Alpha.X
    ALPHI = Alpha.Y
    If XNorm = 0# And ALPHI = 0# Then
        Tau = C_Complex(0#)
        X(1#) = C_MulR(X(1#), S)
        Exit Sub
    End If
    MX = MaxReal(Abs(ALPHR), Abs(ALPHI))
    MX = MaxReal(MX, Abs(XNorm))
    Beta = -(MX * Sqr(Square(ALPHR / MX) + Square(ALPHI / MX) + Square(XNorm / MX)))
    If ALPHR < 0# Then
        Beta = -Beta
    End If
    Tau.X = (Beta - ALPHR) / Beta
    Tau.Y = -(ALPHI / Beta)
    Alpha = C_RDiv(1#, C_SubR(Alpha, Beta))
    If N > 1# Then
        For i_ = 2# To N Step 1
            X(i_) = C_Mul(Alpha, X(i_))
        Next i_
    End If
    Alpha = C_Complex(Beta)
    X(1#) = Alpha
    
    '
    ' Scale back
    '
    X(1#) = C_MulR(X(1#), S)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Application of an elementary reflection to a rectangular matrix of size MxN
'
'The  algorithm  pre-multiplies  the  matrix  by  an  elementary reflection
'transformation  which  is  given  by  column  V  and  scalar  Tau (see the
'description of the GenerateReflection). Not the whole matrix  but  only  a
'part of it is transformed (rows from M1 to M2, columns from N1 to N2). Only
'the elements of this submatrix are changed.
'
'Note: the matrix is multiplied by H, not by H'.   If  it  is  required  to
'multiply the matrix by H', it is necessary to pass Conj(Tau) instead of Tau.
'
'Input parameters:
'    C       -   matrix to be transformed.
'    Tau     -   scalar defining transformation.
'    V       -   column defining transformation.
'                Array whose index ranges within [1..M2-M1+1]
'    M1, M2  -   range of rows to be transformed.
'    N1, N2  -   range of columns to be transformed.
'    WORK    -   working array whose index goes from N1 to N2.
'
'Output parameters:
'    C       -   the result of multiplying the input matrix C by the
'                transformation matrix which is given by Tau and V.
'                If N1>N2 or M1>M2, C is not modified.
'
'  -- LAPACK auxiliary routine (version 3.0) --
'     Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd.,
'     Courant Institute, Argonne National Lab, and Rice University
'     September 30, 1994
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub ComplexApplyReflectionFromTheLeft(ByRef C() As Complex, _
         ByRef Tau_ As Complex, _
         ByRef V() As Complex, _
         ByVal M1 As Long, _
         ByVal M2 As Long, _
         ByVal N1 As Long, _
         ByVal N2 As Long, _
         ByRef WORK() As Complex)
    Dim Tau As Complex
    Dim T As Complex
    Dim i As Long
    Dim VM As Long
    Dim i_ As Long
    Tau = Tau_
    If C_EqualR(Tau, 0#) Or N1 > N2 Or M1 > M2 Then
        Exit Sub
    End If
    
    '
    ' w := C^T * conj(v)
    '
    VM = M2 - M1 + 1#
    For i = N1 To N2 Step 1
        WORK(i) = C_Complex(0#)
    Next i
    For i = M1 To M2 Step 1
        T = Conj(V(i + 1# - M1))
        For i_ = N1 To N2 Step 1
            WORK(i_) = C_Add(WORK(i_), C_Mul(T, C(i, i_)))
        Next i_
    Next i
    
    '
    ' C := C - tau * v * w^T
    '
    For i = M1 To M2 Step 1
        T = C_Mul(V(i - M1 + 1#), Tau)
        For i_ = N1 To N2 Step 1
            C(i, i_) = C_Sub(C(i, i_), C_Mul(T, WORK(i_)))
        Next i_
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Application of an elementary reflection to a rectangular matrix of size MxN
'
'The  algorithm  post-multiplies  the  matrix  by  an elementary reflection
'transformation  which  is  given  by  column  V  and  scalar  Tau (see the
'description  of  the  GenerateReflection). Not the whole matrix but only a
'part  of  it  is  transformed (rows from M1 to M2, columns from N1 to N2).
'Only the elements of this submatrix are changed.
'
'Input parameters:
'    C       -   matrix to be transformed.
'    Tau     -   scalar defining transformation.
'    V       -   column defining transformation.
'                Array whose index ranges within [1..N2-N1+1]
'    M1, M2  -   range of rows to be transformed.
'    N1, N2  -   range of columns to be transformed.
'    WORK    -   working array whose index goes from M1 to M2.
'
'Output parameters:
'    C       -   the result of multiplying the input matrix C by the
'                transformation matrix which is given by Tau and V.
'                If N1>N2 or M1>M2, C is not modified.
'
'  -- LAPACK auxiliary routine (version 3.0) --
'     Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd.,
'     Courant Institute, Argonne National Lab, and Rice University
'     September 30, 1994
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub ComplexApplyReflectionFromTheRight(ByRef C() As Complex, _
         ByRef Tau_ As Complex, _
         ByRef V() As Complex, _
         ByVal M1 As Long, _
         ByVal M2 As Long, _
         ByVal N1 As Long, _
         ByVal N2 As Long, _
         ByRef WORK() As Complex)
    Dim Tau As Complex
    Dim T As Complex
    Dim i As Long
    Dim VM As Long
    Dim i_ As Long
    Dim i1_ As Long
    Tau = Tau_
    If C_EqualR(Tau, 0#) Or N1 > N2 Or M1 > M2 Then
        Exit Sub
    End If
    
    '
    ' w := C * v
    '
    VM = N2 - N1 + 1#
    For i = M1 To M2 Step 1
        i1_ = (1#) - (N1)
        T = C_Complex(0#)
        For i_ = N1 To N2 Step 1
            T = C_Add(T, C_Mul(C(i, i_), V(i_ + i1_)))
        Next i_
        WORK(i) = T
    Next i
    
    '
    ' C := C - w * conj(v^T)
    '
    For i_ = 1# To VM Step 1
        V(i_) = Conj(V(i_))
    Next i_
    For i = M1 To M2 Step 1
        T = C_Mul(WORK(i), Tau)
        i1_ = (1#) - (N1)
        For i_ = N1 To N2 Step 1
            C(i, i_) = C_Sub(C(i, i_), C_Mul(T, V(i_ + i1_)))
        Next i_
    Next i
    For i_ = 1# To VM Step 1
        V(i_) = Conj(V(i_))
    Next i_
End Sub
