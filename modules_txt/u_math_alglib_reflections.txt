''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 1992-2007 The University of Tennessee.  All rights reserved.
'
'Contributors:
'    * Sergey Bochkanov (ALGLIB project). Translation from FORTRAN to
'      pseudocode.
'
'See subroutines comments for additional copyrights.
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Generation of an elementary reflection transformation
'
'The subroutine generates elementary reflection H of order N, so that, for
'a given X, the following equality holds true:
'
'    ( X(1) )   ( Beta )
'H * (  ..  ) = (  0   )
'    ( X(n) )   (  0   )
'
'where
'              ( V(1) )
'H = 1 - Tau * (  ..  ) * ( V(1), ..., V(n) )
'              ( V(n) )
'
'where the first component of vector V equals 1.
'
'Input parameters:
'    X   -   vector. Array whose index ranges within [1..N].
'    N   -   reflection order.
'
'Output parameters:
'    X   -   components from 2 to N are replaced with vector V.
'            The first component is replaced with parameter Beta.
'    Tau -   scalar value Tau. If X is a null vector, Tau equals 0,
'            otherwise 1 <= Tau <= 2.
'
'This subroutine is the modification of the DLARFG subroutines from
'the LAPACK library.
'
'MODIFICATIONS:
'    24.12.2005 sign(Alpha) was replaced with an analogous to the Fortran SIGN code.
'
'  -- LAPACK auxiliary routine (version 3.0) --
'     Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd.,
'     Courant Institute, Argonne National Lab, and Rice University
'     September 30, 1994
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub GenerateReflection(ByRef x() As Double, _
         ByVal N As Long, _
         ByRef Tau As Double)
    Dim J As Long
    Dim Alpha As Double
    Dim XNorm As Double
    Dim V As Double
    Dim Beta As Double
    Dim MX As Double
    Dim S As Double
    Dim i_ As Long
    If N <= 1# Then
        Tau = 0#
        Exit Sub
    End If
    
    '
    ' Scale if needed (to avoid overflow/underflow during intermediate
    ' calculations).
    '
    MX = 0#
    For J = 1# To N Step 1
        MX = MaxReal(Abs(x(J)), MX)
    Next J
    S = 1#
    If MX <> 0# Then
        If MX <= MinRealNumber / MachineEpsilon Then
            S = MinRealNumber / MachineEpsilon
            V = 1# / S
            For i_ = 1# To N Step 1
                x(i_) = V * x(i_)
            Next i_
            MX = MX * V
        Else
            If MX >= MaxRealNumber * MachineEpsilon Then
                S = MaxRealNumber * MachineEpsilon
                V = 1# / S
                For i_ = 1# To N Step 1
                    x(i_) = V * x(i_)
                Next i_
                MX = MX * V
            End If
        End If
    End If
    
    '
    ' XNORM = DNRM2( N-1, X, INCX )
    '
    Alpha = x(1#)
    XNorm = 0#
    If MX <> 0# Then
        For J = 2# To N Step 1
            XNorm = XNorm + Square(x(J) / MX)
        Next J
        XNorm = Sqr(XNorm) * MX
    End If
    If XNorm = 0# Then
        
        '
        ' H  =  I
        '
        Tau = 0#
        x(1#) = x(1#) * S
        Exit Sub
    End If
    
    '
    ' general case
    '
    MX = MaxReal(Abs(Alpha), Abs(XNorm))
    Beta = -(MX * Sqr(Square(Alpha / MX) + Square(XNorm / MX)))
    If Alpha < 0# Then
        Beta = -Beta
    End If
    Tau = (Beta - Alpha) / Beta
    V = 1# / (Alpha - Beta)
    For i_ = 2# To N Step 1
        x(i_) = V * x(i_)
    Next i_
    x(1#) = Beta
    
    '
    ' Scale back outputs
    '
    x(1#) = x(1#) * S
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Application of an elementary reflection to a rectangular matrix of size MxN
'
'The algorithm pre-multiplies the matrix by an elementary reflection transformation
'which is given by column V and scalar Tau (see the description of the
'GenerateReflection procedure). Not the whole matrix but only a part of it
'is transformed (rows from M1 to M2, columns from N1 to N2). Only the elements
'of this submatrix are changed.
'
'Input parameters:
'    C       -   matrix to be transformed.
'    Tau     -   scalar defining the transformation.
'    V       -   column defining the transformation.
'                Array whose index ranges within [1..M2-M1+1].
'    M1, M2  -   range of rows to be transformed.
'    N1, N2  -   range of columns to be transformed.
'    WORK    -   working array whose indexes goes from N1 to N2.
'
'Output parameters:
'    C       -   the result of multiplying the input matrix C by the
'                transformation matrix which is given by Tau and V.
'                If N1>N2 or M1>M2, C is not modified.
'
'  -- LAPACK auxiliary routine (version 3.0) --
'     Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd.,
'     Courant Institute, Argonne National Lab, and Rice University
'     September 30, 1994
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub ApplyReflectionFromTheLeft(ByRef C() As Double, _
         ByVal Tau As Double, _
         ByRef V() As Double, _
         ByVal M1 As Long, _
         ByVal M2 As Long, _
         ByVal N1 As Long, _
         ByVal N2 As Long, _
         ByRef WORK() As Double)
    Dim T As Double
    Dim i As Long
    Dim VM As Long
    Dim i_ As Long
    If Tau = 0# Or N1 > N2 Or M1 > M2 Then
        Exit Sub
    End If
    
    '
    ' w := C' * v
    '
    VM = M2 - M1 + 1#
    For i = N1 To N2 Step 1
        WORK(i) = 0#
    Next i
    For i = M1 To M2 Step 1
        T = V(i + 1# - M1)
        For i_ = N1 To N2 Step 1
            WORK(i_) = WORK(i_) + T * C(i, i_)
        Next i_
    Next i
    
    '
    ' C := C - tau * v * w'
    '
    For i = M1 To M2 Step 1
        T = V(i - M1 + 1#) * Tau
        For i_ = N1 To N2 Step 1
            C(i, i_) = C(i, i_) - T * WORK(i_)
        Next i_
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Application of an elementary reflection to a rectangular matrix of size MxN
'
'The algorithm post-multiplies the matrix by an elementary reflection transformation
'which is given by column V and scalar Tau (see the description of the
'GenerateReflection procedure). Not the whole matrix but only a part of it
'is transformed (rows from M1 to M2, columns from N1 to N2). Only the
'elements of this submatrix are changed.
'
'Input parameters:
'    C       -   matrix to be transformed.
'    Tau     -   scalar defining the transformation.
'    V       -   column defining the transformation.
'                Array whose index ranges within [1..N2-N1+1].
'    M1, M2  -   range of rows to be transformed.
'    N1, N2  -   range of columns to be transformed.
'    WORK    -   working array whose indexes goes from M1 to M2.
'
'Output parameters:
'    C       -   the result of multiplying the input matrix C by the
'                transformation matrix which is given by Tau and V.
'                If N1>N2 or M1>M2, C is not modified.
'
'  -- LAPACK auxiliary routine (version 3.0) --
'     Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd.,
'     Courant Institute, Argonne National Lab, and Rice University
'     September 30, 1994
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub ApplyReflectionFromTheRight(ByRef C() As Double, _
         ByVal Tau As Double, _
         ByRef V() As Double, _
         ByVal M1 As Long, _
         ByVal M2 As Long, _
         ByVal N1 As Long, _
         ByVal N2 As Long, _
         ByRef WORK() As Double)
    Dim T As Double
    Dim i As Long
    Dim VM As Long
    Dim i_ As Long
    Dim i1_ As Long
    If Tau = 0# Or N1 > N2 Or M1 > M2 Then
        Exit Sub
    End If
    VM = N2 - N1 + 1#
    For i = M1 To M2 Step 1
        i1_ = (1#) - (N1)
        T = 0#
        For i_ = N1 To N2 Step 1
            T = T + C(i, i_) * V(i_ + i1_)
        Next i_
        T = T * Tau
        i1_ = (1#) - (N1)
        For i_ = N1 To N2 Step 1
            C(i, i_) = C(i, i_) - T * V(i_ + i1_)
        Next i_
    Next i
End Sub
