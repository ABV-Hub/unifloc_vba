''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2007-2008, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Data types
Public Type LinearModel
    w() As Double
End Type
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'LRReport structure contains additional information about linear model:
'* C             -   covariation matrix,  array[0..NVars,0..NVars].
'                    C[i,j] = Cov(A[i],A[j])
'* RMSError      -   root mean square error on a training set
'* AvgError      -   average error on a training set
'* AvgRelError   -   average relative error on a training set (excluding
'                    observations with zero function value).
'* CVRMSError    -   leave-one-out cross-validation estimate of
'                    generalization error. Calculated using fast algorithm
'                    with O(NVars*NPoints) complexity.
'* CVAvgError    -   cross-validation estimate of average error
'* CVAvgRelError -   cross-validation estimate of average relative error
'
'All other fields of the structure are intended for internal use and should
'not be used outside ALGLIB.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Type LRReport
    C() As Double
    RMSError As Double
    AvgError As Double
    AvgRelError As Double
    CVRMSError As Double
    CVAvgError As Double
    CVAvgRelError As Double
    NCVDefects As Long
    CVDefects() As Long
End Type
'Global constants
Private Const LRVNum As Long = 5#
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Linear regression
'
'Subroutine builds model:
'
'    Y = A(0)*X[0] + ... + A(N-1)*X[N-1] + A(N)
'
'and model found in ALGLIB format, covariation matrix, training set  errors
'(rms,  average,  average  relative)   and  leave-one-out  cross-validation
'estimate of the generalization error. CV  estimate calculated  using  fast
'algorithm with O(NPoints*NVars) complexity.
'
'When  covariation  matrix  is  calculated  standard deviations of function
'values are assumed to be equal to RMS error on the training set.
'
'INPUT PARAMETERS:
'    XY          -   training set, array [0..NPoints-1,0..NVars]:
'                    * NVars columns - independent variables
'                    * last column - dependent variable
'    NPoints     -   training set size, NPoints>NVars+1
'    NVars       -   number of independent variables
'
'OUTPUT PARAMETERS:
'    Info        -   return code:
'                    * -255, in case of unknown internal error
'                    * -4, if internal SVD subroutine haven't converged
'                    * -1, if incorrect parameters was passed (NPoints<NVars+2, NVars<1).
'                    *  1, if subroutine successfully finished
'    LM          -   linear model in the ALGLIB format. Use subroutines of
'                    this unit to work with the model.
'    AR          -   additional results
'
'
'  -- ALGLIB --
'     Copyright 02.08.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub LRBuild(ByRef XY() As Double, _
         ByVal NPoints As Long, _
         ByVal NVars As Long, _
         ByRef Info As Long, _
         ByRef LM As LinearModel, _
         ByRef AR As LRReport)
    Dim S() As Double
    Dim i As Long
    Dim Sigma2 As Double
    Dim i_ As Long
    If NPoints <= NVars + 1# Or NVars < 1# Then
        Info = -1#
        Exit Sub
    End If
    ReDim S(0# To NPoints - 1#)
    For i = 0# To NPoints - 1# Step 1
        S(i) = 1#
    Next i
    Call LRBuildS(XY, S, NPoints, NVars, Info, LM, AR)
    If Info < 0# Then
        Exit Sub
    End If
    Sigma2 = Square(AR.RMSError) * NPoints / (NPoints - NVars - 1#)
    For i = 0# To NVars Step 1
        For i_ = 0# To NVars Step 1
            AR.C(i, i_) = Sigma2 * AR.C(i, i_)
        Next i_
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Linear regression
'
'Variant of LRBuild which uses vector of standatd deviations (errors in
'function values).
'
'INPUT PARAMETERS:
'    XY          -   training set, array [0..NPoints-1,0..NVars]:
'                    * NVars columns - independent variables
'                    * last column - dependent variable
'    S           -   standard deviations (errors in function values)
'                    array[0..NPoints-1], S[i]>0.
'    NPoints     -   training set size, NPoints>NVars+1
'    NVars       -   number of independent variables
'
'OUTPUT PARAMETERS:
'    Info        -   return code:
'                    * -255, in case of unknown internal error
'                    * -4, if internal SVD subroutine haven't converged
'                    * -1, if incorrect parameters was passed (NPoints<NVars+2, NVars<1).
'                    * -2, if S[I]<=0
'                    *  1, if subroutine successfully finished
'    LM          -   linear model in the ALGLIB format. Use subroutines of
'                    this unit to work with the model.
'    AR          -   additional results
'
'
'  -- ALGLIB --
'     Copyright 02.08.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub LRBuildS(ByRef XY() As Double, _
         ByRef S() As Double, _
         ByVal NPoints As Long, _
         ByVal NVars As Long, _
         ByRef Info As Long, _
         ByRef LM As LinearModel, _
         ByRef AR As LRReport)
    Dim XYI() As Double
    Dim X() As Double
    Dim Means() As Double
    Dim Sigmas() As Double
    Dim i As Long
    Dim j As Long
    Dim V As Double
    Dim Offs As Long
    Dim Mean As Double
    Dim Variance As Double
    Dim Skewness As Double
    Dim Kurtosis As Double
    Dim i_ As Long
    
    '
    ' Test parameters
    '
    If NPoints <= NVars + 1# Or NVars < 1# Then
        Info = -1#
        Exit Sub
    End If
    
    '
    ' Copy data, add one more column (constant term)
    '
    ReDim XYI(0# To NPoints - 1#, 0# To NVars + 1#)
    For i = 0# To NPoints - 1# Step 1
        For i_ = 0# To NVars - 1# Step 1
            XYI(i, i_) = XY(i, i_)
        Next i_
        XYI(i, NVars) = 1#
        XYI(i, NVars + 1#) = XY(i, NVars)
    Next i
    
    '
    ' Standartization
    '
    ReDim X(0# To NPoints - 1#)
    ReDim Means(0# To NVars - 1#)
    ReDim Sigmas(0# To NVars - 1#)
    For j = 0# To NVars - 1# Step 1
        For i_ = 0# To NPoints - 1# Step 1
            X(i_) = XY(i_, j)
        Next i_
        Call CalculateMoments(X, NPoints, Mean, Variance, Skewness, Kurtosis)
        Means(j) = Mean
        Sigmas(j) = Sqr(Variance)
        If Sigmas(j) = 0# Then
            Sigmas(j) = 1#
        End If
        For i = 0# To NPoints - 1# Step 1
            XYI(i, j) = (XYI(i, j) - Means(j)) / Sigmas(j)
        Next i
    Next j
    
    '
    ' Internal processing
    '
    Call LRInternal(XYI, S, NPoints, NVars + 1#, Info, LM, AR)
    If Info < 0# Then
        Exit Sub
    End If
    
    '
    ' Un-standartization
    '
    Offs = Round(LM.w(3#))
    For j = 0# To NVars - 1# Step 1
        
        '
        ' Constant term is updated (and its covariance too,
        ' since it gets some variance from J-th component)
        '
        LM.w(Offs + NVars) = LM.w(Offs + NVars) - LM.w(Offs + j) * Means(j) / Sigmas(j)
        V = Means(j) / Sigmas(j)
        For i_ = 0# To NVars Step 1
            AR.C(NVars, i_) = AR.C(NVars, i_) - V * AR.C(j, i_)
        Next i_
        For i_ = 0# To NVars Step 1
            AR.C(i_, NVars) = AR.C(i_, NVars) - V * AR.C(i_, j)
        Next i_
        
        '
        ' J-th term is updated
        '
        LM.w(Offs + j) = LM.w(Offs + j) / Sigmas(j)
        V = 1# / Sigmas(j)
        For i_ = 0# To NVars Step 1
            AR.C(j, i_) = V * AR.C(j, i_)
        Next i_
        For i_ = 0# To NVars Step 1
            AR.C(i_, j) = V * AR.C(i_, j)
        Next i_
    Next j
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Like LRBuildS, but builds model
'
'    Y = A(0)*X[0] + ... + A(N-1)*X[N-1]
'
'i.e. with zero constant term.
'
'  -- ALGLIB --
'     Copyright 30.10.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub LRBuildZS(ByRef XY() As Double, _
         ByRef S() As Double, _
         ByVal NPoints As Long, _
         ByVal NVars As Long, _
         ByRef Info As Long, _
         ByRef LM As LinearModel, _
         ByRef AR As LRReport)
    Dim XYI() As Double
    Dim X() As Double
    Dim C() As Double
    Dim i As Long
    Dim j As Long
    Dim V As Double
    Dim Offs As Long
    Dim Mean As Double
    Dim Variance As Double
    Dim Skewness As Double
    Dim Kurtosis As Double
    Dim i_ As Long
    
    '
    ' Test parameters
    '
    If NPoints <= NVars + 1# Or NVars < 1# Then
        Info = -1#
        Exit Sub
    End If
    
    '
    ' Copy data, add one more column (constant term)
    '
    ReDim XYI(0# To NPoints - 1#, 0# To NVars + 1#)
    For i = 0# To NPoints - 1# Step 1
        For i_ = 0# To NVars - 1# Step 1
            XYI(i, i_) = XY(i, i_)
        Next i_
        XYI(i, NVars) = 0#
        XYI(i, NVars + 1#) = XY(i, NVars)
    Next i
    
    '
    ' Standartization: unusual scaling
    '
    ReDim X(0# To NPoints - 1#)
    ReDim C(0# To NVars - 1#)
    For j = 0# To NVars - 1# Step 1
        For i_ = 0# To NPoints - 1# Step 1
            X(i_) = XY(i_, j)
        Next i_
        Call CalculateMoments(X, NPoints, Mean, Variance, Skewness, Kurtosis)
        If Abs(Mean) > Sqr(Variance) Then
            
            '
            ' variation is relatively small, it is better to
            ' bring mean value to 1
            '
            C(j) = Mean
        Else
            
            '
            ' variation is large, it is better to bring variance to 1
            '
            If Variance = 0# Then
                Variance = 1#
            End If
            C(j) = Sqr(Variance)
        End If
        For i = 0# To NPoints - 1# Step 1
            XYI(i, j) = XYI(i, j) / C(j)
        Next i
    Next j
    
    '
    ' Internal processing
    '
    Call LRInternal(XYI, S, NPoints, NVars + 1#, Info, LM, AR)
    If Info < 0# Then
        Exit Sub
    End If
    
    '
    ' Un-standartization
    '
    Offs = Round(LM.w(3#))
    For j = 0# To NVars - 1# Step 1
        
        '
        ' J-th term is updated
        '
        LM.w(Offs + j) = LM.w(Offs + j) / C(j)
        V = 1# / C(j)
        For i_ = 0# To NVars Step 1
            AR.C(j, i_) = V * AR.C(j, i_)
        Next i_
        For i_ = 0# To NVars Step 1
            AR.C(i_, j) = V * AR.C(i_, j)
        Next i_
    Next j
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Like LRBuild but builds model
'
'    Y = A(0)*X[0] + ... + A(N-1)*X[N-1]
'
'i.e. with zero constant term.
'
'  -- ALGLIB --
'     Copyright 30.10.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub LRBuildZ(ByRef XY() As Double, _
         ByVal NPoints As Long, _
         ByVal NVars As Long, _
         ByRef Info As Long, _
         ByRef LM As LinearModel, _
         ByRef AR As LRReport)
    Dim S() As Double
    Dim i As Long
    Dim Sigma2 As Double
    Dim i_ As Long
    If NPoints <= NVars + 1# Or NVars < 1# Then
        Info = -1#
        Exit Sub
    End If
    ReDim S(0# To NPoints - 1#)
    For i = 0# To NPoints - 1# Step 1
        S(i) = 1#
    Next i
    Call LRBuildZS(XY, S, NPoints, NVars, Info, LM, AR)
    If Info < 0# Then
        Exit Sub
    End If
    Sigma2 = Square(AR.RMSError) * NPoints / (NPoints - NVars - 1#)
    For i = 0# To NVars Step 1
        For i_ = 0# To NVars Step 1
            AR.C(i, i_) = Sigma2 * AR.C(i, i_)
        Next i_
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Unpacks coefficients of linear model.
'
'INPUT PARAMETERS:
'    LM          -   linear model in ALGLIB format
'
'OUTPUT PARAMETERS:
'    V           -   coefficients, array[0..NVars]
'    NVars       -   number of independent variables (one less than number
'                    of coefficients)
'
'  -- ALGLIB --
'     Copyright 30.08.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub LRUnpack(ByRef LM As LinearModel, _
         ByRef V() As Double, _
         ByRef NVars As Long)
    Dim Offs As Long
    Dim i_ As Long
    Dim i1_ As Long
    NVars = Round(LM.w(2#))
    Offs = Round(LM.w(3#))
    ReDim V(0# To NVars)
    i1_ = (Offs) - (0#)
    For i_ = 0# To NVars Step 1
        V(i_) = LM.w(i_ + i1_)
    Next i_
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'"Packs" coefficients and creates linear model in ALGLIB format (LRUnpack
'reversed).
'
'INPUT PARAMETERS:
'    V           -   coefficients, array[0..NVars]
'    NVars       -   number of independent variables
'
'OUTPUT PAREMETERS:
'    LM          -   linear model.
'
'  -- ALGLIB --
'     Copyright 30.08.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub LRPack(ByRef V() As Double, _
         ByVal NVars As Long, _
         ByRef LM As LinearModel)
    Dim Offs As Long
    Dim i_ As Long
    Dim i1_ As Long
    ReDim LM.w(0# To 4# + NVars)
    Offs = 4#
    LM.w(0#) = 4# + NVars + 1#
    LM.w(1#) = LRVNum
    LM.w(2#) = NVars
    LM.w(3#) = Offs
    i1_ = (0#) - (Offs)
    For i_ = Offs To Offs + NVars Step 1
        LM.w(i_) = V(i_ + i1_)
    Next i_
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Procesing
'
'INPUT PARAMETERS:
'    LM      -   linear model
'    X       -   input vector,  array[0..NVars-1].
'
'Result:
'    value of linear model regression estimate
'
'  -- ALGLIB --
'     Copyright 03.09.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function LRProcess(ByRef LM As LinearModel, _
         ByRef X() As Double) As Double
    Dim Result As Double
    Dim V As Double
    Dim Offs As Long
    Dim NVars As Long
    Dim i_ As Long
    Dim i1_ As Long
    NVars = Round(LM.w(2#))
    Offs = Round(LM.w(3#))
    i1_ = (Offs) - (0#)
    V = 0#
    For i_ = 0# To NVars - 1# Step 1
        V = V + X(i_) * LM.w(i_ + i1_)
    Next i_
    Result = V + LM.w(Offs + NVars)
    LRProcess = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'RMS error on the test set
'
'INPUT PARAMETERS:
'    LM      -   linear model
'    XY      -   test set
'    NPoints -   test set size
'
'RESULT:
'    root mean square error.
'
'  -- ALGLIB --
'     Copyright 30.08.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function LRRMSError(ByRef LM As LinearModel, _
         ByRef XY() As Double, _
         ByVal NPoints As Long) As Double
    Dim Result As Double
    Dim i As Long
    Dim V As Double
    Dim Offs As Long
    Dim NVars As Long
    Dim i_ As Long
    Dim i1_ As Long
    NVars = Round(LM.w(2#))
    Offs = Round(LM.w(3#))
    Result = 0#
    For i = 0# To NPoints - 1# Step 1
        i1_ = (Offs) - (0#)
        V = 0#
        For i_ = 0# To NVars - 1# Step 1
            V = V + XY(i, i_) * LM.w(i_ + i1_)
        Next i_
        V = V + LM.w(Offs + NVars)
        Result = Result + Square(V - XY(i, NVars))
    Next i
    Result = Sqr(Result / NPoints)
    LRRMSError = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Average error on the test set
'
'INPUT PARAMETERS:
'    LM      -   linear model
'    XY      -   test set
'    NPoints -   test set size
'
'RESULT:
'    average error.
'
'  -- ALGLIB --
'     Copyright 30.08.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function LRAvgError(ByRef LM As LinearModel, _
         ByRef XY() As Double, _
         ByVal NPoints As Long) As Double
    Dim Result As Double
    Dim i As Long
    Dim V As Double
    Dim Offs As Long
    Dim NVars As Long
    Dim i_ As Long
    Dim i1_ As Long
    NVars = Round(LM.w(2#))
    Offs = Round(LM.w(3#))
    Result = 0#
    For i = 0# To NPoints - 1# Step 1
        i1_ = (Offs) - (0#)
        V = 0#
        For i_ = 0# To NVars - 1# Step 1
            V = V + XY(i, i_) * LM.w(i_ + i1_)
        Next i_
        V = V + LM.w(Offs + NVars)
        Result = Result + Abs(V - XY(i, NVars))
    Next i
    Result = Result / NPoints
    LRAvgError = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'RMS error on the test set
'
'INPUT PARAMETERS:
'    LM      -   linear model
'    XY      -   test set
'    NPoints -   test set size
'
'RESULT:
'    average relative error.
'
'  -- ALGLIB --
'     Copyright 30.08.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function LRAvgRelError(ByRef LM As LinearModel, _
         ByRef XY() As Double, _
         ByVal NPoints As Long) As Double
    Dim Result As Double
    Dim i As Long
    Dim K As Long
    Dim V As Double
    Dim Offs As Long
    Dim NVars As Long
    Dim i_ As Long
    Dim i1_ As Long
    NVars = Round(LM.w(2#))
    Offs = Round(LM.w(3#))
    Result = 0#
    K = 0#
    For i = 0# To NPoints - 1# Step 1
        If XY(i, NVars) <> 0# Then
            i1_ = (Offs) - (0#)
            V = 0#
            For i_ = 0# To NVars - 1# Step 1
                V = V + XY(i, i_) * LM.w(i_ + i1_)
            Next i_
            V = V + LM.w(Offs + NVars)
            Result = Result + Abs((V - XY(i, NVars)) / XY(i, NVars))
            K = K + 1#
        End If
    Next i
    If K <> 0# Then
        Result = Result / K
    End If
    LRAvgRelError = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copying of LinearModel strucure
'
'INPUT PARAMETERS:
'    LM1 -   original
'
'OUTPUT PARAMETERS:
'    LM2 -   copy
'
'  -- ALGLIB --
'     Copyright 15.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub LRCopy(ByRef LM1 As LinearModel, ByRef LM2 As LinearModel)
    Dim K As Long
    Dim i_ As Long
    K = Round(LM1.w(0#))
    ReDim LM2.w(0# To K - 1#)
    For i_ = 0# To K - 1# Step 1
        LM2.w(i_) = LM1.w(i_)
    Next i_
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Serialization of LinearModel strucure
'
'INPUT PARAMETERS:
'    LM      -   original
'
'OUTPUT PARAMETERS:
'    RA      -   array of real numbers which stores model,
'                array[0..RLen-1]
'    RLen    -   RA lenght
'
'  -- ALGLIB --
'     Copyright 15.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub LRSerialize(ByRef LM As LinearModel, _
         ByRef RA() As Double, _
         ByRef RLen As Long)
    Dim i_ As Long
    Dim i1_ As Long
    RLen = Round(LM.w(0#)) + 1#
    ReDim RA(0# To RLen - 1#)
    RA(0#) = LRVNum
    i1_ = (0#) - (1#)
    For i_ = 1# To RLen - 1# Step 1
        RA(i_) = LM.w(i_ + i1_)
    Next i_
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Unserialization of DecisionForest strucure
'
'INPUT PARAMETERS:
'    RA      -   real array which stores decision forest
'
'OUTPUT PARAMETERS:
'    LM      -   unserialized structure
'
'  -- ALGLIB --
'     Copyright 15.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub LRUnserialize(ByRef RA() As Double, ByRef LM As LinearModel)
    Dim i_ As Long
    Dim i1_ As Long
    ReDim LM.w(0# To Round(RA(1#)) - 1#)
    i1_ = (1#) - (0#)
    For i_ = 0# To Round(RA(1#)) - 1# Step 1
        LM.w(i_) = RA(i_ + i1_)
    Next i_
End Sub
Public Sub LRLineS(ByRef XY() As Double, _
         ByRef S() As Double, _
         ByVal N As Long, _
         ByRef Info As Long, _
         ByRef A As Double, _
         ByRef B As Double, _
         ByRef VarA As Double, _
         ByRef VarB As Double, _
         ByRef CovAB As Double, _
         ByRef CorrAB As Double, _
         ByRef p As Double)
    Dim i As Long
    Dim SS As Double
    Dim SX As Double
    Dim SXX As Double
    Dim SY As Double
    Dim STT As Double
    Dim E1 As Double
    Dim E2 As Double
    Dim T As Double
    Dim Chi2 As Double
    If N < 2# Then
        Info = -1#
        Exit Sub
    End If
    For i = 0# To N - 1# Step 1
        If S(i) <= 0# Then
            Info = -2#
            Exit Sub
        End If
    Next i
    Info = 1#
    
    '
    ' Calculate S, SX, SY, SXX
    '
    SS = 0#
    SX = 0#
    SY = 0#
    SXX = 0#
    For i = 0# To N - 1# Step 1
        T = Square(S(i))
        SS = SS + 1# / T
        SX = SX + XY(i, 0#) / T
        SY = SY + XY(i, 1#) / T
        SXX = SXX + Square(XY(i, 0#)) / T
    Next i
    
    '
    ' Test for condition number
    '
    T = Sqr(4# * Square(SX) + Square(SS - SXX))
    E1 = 0.5 * (SS + SXX + T)
    E2 = 0.5 * (SS + SXX - T)
    If MinReal(E1, E2) <= 1000# * MachineEpsilon * MaxReal(E1, E2) Then
        Info = -3#
        Exit Sub
    End If
    
    '
    ' Calculate A, B
    '
    A = 0#
    B = 0#
    STT = 0#
    For i = 0# To N - 1# Step 1
        T = (XY(i, 0#) - SX / SS) / S(i)
        B = B + T * XY(i, 1#) / S(i)
        STT = STT + Square(T)
    Next i
    B = B / STT
    A = (SY - SX * B) / SS
    
    '
    ' Calculate goodness-of-fit
    '
    If N > 2# Then
        Chi2 = 0#
        For i = 0# To N - 1# Step 1
            Chi2 = Chi2 + Square((XY(i, 1#) - A - B * XY(i, 0#)) / S(i))
        Next i
        p = IncompleteGammaC((N - 2#) / 2#, Chi2 / 2#)
    Else
        p = 1#
    End If
    
    '
    ' Calculate other parameters
    '
    VarA = (1# + Square(SX) / (SS * STT)) / SS
    VarB = 1# / STT
    CovAB = -(SX / (SS * STT))
    CorrAB = CovAB / Sqr(VarA * VarB)
End Sub
Public Sub LRLine(ByRef XY() As Double, _
         ByVal N As Long, _
         ByRef Info As Long, _
         ByRef A As Double, _
         ByRef B As Double)
    Dim S() As Double
    Dim i As Long
    Dim VarA As Double
    Dim VarB As Double
    Dim CovAB As Double
    Dim CorrAB As Double
    Dim p As Double
    If N < 2# Then
        Info = -1#
        Exit Sub
    End If
    ReDim S(0# To N - 1#)
    For i = 0# To N - 1# Step 1
        S(i) = 1#
    Next i
    Call LRLineS(XY, S, N, Info, A, B, VarA, VarB, CovAB, CorrAB, p)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal linear regression subroutine
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub LRInternal(ByRef XY() As Double, _
         ByRef S() As Double, _
         ByVal NPoints As Long, _
         ByVal NVars As Long, _
         ByRef Info As Long, _
         ByRef LM As LinearModel, _
         ByRef AR As LRReport)
    Dim A() As Double
    Dim U() As Double
    Dim VT() As Double
    Dim VM() As Double
    Dim XYM() As Double
    Dim B() As Double
    Dim SV() As Double
    Dim T() As Double
    Dim SVI() As Double
    Dim WORK() As Double
    Dim i As Long
    Dim j As Long
    Dim K As Long
    Dim NCV As Long
    Dim NA As Long
    Dim NACV As Long
    Dim R As Double
    Dim p As Double
    Dim EpsTol As Double
    Dim AR2 As LRReport
    Dim Offs As Long
    Dim TLM As LinearModel
    Dim i_ As Long
    Dim i1_ As Long
    EpsTol = 1000#
    
    '
    ' Check for errors in data
    '
    If NPoints < NVars Or NVars < 1# Then
        Info = -1#
        Exit Sub
    End If
    For i = 0# To NPoints - 1# Step 1
        If S(i) <= 0# Then
            Info = -2#
            Exit Sub
        End If
    Next i
    Info = 1#
    
    '
    ' Create design matrix
    '
    ReDim A(0# To NPoints - 1#, 0# To NVars - 1#)
    ReDim B(0# To NPoints - 1#)
    For i = 0# To NPoints - 1# Step 1
        R = 1# / S(i)
        For i_ = 0# To NVars - 1# Step 1
            A(i, i_) = R * XY(i, i_)
        Next i_
        B(i) = XY(i, NVars) / S(i)
    Next i
    
    '
    ' Allocate W:
    ' W[0]     array size
    ' W[1]     version number, 0
    ' W[2]     NVars (minus 1, to be compatible with external representation)
    ' W[3]     coefficients offset
    '
    ReDim LM.w(0# To 4# + NVars - 1#)
    Offs = 4#
    LM.w(0#) = 4# + NVars
    LM.w(1#) = LRVNum
    LM.w(2#) = NVars - 1#
    LM.w(3#) = Offs
    
    '
    ' Solve problem using SVD:
    '
    ' 0. check for degeneracy (different types)
    ' 1. A = U*diag(sv)*V'
    ' 2. T = b'*U
    ' 3. w = SUM((T[i]/sv[i])*V[..,i])
    ' 4. cov(wi,wj) = SUM(Vji*Vjk/sv[i]^2,K=1..M)
    '
    ' see $15.4 of "Numerical Recipes in C" for more information
    '
    ReDim T(0# To NVars - 1#)
    ReDim SVI(0# To NVars - 1#)
    ReDim AR.C(0# To NVars - 1#, 0# To NVars - 1#)
    ReDim VM(0# To NVars - 1#, 0# To NVars - 1#)
    If Not RMatrixSVD(A, NPoints, NVars, 1#, 1#, 2#, SV, U, VT) Then
        Info = -4#
        Exit Sub
    End If
    If SV(0#) <= 0# Then
        
        '
        ' Degenerate case: zero design matrix.
        '
        For i = Offs To Offs + NVars - 1# Step 1
            LM.w(i) = 0#
        Next i
        AR.RMSError = LRRMSError(LM, XY, NPoints)
        AR.AvgError = LRAvgError(LM, XY, NPoints)
        AR.AvgRelError = LRAvgRelError(LM, XY, NPoints)
        AR.CVRMSError = AR.RMSError
        AR.CVAvgError = AR.AvgError
        AR.CVAvgRelError = AR.AvgRelError
        AR.NCVDefects = 0#
        ReDim AR.CVDefects(0# To NVars - 1#)
        ReDim AR.C(0# To NVars - 1#, 0# To NVars - 1#)
        For i = 0# To NVars - 1# Step 1
            For j = 0# To NVars - 1# Step 1
                AR.C(i, j) = 0#
            Next j
        Next i
        Exit Sub
    End If
    If SV(NVars - 1#) <= EpsTol * MachineEpsilon * SV(0#) Then
        
        '
        ' Degenerate case, non-zero design matrix.
        '
        ' We can leave it and solve task in SVD least squares fashion.
        ' Solution and covariance matrix will be obtained correctly,
        ' but CV error estimates - will not. It is better to reduce
        ' it to non-degenerate task and to obtain correct CV estimates.
        '
        For K = NVars To 1# Step -1
            If SV(K - 1#) > EpsTol * MachineEpsilon * SV(0#) Then
                
                '
                ' Reduce
                '
                ReDim XYM(0# To NPoints - 1#, 0# To K)
                For i = 0# To NPoints - 1# Step 1
                    For j = 0# To K - 1# Step 1
                        R = 0#
                        For i_ = 0# To NVars - 1# Step 1
                            R = R + XY(i, i_) * VT(j, i_)
                        Next i_
                        XYM(i, j) = R
                    Next j
                    XYM(i, K) = XY(i, NVars)
                Next i
                
                '
                ' Solve
                '
                Call LRInternal(XYM, S, NPoints, K, Info, TLM, AR2)
                If Info <> 1# Then
                    Exit Sub
                End If
                
                '
                ' Convert back to un-reduced format
                '
                For j = 0# To NVars - 1# Step 1
                    LM.w(Offs + j) = 0#
                Next j
                For j = 0# To K - 1# Step 1
                    R = TLM.w(Offs + j)
                    i1_ = (0#) - (Offs)
                    For i_ = Offs To Offs + NVars - 1# Step 1
                        LM.w(i_) = LM.w(i_) + R * VT(j, i_ + i1_)
                    Next i_
                Next j
                AR.RMSError = AR2.RMSError
                AR.AvgError = AR2.AvgError
                AR.AvgRelError = AR2.AvgRelError
                AR.CVRMSError = AR2.CVRMSError
                AR.CVAvgError = AR2.CVAvgError
                AR.CVAvgRelError = AR2.CVAvgRelError
                AR.NCVDefects = AR2.NCVDefects
                ReDim AR.CVDefects(0# To NVars - 1#)
                For j = 0# To AR.NCVDefects - 1# Step 1
                    AR.CVDefects(j) = AR2.CVDefects(j)
                Next j
                ReDim AR.C(0# To NVars - 1#, 0# To NVars - 1#)
                ReDim WORK(1# To NVars)
                Call MatrixMatrixMultiply(AR2.C, 0#, K - 1#, 0#, K - 1#, False, VT, 0#, K - 1#, 0#, NVars - 1#, False, 1#, VM, 0#, K - 1#, 0#, NVars - 1#, 0#, WORK)
                Call MatrixMatrixMultiply(VT, 0#, K - 1#, 0#, NVars - 1#, True, VM, 0#, K - 1#, 0#, NVars - 1#, False, 1#, AR.C, 0#, NVars - 1#, 0#, NVars - 1#, 0#, WORK)
                Exit Sub
            End If
        Next K
        Info = -255#
        Exit Sub
    End If
    For i = 0# To NVars - 1# Step 1
        If SV(i) > EpsTol * MachineEpsilon * SV(0#) Then
            SVI(i) = 1# / SV(i)
        Else
            SVI(i) = 0#
        End If
    Next i
    For i = 0# To NVars - 1# Step 1
        T(i) = 0#
    Next i
    For i = 0# To NPoints - 1# Step 1
        R = B(i)
        For i_ = 0# To NVars - 1# Step 1
            T(i_) = T(i_) + R * U(i, i_)
        Next i_
    Next i
    For i = 0# To NVars - 1# Step 1
        LM.w(Offs + i) = 0#
    Next i
    For i = 0# To NVars - 1# Step 1
        R = T(i) * SVI(i)
        i1_ = (0#) - (Offs)
        For i_ = Offs To Offs + NVars - 1# Step 1
            LM.w(i_) = LM.w(i_) + R * VT(i, i_ + i1_)
        Next i_
    Next i
    For j = 0# To NVars - 1# Step 1
        R = SVI(j)
        For i_ = 0# To NVars - 1# Step 1
            VM(i_, j) = R * VT(j, i_)
        Next i_
    Next j
    For i = 0# To NVars - 1# Step 1
        For j = i To NVars - 1# Step 1
            R = 0#
            For i_ = 0# To NVars - 1# Step 1
                R = R + VM(i, i_) * VM(j, i_)
            Next i_
            AR.C(i, j) = R
            AR.C(j, i) = R
        Next j
    Next i
    
    '
    ' Leave-1-out cross-validation error.
    '
    ' NOTATIONS:
    ' A            design matrix
    ' A*x = b      original linear least squares task
    ' U*S*V'       SVD of A
    ' ai           i-th row of the A
    ' bi           i-th element of the b
    ' xf           solution of the original LLS task
    '
    ' Cross-validation error of i-th element from a sample is
    ' calculated using following formula:
    '
    '     ERRi = ai*xf - (ai*xf-bi*(ui*ui'))/(1-ui*ui')     (1)
    '
    ' This formula can be derived from normal equations of the
    ' original task
    '
    '     (A'*A)x = A'*b                                    (2)
    '
    ' by applying modification (zeroing out i-th row of A) to (2):
    '
    '     (A-ai)'*(A-ai) = (A-ai)'*b
    '
    ' and using Sherman-Morrison formula for updating matrix inverse
    '
    ' NOTE 1: b is not zeroed out since it is much simpler and
    ' does not influence final result.
    '
    ' NOTE 2: some design matrices A have such ui that 1-ui*ui'=0.
    ' Formula (1) can't be applied for such cases and they are skipped
    ' from CV calculation (which distorts resulting CV estimate).
    ' But from the properties of U we can conclude that there can
    ' be no more than NVars such vectors. Usually
    ' NVars << NPoints, so in a normal case it only slightly
    ' influences result.
    '
    NCV = 0#
    NA = 0#
    NACV = 0#
    AR.RMSError = 0#
    AR.AvgError = 0#
    AR.AvgRelError = 0#
    AR.CVRMSError = 0#
    AR.CVAvgError = 0#
    AR.CVAvgRelError = 0#
    AR.NCVDefects = 0#
    ReDim AR.CVDefects(0# To NVars - 1#)
    For i = 0# To NPoints - 1# Step 1
        
        '
        ' Error on a training set
        '
        i1_ = (Offs) - (0#)
        R = 0#
        For i_ = 0# To NVars - 1# Step 1
            R = R + XY(i, i_) * LM.w(i_ + i1_)
        Next i_
        AR.RMSError = AR.RMSError + Square(R - XY(i, NVars))
        AR.AvgError = AR.AvgError + Abs(R - XY(i, NVars))
        If XY(i, NVars) <> 0# Then
            AR.AvgRelError = AR.AvgRelError + Abs((R - XY(i, NVars)) / XY(i, NVars))
            NA = NA + 1#
        End If
        
        '
        ' Error using fast leave-one-out cross-validation
        '
        p = 0#
        For i_ = 0# To NVars - 1# Step 1
            p = p + U(i, i_) * U(i, i_)
        Next i_
        If p > 1# - EpsTol * MachineEpsilon Then
            AR.CVDefects(AR.NCVDefects) = i
            AR.NCVDefects = AR.NCVDefects + 1#
            GoTo Cont_20
        End If
        R = S(i) * (R / S(i) - B(i) * p) / (1# - p)
        AR.CVRMSError = AR.CVRMSError + Square(R - XY(i, NVars))
        AR.CVAvgError = AR.CVAvgError + Abs(R - XY(i, NVars))
        If XY(i, NVars) <> 0# Then
            AR.CVAvgRelError = AR.CVAvgRelError + Abs((R - XY(i, NVars)) / XY(i, NVars))
            NACV = NACV + 1#
        End If
        NCV = NCV + 1#
Cont_20:
    Next i
    If NCV = 0# Then
        
        '
        ' Something strange: ALL ui are degenerate.
        ' Unexpected...
        '
        Info = -255#
        Exit Sub
    End If
    AR.RMSError = Sqr(AR.RMSError / NPoints)
    AR.AvgError = AR.AvgError / NPoints
    If NA <> 0# Then
        AR.AvgRelError = AR.AvgRelError / NA
    End If
    AR.CVRMSError = Sqr(AR.CVRMSError / NCV)
    AR.CVAvgError = AR.CVAvgError / NCV
    If NACV <> 0# Then
        AR.CVAvgRelError = AR.CVAvgRelError / NACV
    End If
End Sub

