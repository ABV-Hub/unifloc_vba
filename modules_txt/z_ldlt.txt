''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 1992-2007 The University of Tennessee.  All rights reserved.
'
'Contributors:
'    * Sergey Bochkanov (ALGLIB project). Translation from FORTRAN to
'      pseudocode.
'
'See subroutines comments for additional copyrights.
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'LDLTDecomposition of a symmetric matrix
'
'The algorithm represents a symmetric matrix (which is not necessarily
'positive definite) as A=L*D*L' or A = U*D*U', where D is a block-diagonal
'matrix with blocks 1x1 or 2x2, matrix L (matrix U) is a product of lower
'(upper) triangular matrices with unit diagonal and permutation matrices.
'
'Input parameters:
'    A       -   factorized matrix, array with elements [0..N-1, 0..N-1].
'                If IsUpper – True, then the upper triangle contains
'                elements of symmetric matrix A, and the lower triangle is
'                not used.
'                The same applies if IsUpper = False.
'    N       -   size of factorized matrix.
'    IsUpper -   parameter which shows a method of matrix definition (lower
'                or upper triangle).
'
'Output parameters:
'    A       -   matrices D and U, if IsUpper = True, or L, if IsUpper = False,
'                in compact form, replacing the upper (lower) triangle of
'                matrix A. In that case, the elements under (over) the main
'                diagonal are not used nor modified.
'    Pivots  -   tables of performed permutations (see below).
'
'If IsUpper = True, then A = U*D*U', U = P(n)*U(n)*...*P(k)*U(k), where
'P(k) is the permutation matrix, U(k) - upper triangular matrix with its
'unit main diagonal and k decreases from n with step s which is equal to
'1 or 2 (according to the size of the blocks of matrix D).
'
'        (   I    v    0   )   k-s+1
'U(k) =  (   0    I    0   )   s
'        (   0    0    I   )   n-k-1
'           k-s+1 s   n-k-1
'
'If Pivots[k]>=0, then s=1, P(k) - permutation of rows k and Pivots[k], the
'vectorv forming matrix U(k) is stored in elements A(0:k-1,k), D(k) replaces
'A(k,k). If Pivots[k]=Pivots[k-1]<0 then s=2, P(k) - permutation of rows k-1
'and N+Pivots[k-1], the vector v forming matrix U(k) is stored in elements
'A(0:k-1,k:k+1), the upper triangle of block D(k) is stored in A(k,k),
'A(k,k+1) and A(k+1,k+1).
'
'If IsUpper = False, then A = L*D*L', L=P(0)*L(0)*...*P(k)*L(k), where P(k)
'is the permutation matrix, L(k) – lower triangular matrix with unit main
'diagonal and k decreases from 1 with step s which is equal to 1 or 2
'(according to the size of the blocks of matrix D).
'
'        (   I    0     0   )  k-1
'L(k) =  (   0    I     0   )  s
'        (   0    v     I   )  n-k-s+1
'           k-1   s  n-k-s+1
'
'If Pivots[k]>=0 then s=1, P(k) – permutation of rows k and Pivots[k], the
'vector v forming matrix L(k) is stored in elements A(k+1:n-1,k), D(k)
'replaces A(k,k). If Pivots[k]=Pivots[k+1]<0 then s=2, P(k) - permutation
'of rows k+1 and N+Pivots[k+1], the vector v forming matrix L(k) is stored
'in elements A(k+2:n-1,k:k+1), the lower triangle of block D(k) is stored in
'A(k,k), A(k+1,k) and A(k+1,k+1).
'
'  -- LAPACK routine (version 3.0) --
'     Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd.,
'     Courant Institute, Argonne National Lab, and Rice University
'     June 30, 1999
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub SMatrixLDLT(ByRef A() As Double, _
         ByVal N As Long, _
         ByVal IsUpper As Boolean, _
         ByRef Pivots() As Long)
    Dim i As Long
    Dim IMAX As Long
    Dim j As Long
    Dim JMax As Long
    Dim K As Long
    Dim KK As Long
    Dim KP As Long
    Dim KSTEP As Long
    Dim ABSAKK As Double
    Dim Alpha As Double
    Dim COLMAX As Double
    Dim D11 As Double
    Dim D12 As Double
    Dim D21 As Double
    Dim D22 As Double
    Dim R1 As Double
    Dim ROWMAX As Double
    Dim T As Double
    Dim WK As Double
    Dim WKM1 As Double
    Dim WKP1 As Double
    Dim II As Long
    Dim I1 As Long
    Dim I2 As Long
    Dim VV As Double
    Dim temp() As Double
    Dim i_ As Long
    ReDim Pivots(0# To N - 1#)
    ReDim temp(0# To N - 1#)
    
    '
    ' Initialize ALPHA for use in choosing pivot block size.
    '
    Alpha = (1# + Sqr(17#)) / 8#
    If IsUpper Then
        
        '
        ' Factorize A as U*D*U' using the upper triangle of A
        '
        '
        ' K is the main loop index, decreasing from N to 1 in steps of
        ' 1 or 2
        '
        K = N - 1#
        Do While K >= 0#
            KSTEP = 1#
            
            '
            ' Determine rows and columns to be interchanged and whether
            ' a 1-by-1 or 2-by-2 pivot block will be used
            '
            ABSAKK = Abs(A(K, K))
            
            '
            ' IMAX is the row-index of the largest off-diagonal element in
            ' column K+1, and COLMAX is its absolute value
            '
            If K > 0# Then
                IMAX = 1#
                For II = 2# To K Step 1
                    If Abs(A(II - 1#, K)) > Abs(A(IMAX - 1#, K)) Then
                        IMAX = II
                    End If
                Next II
                COLMAX = Abs(A(IMAX - 1#, K))
            Else
                COLMAX = 0#
            End If
            If MaxReal(ABSAKK, COLMAX) = 0# Then
                
                '
                ' Column K is zero
                '
                KP = K
            Else
                If ABSAKK >= Alpha * COLMAX Then
                    
                    '
                    ' no interchange, use 1-by-1 pivot block
                    '
                    KP = K
                Else
                    
                    '
                    ' JMAX is the column-index of the largest off-diagonal
                    ' element in row IMAX, and ROWMAX is its absolute value
                    '
                    JMax = IMAX + 1#
                    For II = IMAX + 2# To K + 1# Step 1
                        If Abs(A(IMAX - 1#, II - 1#)) > Abs(A(IMAX - 1#, JMax - 1#)) Then
                            JMax = II
                        End If
                    Next II
                    ROWMAX = Abs(A(IMAX - 1#, JMax - 1#))
                    If IMAX > 1# Then
                        JMax = 1#
                        For II = 2# To IMAX - 1# Step 1
                            If Abs(A(II - 1#, IMAX - 1#)) > Abs(A(JMax - 1#, IMAX - 1#)) Then
                                JMax = II
                            End If
                        Next II
                        ROWMAX = MaxReal(ROWMAX, Abs(A(JMax - 1#, IMAX - 1#)))
                    End If
                    VV = COLMAX / ROWMAX
                    If ABSAKK >= Alpha * COLMAX * VV Then
                        
                        '
                        ' no interchange, use 1-by-1 pivot block
                        '
                        KP = K
                    Else
                        If Abs(A(IMAX - 1#, IMAX - 1#)) >= Alpha * ROWMAX Then
                            
                            '
                            ' interchange rows and columns K and IMAX, use 1-by-1
                            ' pivot block
                            '
                            KP = IMAX - 1#
                        Else
                            
                            '
                            ' interchange rows and columns K-1 and IMAX, use 2-by-2
                            ' pivot block
                            '
                            KP = IMAX - 1#
                            KSTEP = 2#
                        End If
                    End If
                End If
                KK = K + 1# - KSTEP
                If KP + 1# <> KK + 1# Then
                    
                    '
                    ' Interchange rows and columns KK and KP+1 in the leading
                    ' submatrix A(0:K,0:K)
                    '
                    For i_ = 0# To KP - 1# Step 1
                        temp(i_) = A(i_, KK)
                    Next i_
                    For i_ = 0# To KP - 1# Step 1
                        A(i_, KK) = A(i_, KP)
                    Next i_
                    For i_ = 0# To KP - 1# Step 1
                        A(i_, KP) = temp(i_)
                    Next i_
                    For i_ = KP + 1# To KK - 1# Step 1
                        temp(i_) = A(i_, KK)
                    Next i_
                    For i_ = KP + 1# To KK - 1# Step 1
                        A(i_, KK) = A(KP, i_)
                    Next i_
                    For i_ = KP + 1# To KK - 1# Step 1
                        A(KP, i_) = temp(i_)
                    Next i_
                    T = A(KK, KK)
                    A(KK, KK) = A(KP, KP)
                    A(KP, KP) = T
                    If KSTEP = 2# Then
                        T = A(K - 1#, K)
                        A(K - 1#, K) = A(KP, K)
                        A(KP, K) = T
                    End If
                End If
                
                '
                ' Update the leading submatrix
                '
                If KSTEP = 1# Then
                    
                    '
                    ' 1-by-1 pivot block D(k): column k now holds
                    '
                    ' W(k) = U(k)*D(k)
                    '
                    ' where U(k) is the k-th column of U
                    '
                    ' Perform a rank-1 update of A(1:k-1,1:k-1) as
                    '
                    ' A := A - U(k)*D(k)*U(k)' = A - W(k)*1/D(k)*W(k)'
                    '
                    R1 = 1# / A(K, K)
                    For i = 0# To K - 1# Step 1
                        VV = -(R1 * A(i, K))
                        For i_ = i To K - 1# Step 1
                            A(i, i_) = A(i, i_) + VV * A(i_, K)
                        Next i_
                    Next i
                    
                    '
                    ' Store U(K+1) in column K+1
                    '
                    For i_ = 0# To K - 1# Step 1
                        A(i_, K) = R1 * A(i_, K)
                    Next i_
                Else
                    
                    '
                    ' 2-by-2 pivot block D(k): columns k and k-1 now hold
                    '
                    ' ( W(k-1) W(k) ) = ( U(k-1) U(k) )*D(k)
                    '
                    ' where U(k) and U(k-1) are the k-th and (k-1)-th columns
                    ' of U
                    '
                    ' Perform a rank-2 update of A(1:k-2,1:k-2) as
                    '
                    ' A := A - ( U(k-1) U(k) )*D(k)*( U(k-1) U(k) )'
                    '    = A - ( W(k-1) W(k) )*inv(D(k))*( W(k-1) W(k) )'
                    '
                    If K > 1# Then
                        D12 = A(K - 1#, K)
                        D22 = A(K - 1#, K - 1#) / D12
                        D11 = A(K, K) / D12
                        T = 1# / (D11 * D22 - 1#)
                        D12 = T / D12
                        For j = K - 2# To 0# Step -1
                            WKM1 = D12 * (D11 * A(j, K - 1#) - A(j, K))
                            WK = D12 * (D22 * A(j, K) - A(j, K - 1#))
                            For i_ = 0# To j Step 1
                                A(i_, j) = A(i_, j) - WK * A(i_, K)
                            Next i_
                            For i_ = 0# To j Step 1
                                A(i_, j) = A(i_, j) - WKM1 * A(i_, K - 1#)
                            Next i_
                            A(j, K) = WK
                            A(j, K - 1#) = WKM1
                        Next j
                    End If
                End If
            End If
            
            '
            ' Store details of the interchanges in IPIV
            '
            If KSTEP = 1# Then
                Pivots(K) = KP
            Else
                Pivots(K) = KP - N
                Pivots(K - 1#) = KP - N
            End If
            
            '
            ' Decrease K+1 and return to the start of the main loop
            '
            K = K - KSTEP
        Loop
    Else
        
        '
        ' Factorize A as L*D*L' using the lower triangle of A
        '
        ' K+1 is the main loop index, increasing from 1 to N in steps of
        ' 1 or 2
        '
        K = 0#
        Do While K <= N - 1#
            KSTEP = 1#
            
            '
            ' Determine rows and columns to be interchanged and whether
            ' a 1-by-1 or 2-by-2 pivot block will be used
            '
            ABSAKK = Abs(A(K, K))
            
            '
            ' IMAX is the row-index of the largest off-diagonal element in
            ' column K+1, and COLMAX is its absolute value
            '
            If K < N - 1# Then
                IMAX = K + 1# + 1#
                For II = K + 1# + 2# To N Step 1
                    If Abs(A(II - 1#, K)) > Abs(A(IMAX - 1#, K)) Then
                        IMAX = II
                    End If
                Next II
                COLMAX = Abs(A(IMAX - 1#, K))
            Else
                COLMAX = 0#
            End If
            If MaxReal(ABSAKK, COLMAX) = 0# Then
                
                '
                ' Column K+1 is zero
                '
                KP = K
            Else
                If ABSAKK >= Alpha * COLMAX Then
                    
                    '
                    ' no interchange, use 1-by-1 pivot block
                    '
                    KP = K
                Else
                    
                    '
                    ' JMAX is the column-index of the largest off-diagonal
                    ' element in row IMAX, and ROWMAX is its absolute value
                    '
                    JMax = K + 1#
                    For II = K + 1# + 1# To IMAX - 1# Step 1
                        If Abs(A(IMAX - 1#, II - 1#)) > Abs(A(IMAX - 1#, JMax - 1#)) Then
                            JMax = II
                        End If
                    Next II
                    ROWMAX = Abs(A(IMAX - 1#, JMax - 1#))
                    If IMAX < N Then
                        JMax = IMAX + 1#
                        For II = IMAX + 2# To N Step 1
                            If Abs(A(II - 1#, IMAX - 1#)) > Abs(A(JMax - 1#, IMAX - 1#)) Then
                                JMax = II
                            End If
                        Next II
                        ROWMAX = MaxReal(ROWMAX, Abs(A(JMax - 1#, IMAX - 1#)))
                    End If
                    VV = COLMAX / ROWMAX
                    If ABSAKK >= Alpha * COLMAX * VV Then
                        
                        '
                        ' no interchange, use 1-by-1 pivot block
                        '
                        KP = K
                    Else
                        If Abs(A(IMAX - 1#, IMAX - 1#)) >= Alpha * ROWMAX Then
                            
                            '
                            ' interchange rows and columns K+1 and IMAX, use 1-by-1
                            ' pivot block
                            '
                            KP = IMAX - 1#
                        Else
                            
                            '
                            ' interchange rows and columns K+1+1 and IMAX, use 2-by-2
                            ' pivot block
                            '
                            KP = IMAX - 1#
                            KSTEP = 2#
                        End If
                    End If
                End If
                KK = K + KSTEP - 1#
                If KP <> KK Then
                    
                    '
                    '              Interchange rows and columns KK+1 and KP+1 in the trailing
                    '              submatrix A(K+1:n,K+1:n)
                    '
                    If KP + 1# < N Then
                        For i_ = KP + 1# To N - 1# Step 1
                            temp(i_) = A(i_, KK)
                        Next i_
                        For i_ = KP + 1# To N - 1# Step 1
                            A(i_, KK) = A(i_, KP)
                        Next i_
                        For i_ = KP + 1# To N - 1# Step 1
                            A(i_, KP) = temp(i_)
                        Next i_
                    End If
                    For i_ = KK + 1# To KP - 1# Step 1
                        temp(i_) = A(i_, KK)
                    Next i_
                    For i_ = KK + 1# To KP - 1# Step 1
                        A(i_, KK) = A(KP, i_)
                    Next i_
                    For i_ = KK + 1# To KP - 1# Step 1
                        A(KP, i_) = temp(i_)
                    Next i_
                    T = A(KK, KK)
                    A(KK, KK) = A(KP, KP)
                    A(KP, KP) = T
                    If KSTEP = 2# Then
                        T = A(K + 1#, K)
                        A(K + 1#, K) = A(KP, K)
                        A(KP, K) = T
                    End If
                End If
                
                '
                ' Update the trailing submatrix
                '
                If KSTEP = 1# Then
                    
                    '
                    ' 1-by-1 pivot block D(K+1): column K+1 now holds
                    '
                    ' W(K+1) = L(K+1)*D(K+1)
                    '
                    ' where L(K+1) is the K+1-th column of L
                    '
                    If K + 1# < N Then
                        
                        '
                        ' Perform a rank-1 update of A(K+1+1:n,K+1+1:n) as
                        '
                        ' A := A - L(K+1)*D(K+1)*L(K+1)' = A - W(K+1)*(1/D(K+1))*W(K+1)'
                        '
                        D11 = 1# / A(K + 1# - 1#, K + 1# - 1#)
                        For II = K + 1# To N - 1# Step 1
                            VV = -(D11 * A(II, K))
                            For i_ = K + 1# To II Step 1
                                A(II, i_) = A(II, i_) + VV * A(i_, K)
                            Next i_
                        Next II
                        
                        '
                        ' Store L(K+1) in column K+1
                        '
                        For i_ = K + 1# To N - 1# Step 1
                            A(i_, K) = D11 * A(i_, K)
                        Next i_
                    End If
                Else
                    
                    '
                    ' 2-by-2 pivot block D(K+1)
                    '
                    If K < N - 2# Then
                        
                        '
                        ' Perform a rank-2 update of A(K+1+2:n,K+1+2:n) as
                        '
                        ' A := A - ( (A(K+1) A(K+1+1))*D(K+1)**(-1) ) * (A(K+1) A(K+1+1))'
                        '
                        ' where L(K+1) and L(K+1+1) are the K+1-th and (K+1+1)-th
                        ' columns of L
                        '
                        D21 = A(K + 1#, K)
                        D11 = A(K + 1#, K + 1#) / D21
                        D22 = A(K, K) / D21
                        T = 1# / (D11 * D22 - 1#)
                        D21 = T / D21
                        For j = K + 2# To N - 1# Step 1
                            WK = D21 * (D11 * A(j, K) - A(j, K + 1#))
                            WKP1 = D21 * (D22 * A(j, K + 1#) - A(j, K))
                            For i_ = j To N - 1# Step 1
                                A(i_, j) = A(i_, j) - WK * A(i_, K)
                            Next i_
                            For i_ = j To N - 1# Step 1
                                A(i_, j) = A(i_, j) - WKP1 * A(i_, K + 1#)
                            Next i_
                            A(j, K) = WK
                            A(j, K + 1#) = WKP1
                        Next j
                    End If
                End If
            End If
            
            '
            ' Store details of the interchanges in IPIV
            '
            If KSTEP = 1# Then
                Pivots(K + 1# - 1#) = KP + 1# - 1#
            Else
                Pivots(K + 1# - 1#) = KP + 1# - 1# - N
                Pivots(K + 1# + 1# - 1#) = KP + 1# - 1# - N
            End If
            
            '
            ' Increase K+1 and return to the start of the main loop
            '
            K = K + KSTEP
        Loop
    End If
End Sub
Public Sub LDLTDecomposition(ByRef A() As Double, _
         ByVal N As Long, _
         ByVal IsUpper As Boolean, _
         ByRef Pivots() As Long)
    Dim i As Long
    Dim IMAX As Long
    Dim j As Long
    Dim JMax As Long
    Dim K As Long
    Dim KK As Long
    Dim KP As Long
    Dim KSTEP As Long
    Dim ABSAKK As Double
    Dim Alpha As Double
    Dim COLMAX As Double
    Dim D11 As Double
    Dim D12 As Double
    Dim D21 As Double
    Dim D22 As Double
    Dim R1 As Double
    Dim ROWMAX As Double
    Dim T As Double
    Dim WK As Double
    Dim WKM1 As Double
    Dim WKP1 As Double
    Dim II As Long
    Dim I1 As Long
    Dim I2 As Long
    Dim VV As Double
    Dim temp() As Double
    Dim i_ As Long
    ReDim Pivots(1# To N)
    ReDim temp(1# To N)
    
    '
    ' Initialize ALPHA for use in choosing pivot block size.
    '
    Alpha = (1# + Sqr(17#)) / 8#
    If IsUpper Then
        
        '
        ' Factorize A as U*D*U' using the upper triangle of A
        '
        '
        ' K is the main loop index, decreasing from N to 1 in steps of
        ' 1 or 2
        '
        K = N
        Do While K >= 1#
            KSTEP = 1#
            
            '
            ' Determine rows and columns to be interchanged and whether
            ' a 1-by-1 or 2-by-2 pivot block will be used
            '
            ABSAKK = Abs(A(K, K))
            
            '
            ' IMAX is the row-index of the largest off-diagonal element in
            ' column K, and COLMAX is its absolute value
            '
            If K > 1# Then
                IMAX = 1#
                For II = 2# To K - 1# Step 1
                    If Abs(A(II, K)) > Abs(A(IMAX, K)) Then
                        IMAX = II
                    End If
                Next II
                COLMAX = Abs(A(IMAX, K))
            Else
                COLMAX = 0#
            End If
            If MaxReal(ABSAKK, COLMAX) = 0# Then
                
                '
                ' Column K is zero
                '
                KP = K
            Else
                If ABSAKK >= Alpha * COLMAX Then
                    
                    '
                    ' no interchange, use 1-by-1 pivot block
                    '
                    KP = K
                Else
                    
                    '
                    ' JMAX is the column-index of the largest off-diagonal
                    ' element in row IMAX, and ROWMAX is its absolute value
                    '
                    JMax = IMAX + 1#
                    For II = IMAX + 2# To K Step 1
                        If Abs(A(IMAX, II)) > Abs(A(IMAX, JMax)) Then
                            JMax = II
                        End If
                    Next II
                    ROWMAX = Abs(A(IMAX, JMax))
                    If IMAX > 1# Then
                        JMax = 1#
                        For II = 2# To IMAX - 1# Step 1
                            If Abs(A(II, IMAX)) > Abs(A(JMax, IMAX)) Then
                                JMax = II
                            End If
                        Next II
                        ROWMAX = MaxReal(ROWMAX, Abs(A(JMax, IMAX)))
                    End If
                    VV = COLMAX / ROWMAX
                    If ABSAKK >= Alpha * COLMAX * VV Then
                        
                        '
                        ' no interchange, use 1-by-1 pivot block
                        '
                        KP = K
                    Else
                        If Abs(A(IMAX, IMAX)) >= Alpha * ROWMAX Then
                            
                            '
                            ' interchange rows and columns K and IMAX, use 1-by-1
                            ' pivot block
                            '
                            KP = IMAX
                        Else
                            
                            '
                            ' interchange rows and columns K-1 and IMAX, use 2-by-2
                            ' pivot block
                            '
                            KP = IMAX
                            KSTEP = 2#
                        End If
                    End If
                End If
                KK = K - KSTEP + 1#
                If KP <> KK Then
                    
                    '
                    ' Interchange rows and columns KK and KP in the leading
                    ' submatrix A(1:k,1:k)
                    '
                    I1 = KP - 1#
                    For i_ = 1# To I1 Step 1
                        temp(i_) = A(i_, KK)
                    Next i_
                    For i_ = 1# To I1 Step 1
                        A(i_, KK) = A(i_, KP)
                    Next i_
                    For i_ = 1# To I1 Step 1
                        A(i_, KP) = temp(i_)
                    Next i_
                    I1 = KP + 1#
                    I2 = KK - 1#
                    For i_ = I1 To I2 Step 1
                        temp(i_) = A(i_, KK)
                    Next i_
                    For i_ = I1 To I2 Step 1
                        A(i_, KK) = A(KP, i_)
                    Next i_
                    For i_ = I1 To I2 Step 1
                        A(KP, i_) = temp(i_)
                    Next i_
                    T = A(KK, KK)
                    A(KK, KK) = A(KP, KP)
                    A(KP, KP) = T
                    If KSTEP = 2# Then
                        T = A(K - 1#, K)
                        A(K - 1#, K) = A(KP, K)
                        A(KP, K) = T
                    End If
                End If
                
                '
                ' Update the leading submatrix
                '
                If KSTEP = 1# Then
                    
                    '
                    ' 1-by-1 pivot block D(k): column k now holds
                    '
                    ' W(k) = U(k)*D(k)
                    '
                    ' where U(k) is the k-th column of U
                    '
                    ' Perform a rank-1 update of A(1:k-1,1:k-1) as
                    '
                    ' A := A - U(k)*D(k)*U(k)' = A - W(k)*1/D(k)*W(k)'
                    '
                    R1 = 1# / A(K, K)
                    For i = 1# To K - 1# Step 1
                        I2 = K - 1#
                        VV = -(R1 * A(i, K))
                        For i_ = i To I2 Step 1
                            A(i, i_) = A(i, i_) + VV * A(i_, K)
                        Next i_
                    Next i
                    
                    '
                    ' Store U(k) in column k
                    '
                    I2 = K - 1#
                    For i_ = 1# To I2 Step 1
                        A(i_, K) = R1 * A(i_, K)
                    Next i_
                Else
                    
                    '
                    ' 2-by-2 pivot block D(k): columns k and k-1 now hold
                    '
                    ' ( W(k-1) W(k) ) = ( U(k-1) U(k) )*D(k)
                    '
                    ' where U(k) and U(k-1) are the k-th and (k-1)-th columns
                    ' of U
                    '
                    ' Perform a rank-2 update of A(1:k-2,1:k-2) as
                    '
                    ' A := A - ( U(k-1) U(k) )*D(k)*( U(k-1) U(k) )'
                    '    = A - ( W(k-1) W(k) )*inv(D(k))*( W(k-1) W(k) )'
                    '
                    If K > 2# Then
                        D12 = A(K - 1#, K)
                        D22 = A(K - 1#, K - 1#) / D12
                        D11 = A(K, K) / D12
                        T = 1# / (D11 * D22 - 1#)
                        D12 = T / D12
                        For j = K - 2# To 1# Step -1
                            WKM1 = D12 * (D11 * A(j, K - 1#) - A(j, K))
                            WK = D12 * (D22 * A(j, K) - A(j, K - 1#))
                            For i_ = 1# To j Step 1
                                A(i_, j) = A(i_, j) - WK * A(i_, K)
                            Next i_
                            I1 = K - 1#
                            For i_ = 1# To j Step 1
                                A(i_, j) = A(i_, j) - WKM1 * A(i_, I1)
                            Next i_
                            A(j, K) = WK
                            A(j, K - 1#) = WKM1
                        Next j
                    End If
                End If
            End If
            
            '
            ' Store details of the interchanges in IPIV
            '
            If KSTEP = 1# Then
                Pivots(K) = KP
            Else
                Pivots(K) = -KP
                Pivots(K - 1#) = -KP
            End If
            
            '
            ' Decrease K and return to the start of the main loop
            '
            K = K - KSTEP
        Loop
    Else
        
        '
        ' Factorize A as L*D*L' using the lower triangle of A
        '
        ' K is the main loop index, increasing from 1 to N in steps of
        ' 1 or 2
        '
        K = 1#
        Do While K <= N
            KSTEP = 1#
            
            '
            ' Determine rows and columns to be interchanged and whether
            ' a 1-by-1 or 2-by-2 pivot block will be used
            '
            ABSAKK = Abs(A(K, K))
            
            '
            ' IMAX is the row-index of the largest off-diagonal element in
            ' column K, and COLMAX is its absolute value
            '
            If K < N Then
                IMAX = K + 1#
                For II = K + 2# To N Step 1
                    If Abs(A(II, K)) > Abs(A(IMAX, K)) Then
                        IMAX = II
                    End If
                Next II
                COLMAX = Abs(A(IMAX, K))
            Else
                COLMAX = 0#
            End If
            If MaxReal(ABSAKK, COLMAX) = 0# Then
                
                '
                ' Column K is zero
                '
                KP = K
            Else
                If ABSAKK >= Alpha * COLMAX Then
                    
                    '
                    ' no interchange, use 1-by-1 pivot block
                    '
                    KP = K
                Else
                    
                    '
                    ' JMAX is the column-index of the largest off-diagonal
                    ' element in row IMAX, and ROWMAX is its absolute value
                    '
                    JMax = K
                    For II = K + 1# To IMAX - 1# Step 1
                        If Abs(A(IMAX, II)) > Abs(A(IMAX, JMax)) Then
                            JMax = II
                        End If
                    Next II
                    ROWMAX = Abs(A(IMAX, JMax))
                    If IMAX < N Then
                        JMax = IMAX + 1#
                        For II = IMAX + 2# To N Step 1
                            If Abs(A(II, IMAX)) > Abs(A(JMax, IMAX)) Then
                                JMax = II
                            End If
                        Next II
                        ROWMAX = MaxReal(ROWMAX, Abs(A(JMax, IMAX)))
                    End If
                    VV = COLMAX / ROWMAX
                    If ABSAKK >= Alpha * COLMAX * VV Then
                        
                        '
                        ' no interchange, use 1-by-1 pivot block
                        '
                        KP = K
                    Else
                        If Abs(A(IMAX, IMAX)) >= Alpha * ROWMAX Then
                            
                            '
                            ' interchange rows and columns K and IMAX, use 1-by-1
                            ' pivot block
                            '
                            KP = IMAX
                        Else
                            
                            '
                            ' interchange rows and columns K+1 and IMAX, use 2-by-2
                            ' pivot block
                            '
                            KP = IMAX
                            KSTEP = 2#
                        End If
                    End If
                End If
                KK = K + KSTEP - 1#
                If KP <> KK Then
                    
                    '
                    '              Interchange rows and columns KK and KP in the trailing
                    '              submatrix A(k:n,k:n)
                    '
                    If KP < N Then
                        I1 = KP + 1#
                        For i_ = I1 To N Step 1
                            temp(i_) = A(i_, KK)
                        Next i_
                        For i_ = I1 To N Step 1
                            A(i_, KK) = A(i_, KP)
                        Next i_
                        For i_ = I1 To N Step 1
                            A(i_, KP) = temp(i_)
                        Next i_
                    End If
                    I1 = KK + 1#
                    I2 = KP - 1#
                    For i_ = I1 To I2 Step 1
                        temp(i_) = A(i_, KK)
                    Next i_
                    For i_ = I1 To I2 Step 1
                        A(i_, KK) = A(KP, i_)
                    Next i_
                    For i_ = I1 To I2 Step 1
                        A(KP, i_) = temp(i_)
                    Next i_
                    T = A(KK, KK)
                    A(KK, KK) = A(KP, KP)
                    A(KP, KP) = T
                    If KSTEP = 2# Then
                        T = A(K + 1#, K)
                        A(K + 1#, K) = A(KP, K)
                        A(KP, K) = T
                    End If
                End If
                
                '
                ' Update the trailing submatrix
                '
                If KSTEP = 1# Then
                    
                    '
                    ' 1-by-1 pivot block D(k): column k now holds
                    '
                    ' W(k) = L(k)*D(k)
                    '
                    ' where L(k) is the k-th column of L
                    '
                    If K < N Then
                        
                        '
                        ' Perform a rank-1 update of A(k+1:n,k+1:n) as
                        '
                        ' A := A - L(k)*D(k)*L(k)' = A - W(k)*(1/D(k))*W(k)'
                        '
                        D11 = 1# / A(K, K)
                        For II = K + 1# To N Step 1
                            I1 = K + 1#
                            I2 = II
                            VV = -(D11 * A(II, K))
                            For i_ = I1 To I2 Step 1
                                A(II, i_) = A(II, i_) + VV * A(i_, K)
                            Next i_
                        Next II
                        
                        '
                        ' Store L(k) in column K
                        '
                        I1 = K + 1#
                        For i_ = I1 To N Step 1
                            A(i_, K) = D11 * A(i_, K)
                        Next i_
                    End If
                Else
                    
                    '
                    ' 2-by-2 pivot block D(k)
                    '
                    If K < N - 1# Then
                        
                        '
                        ' Perform a rank-2 update of A(k+2:n,k+2:n) as
                        '
                        ' A := A - ( (A(k) A(k+1))*D(k)**(-1) ) * (A(k) A(k+1))'
                        '
                        ' where L(k) and L(k+1) are the k-th and (k+1)-th
                        ' columns of L
                        '
                        D21 = A(K + 1#, K)
                        D11 = A(K + 1#, K + 1#) / D21
                        D22 = A(K, K) / D21
                        T = 1# / (D11 * D22 - 1#)
                        D21 = T / D21
                        For j = K + 2# To N Step 1
                            WK = D21 * (D11 * A(j, K) - A(j, K + 1#))
                            WKP1 = D21 * (D22 * A(j, K + 1#) - A(j, K))
                            II = K + 1#
                            For i_ = j To N Step 1
                                A(i_, j) = A(i_, j) - WK * A(i_, K)
                            Next i_
                            For i_ = j To N Step 1
                                A(i_, j) = A(i_, j) - WKP1 * A(i_, II)
                            Next i_
                            A(j, K) = WK
                            A(j, K + 1#) = WKP1
                        Next j
                    End If
                End If
            End If
            
            '
            ' Store details of the interchanges in IPIV
            '
            If KSTEP = 1# Then
                Pivots(K) = KP
            Else
                Pivots(K) = -KP
                Pivots(K + 1#) = -KP
            End If
            
            '
            ' Increase K and return to the start of the main loop
            '
            K = K + KSTEP
        Loop
    End If
End Sub

