''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2006-2010, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Data types
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Parametric spline inteprolant: 2-dimensional curve.
'
'You should not try to access its members directly - use PSpline2XXXXXXXX()
'functions instead.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Type PSpline2Interpolant
    N As Long
    Periodic As Boolean
    P() As Double
    X As Spline1DInterpolant
    Y As Spline1DInterpolant
End Type
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Parametric spline inteprolant: 3-dimensional curve.
'
'You should not try to access its members directly - use PSpline3XXXXXXXX()
'functions instead.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Type PSpline3Interpolant
    N As Long
    Periodic As Boolean
    P() As Double
    X As Spline1DInterpolant
    Y As Spline1DInterpolant
    z As Spline1DInterpolant
End Type
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function  builds  non-periodic 2-dimensional parametric spline  which
'starts at (X[0],Y[0]) and ends at (X[N-1],Y[N-1]).
'
'INPUT PARAMETERS:
'    XY  -   points, array[0..N-1,0..1].
'            XY[I,0:1] corresponds to the Ith point.
'            Order of points is important!
'    N   -   points count, N>=5 for Akima splines, N>=2 for other types  of
'            splines.
'    ST  -   spline type:
'            * 0     Akima spline
'            * 1     parabolically terminated Catmull-Rom spline (Tension=0)
'            * 2     parabolically terminated cubic spline
'    PT  -   parameterization type:
'            * 0     uniform
'            * 1     chord length
'            * 2     centripetal
'
'OUTPUT PARAMETERS:
'    P   -   parametric spline interpolant
'
'
'NOTES:
'* this function  assumes  that  there all consequent points  are distinct.
'  I.e. (x0,y0)<>(x1,y1),  (x1,y1)<>(x2,y2),  (x2,y2)<>(x3,y3)  and  so on.
'  However, non-consequent points may coincide, i.e. we can  have  (x0,y0)=
'  =(x2,y2).
'
'  -- ALGLIB PROJECT --
'     Copyright 28.05.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PSpline2Build(ByRef XY_() As Double, _
         ByVal N As Long, _
         ByVal ST As Long, _
         ByVal PT As Long, _
         ByRef P As PSpline2Interpolant)
    Dim XY() As Double
    Dim Tmp() As Double
    Dim V As Double
    Dim i As Long
    Dim i_ As Long
    XY = XY_
    If ST = 0# Then
    Else
    End If
    
    '
    ' Prepare
    '
    P.N = N
    P.Periodic = False
    ReDim Tmp(0 To N - 1)
    
    '
    ' Build parameterization, check that all parameters are distinct
    '
    Call PSpline2Par(XY, N, PT, P.P)
    
    '
    ' Build splines
    '
    If ST = 0# Then
        For i_ = 0# To N - 1# Step 1
            Tmp(i_) = XY(i_, 0#)
        Next i_
        Call Spline1DBuildAkima(P.P, Tmp, N, P.X)
        For i_ = 0# To N - 1# Step 1
            Tmp(i_) = XY(i_, 1#)
        Next i_
        Call Spline1DBuildAkima(P.P, Tmp, N, P.Y)
    End If
    If ST = 1# Then
        For i_ = 0# To N - 1# Step 1
            Tmp(i_) = XY(i_, 0#)
        Next i_
        Call Spline1DBuildCatmullRom(P.P, Tmp, N, 0#, 0#, P.X)
        For i_ = 0# To N - 1# Step 1
            Tmp(i_) = XY(i_, 1#)
        Next i_
        Call Spline1DBuildCatmullRom(P.P, Tmp, N, 0#, 0#, P.Y)
    End If
    If ST = 2# Then
        For i_ = 0# To N - 1# Step 1
            Tmp(i_) = XY(i_, 0#)
        Next i_
        Call Spline1DBuildCubic(P.P, Tmp, N, 0#, 0#, 0#, 0#, P.X)
        For i_ = 0# To N - 1# Step 1
            Tmp(i_) = XY(i_, 1#)
        Next i_
        Call Spline1DBuildCubic(P.P, Tmp, N, 0#, 0#, 0#, 0#, P.Y)
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function  builds  non-periodic 3-dimensional parametric spline  which
'starts at (X[0],Y[0],Z[0]) and ends at (X[N-1],Y[N-1],Z[N-1]).
'
'Same as PSpline2Build() function, but for 3D, so we  won't  duplicate  its
'description here.
'
'  -- ALGLIB PROJECT --
'     Copyright 28.05.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PSpline3Build(ByRef XY_() As Double, _
         ByVal N As Long, _
         ByVal ST As Long, _
         ByVal PT As Long, _
         ByRef P As PSpline3Interpolant)
    Dim XY() As Double
    Dim Tmp() As Double
    Dim V As Double
    Dim i As Long
    Dim i_ As Long
    XY = XY_
    If ST = 0# Then
    Else
    End If
    
    '
    ' Prepare
    '
    P.N = N
    P.Periodic = False
    ReDim Tmp(0 To N - 1)
    
    '
    ' Build parameterization, check that all parameters are distinct
    '
    Call PSpline3Par(XY, N, PT, P.P)
    
    '
    ' Build splines
    '
    If ST = 0# Then
        For i_ = 0# To N - 1# Step 1
            Tmp(i_) = XY(i_, 0#)
        Next i_
        Call Spline1DBuildAkima(P.P, Tmp, N, P.X)
        For i_ = 0# To N - 1# Step 1
            Tmp(i_) = XY(i_, 1#)
        Next i_
        Call Spline1DBuildAkima(P.P, Tmp, N, P.Y)
        For i_ = 0# To N - 1# Step 1
            Tmp(i_) = XY(i_, 2#)
        Next i_
        Call Spline1DBuildAkima(P.P, Tmp, N, P.z)
    End If
    If ST = 1# Then
        For i_ = 0# To N - 1# Step 1
            Tmp(i_) = XY(i_, 0#)
        Next i_
        Call Spline1DBuildCatmullRom(P.P, Tmp, N, 0#, 0#, P.X)
        For i_ = 0# To N - 1# Step 1
            Tmp(i_) = XY(i_, 1#)
        Next i_
        Call Spline1DBuildCatmullRom(P.P, Tmp, N, 0#, 0#, P.Y)
        For i_ = 0# To N - 1# Step 1
            Tmp(i_) = XY(i_, 2#)
        Next i_
        Call Spline1DBuildCatmullRom(P.P, Tmp, N, 0#, 0#, P.z)
    End If
    If ST = 2# Then
        For i_ = 0# To N - 1# Step 1
            Tmp(i_) = XY(i_, 0#)
        Next i_
        Call Spline1DBuildCubic(P.P, Tmp, N, 0#, 0#, 0#, 0#, P.X)
        For i_ = 0# To N - 1# Step 1
            Tmp(i_) = XY(i_, 1#)
        Next i_
        Call Spline1DBuildCubic(P.P, Tmp, N, 0#, 0#, 0#, 0#, P.Y)
        For i_ = 0# To N - 1# Step 1
            Tmp(i_) = XY(i_, 2#)
        Next i_
        Call Spline1DBuildCubic(P.P, Tmp, N, 0#, 0#, 0#, 0#, P.z)
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This  function  builds  periodic  2-dimensional  parametric  spline  which
'starts at (X[0],Y[0]), goes through all points to (X[N-1],Y[N-1]) and then
'back to (X[0],Y[0]).
'
'INPUT PARAMETERS:
'    XY  -   points, array[0..N-1,0..1].
'            XY[I,0:1] corresponds to the Ith point.
'            XY[N-1,0:1] must be different from XY[0,0:1].
'            Order of points is important!
'    N   -   points count, N>=3 for other types of splines.
'    ST  -   spline type:
'            * 1     Catmull-Rom spline (Tension=0) with cyclic boundary conditions
'            * 2     cubic spline with cyclic boundary conditions
'    PT  -   parameterization type:
'            * 0     uniform
'            * 1     chord length
'            * 2     centripetal
'
'OUTPUT PARAMETERS:
'    P   -   parametric spline interpolant
'
'
'NOTES:
'* this function  assumes  that there all consequent points  are  distinct.
'  I.e. (x0,y0)<>(x1,y1), (x1,y1)<>(x2,y2),  (x2,y2)<>(x3,y3)  and  so  on.
'  However, non-consequent points may coincide, i.e. we can  have  (x0,y0)=
'  =(x2,y2).
'* last point of sequence is NOT equal to the first  point.  You  shouldn't
'  make curve "explicitly periodic" by making them equal.
'
'  -- ALGLIB PROJECT --
'     Copyright 28.05.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PSpline2BuildPeriodic(ByRef XY_() As Double, _
         ByVal N As Long, _
         ByVal ST As Long, _
         ByVal PT As Long, _
         ByRef P As PSpline2Interpolant)
    Dim XY() As Double
    Dim XYP() As Double
    Dim Tmp() As Double
    Dim V As Double
    Dim i As Long
    Dim i_ As Long
    XY = XY_
    
    '
    ' Prepare
    '
    P.N = N
    P.Periodic = True
    ReDim Tmp(0 To N + 1# - 1)
    ReDim XYP(0 To N + 1# - 1, 0 To 2# - 1)
    For i_ = 0# To N - 1# Step 1
        XYP(i_, 0#) = XY(i_, 0#)
    Next i_
    For i_ = 0# To N - 1# Step 1
        XYP(i_, 1#) = XY(i_, 1#)
    Next i_
    For i_ = 0# To 1# Step 1
        XYP(N, i_) = XY(0#, i_)
    Next i_
    
    '
    ' Build parameterization, check that all parameters are distinct
    '
    Call PSpline2Par(XYP, N + 1#, PT, P.P)
    
    '
    ' Build splines
    '
    If ST = 1# Then
        For i_ = 0# To N Step 1
            Tmp(i_) = XYP(i_, 0#)
        Next i_
        Call Spline1DBuildCatmullRom(P.P, Tmp, N + 1#, -1#, 0#, P.X)
        For i_ = 0# To N Step 1
            Tmp(i_) = XYP(i_, 1#)
        Next i_
        Call Spline1DBuildCatmullRom(P.P, Tmp, N + 1#, -1#, 0#, P.Y)
    End If
    If ST = 2# Then
        For i_ = 0# To N Step 1
            Tmp(i_) = XYP(i_, 0#)
        Next i_
        Call Spline1DBuildCubic(P.P, Tmp, N + 1#, -1#, 0#, -1#, 0#, P.X)
        For i_ = 0# To N Step 1
            Tmp(i_) = XYP(i_, 1#)
        Next i_
        Call Spline1DBuildCubic(P.P, Tmp, N + 1#, -1#, 0#, -1#, 0#, P.Y)
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This  function  builds  periodic  3-dimensional  parametric  spline  which
'starts at (X[0],Y[0],Z[0]), goes through all points to (X[N-1],Y[N-1],Z[N-1])
'and then back to (X[0],Y[0],Z[0]).
'
'Same as PSpline2Build() function, but for 3D, so we  won't  duplicate  its
'description here.
'
'  -- ALGLIB PROJECT --
'     Copyright 28.05.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PSpline3BuildPeriodic(ByRef XY_() As Double, _
         ByVal N As Long, _
         ByVal ST As Long, _
         ByVal PT As Long, _
         ByRef P As PSpline3Interpolant)
    Dim XY() As Double
    Dim XYP() As Double
    Dim Tmp() As Double
    Dim V As Double
    Dim i As Long
    Dim i_ As Long
    XY = XY_
    
    '
    ' Prepare
    '
    P.N = N
    P.Periodic = True
    ReDim Tmp(0 To N + 1# - 1)
    ReDim XYP(0 To N + 1# - 1, 0 To 3# - 1)
    For i_ = 0# To N - 1# Step 1
        XYP(i_, 0#) = XY(i_, 0#)
    Next i_
    For i_ = 0# To N - 1# Step 1
        XYP(i_, 1#) = XY(i_, 1#)
    Next i_
    For i_ = 0# To N - 1# Step 1
        XYP(i_, 2#) = XY(i_, 2#)
    Next i_
    For i_ = 0# To 2# Step 1
        XYP(N, i_) = XY(0#, i_)
    Next i_
    
    '
    ' Build parameterization, check that all parameters are distinct
    '
    Call PSpline3Par(XYP, N + 1#, PT, P.P)
    
    '
    ' Build splines
    '
    If ST = 1# Then
        For i_ = 0# To N Step 1
            Tmp(i_) = XYP(i_, 0#)
        Next i_
        Call Spline1DBuildCatmullRom(P.P, Tmp, N + 1#, -1#, 0#, P.X)
        For i_ = 0# To N Step 1
            Tmp(i_) = XYP(i_, 1#)
        Next i_
        Call Spline1DBuildCatmullRom(P.P, Tmp, N + 1#, -1#, 0#, P.Y)
        For i_ = 0# To N Step 1
            Tmp(i_) = XYP(i_, 2#)
        Next i_
        Call Spline1DBuildCatmullRom(P.P, Tmp, N + 1#, -1#, 0#, P.z)
    End If
    If ST = 2# Then
        For i_ = 0# To N Step 1
            Tmp(i_) = XYP(i_, 0#)
        Next i_
        Call Spline1DBuildCubic(P.P, Tmp, N + 1#, -1#, 0#, -1#, 0#, P.X)
        For i_ = 0# To N Step 1
            Tmp(i_) = XYP(i_, 1#)
        Next i_
        Call Spline1DBuildCubic(P.P, Tmp, N + 1#, -1#, 0#, -1#, 0#, P.Y)
        For i_ = 0# To N Step 1
            Tmp(i_) = XYP(i_, 2#)
        Next i_
        Call Spline1DBuildCubic(P.P, Tmp, N + 1#, -1#, 0#, -1#, 0#, P.z)
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function returns vector of parameter values correspoding to points.
'
'I.e. for P created from (X[0],Y[0])...(X[N-1],Y[N-1]) and U=TValues(P)  we
'have
'    (X[0],Y[0]) = PSpline2Calc(P,U[0]),
'    (X[1],Y[1]) = PSpline2Calc(P,U[1]),
'    (X[2],Y[2]) = PSpline2Calc(P,U[2]),
'    ...
'
'INPUT PARAMETERS:
'    P   -   parametric spline interpolant
'
'OUTPUT PARAMETERS:
'    N   -   array size
'    T   -   array[0..N-1]
'
'
'NOTES:
'* for non-periodic splines U[0]=0, U[0]<U[1]<...<U[N-1], U[N-1]=1
'* for periodic splines     U[0]=0, U[0]<U[1]<...<U[N-1], U[N-1]<1
'
'  -- ALGLIB PROJECT --
'     Copyright 28.05.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PSpline2ParameterValues(ByRef P As PSpline2Interpolant, _
         ByRef N As Long, _
         ByRef T() As Double)
    Dim i_ As Long
    N = P.N
    ReDim T(0 To N - 1)
    For i_ = 0# To N - 1# Step 1
        T(i_) = P.P(i_)
    Next i_
    T(0#) = 0#
    If Not P.Periodic Then
        T(N - 1#) = 1#
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function returns vector of parameter values correspoding to points.
'
'Same as PSpline2ParameterValues(), but for 3D.
'
'  -- ALGLIB PROJECT --
'     Copyright 28.05.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PSpline3ParameterValues(ByRef P As PSpline3Interpolant, _
         ByRef N As Long, _
         ByRef T() As Double)
    Dim i_ As Long
    N = P.N
    ReDim T(0 To N - 1)
    For i_ = 0# To N - 1# Step 1
        T(i_) = P.P(i_)
    Next i_
    T(0#) = 0#
    If Not P.Periodic Then
        T(N - 1#) = 1#
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function  calculates  the value of the parametric spline for a  given
'value of parameter T
'
'INPUT PARAMETERS:
'    P   -   parametric spline interpolant
'    T   -   point:
'            * T in [0,1] corresponds to interval spanned by points
'            * for non-periodic splines T<0 (or T>1) correspond to parts of
'              the curve before the first (after the last) point
'            * for periodic splines T<0 (or T>1) are projected  into  [0,1]
'              by making T=T-floor(T).
'
'OUTPUT PARAMETERS:
'    X   -   X-position
'    Y   -   Y-position
'
'
'  -- ALGLIB PROJECT --
'     Copyright 28.05.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PSpline2Calc(ByRef P As PSpline2Interpolant, _
         ByVal T As Double, _
         ByRef X As Double, _
         ByRef Y As Double)
    If P.Periodic Then
        T = T - Int(T)
    End If
    X = Spline1DCalc(P.X, T)
    Y = Spline1DCalc(P.Y, T)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function  calculates  the value of the parametric spline for a  given
'value of parameter T.
'
'INPUT PARAMETERS:
'    P   -   parametric spline interpolant
'    T   -   point:
'            * T in [0,1] corresponds to interval spanned by points
'            * for non-periodic splines T<0 (or T>1) correspond to parts of
'              the curve before the first (after the last) point
'            * for periodic splines T<0 (or T>1) are projected  into  [0,1]
'              by making T=T-floor(T).
'
'OUTPUT PARAMETERS:
'    X   -   X-position
'    Y   -   Y-position
'    Z   -   Z-position
'
'
'  -- ALGLIB PROJECT --
'     Copyright 28.05.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PSpline3Calc(ByRef P As PSpline3Interpolant, _
         ByVal T As Double, _
         ByRef X As Double, _
         ByRef Y As Double, _
         ByRef z As Double)
    If P.Periodic Then
        T = T - Int(T)
    End If
    X = Spline1DCalc(P.X, T)
    Y = Spline1DCalc(P.Y, T)
    z = Spline1DCalc(P.z, T)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function  calculates  tangent vector for a given value of parameter T
'
'INPUT PARAMETERS:
'    P   -   parametric spline interpolant
'    T   -   point:
'            * T in [0,1] corresponds to interval spanned by points
'            * for non-periodic splines T<0 (or T>1) correspond to parts of
'              the curve before the first (after the last) point
'            * for periodic splines T<0 (or T>1) are projected  into  [0,1]
'              by making T=T-floor(T).
'
'OUTPUT PARAMETERS:
'    X    -   X-component of tangent vector (normalized)
'    Y    -   Y-component of tangent vector (normalized)
'
'NOTE:
'    X^2+Y^2 is either 1 (for non-zero tangent vector) or 0.
'
'
'  -- ALGLIB PROJECT --
'     Copyright 28.05.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PSpline2Tangent(ByRef P As PSpline2Interpolant, _
         ByVal T As Double, _
         ByRef X As Double, _
         ByRef Y As Double)
    Dim V As Double
    Dim V0 As Double
    Dim V1 As Double
    If P.Periodic Then
        T = T - Int(T)
    End If
    Call PSpline2Diff(P, T, V0, X, V1, Y)
    If X <> 0# Or Y <> 0# Then
        
        '
        ' this code is a bit more complex than X^2+Y^2 to avoid
        ' overflow for large values of X and Y.
        '
        V = SafePythag2(X, Y)
        X = X / V
        Y = Y / V
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function  calculates  tangent vector for a given value of parameter T
'
'INPUT PARAMETERS:
'    P   -   parametric spline interpolant
'    T   -   point:
'            * T in [0,1] corresponds to interval spanned by points
'            * for non-periodic splines T<0 (or T>1) correspond to parts of
'              the curve before the first (after the last) point
'            * for periodic splines T<0 (or T>1) are projected  into  [0,1]
'              by making T=T-floor(T).
'
'OUTPUT PARAMETERS:
'    X    -   X-component of tangent vector (normalized)
'    Y    -   Y-component of tangent vector (normalized)
'    Z    -   Z-component of tangent vector (normalized)
'
'NOTE:
'    X^2+Y^2+Z^2 is either 1 (for non-zero tangent vector) or 0.
'
'
'  -- ALGLIB PROJECT --
'     Copyright 28.05.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PSpline3Tangent(ByRef P As PSpline3Interpolant, _
         ByVal T As Double, _
         ByRef X As Double, _
         ByRef Y As Double, _
         ByRef z As Double)
    Dim V As Double
    Dim V0 As Double
    Dim V1 As Double
    Dim V2 As Double
    If P.Periodic Then
        T = T - Int(T)
    End If
    Call PSpline3Diff(P, T, V0, X, V1, Y, V2, z)
    If X <> 0# Or Y <> 0# Or z <> 0# Then
        V = SafePythag3(X, Y, z)
        X = X / V
        Y = Y / V
        z = z / V
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function calculates derivative, i.e. it returns (dX/dT,dY/dT).
'
'INPUT PARAMETERS:
'    P   -   parametric spline interpolant
'    T   -   point:
'            * T in [0,1] corresponds to interval spanned by points
'            * for non-periodic splines T<0 (or T>1) correspond to parts of
'              the curve before the first (after the last) point
'            * for periodic splines T<0 (or T>1) are projected  into  [0,1]
'              by making T=T-floor(T).
'
'OUTPUT PARAMETERS:
'    X   -   X-value
'    DX  -   X-derivative
'    Y   -   Y-value
'    DY  -   Y-derivative
'
'
'  -- ALGLIB PROJECT --
'     Copyright 28.05.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PSpline2Diff(ByRef P As PSpline2Interpolant, _
         ByVal T As Double, _
         ByRef X As Double, _
         ByRef DX As Double, _
         ByRef Y As Double, _
         ByRef DY As Double)
    Dim D2S As Double
    If P.Periodic Then
        T = T - Int(T)
    End If
    Call Spline1DDiff(P.X, T, X, DX, D2S)
    Call Spline1DDiff(P.Y, T, Y, DY, D2S)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function calculates derivative, i.e. it returns (dX/dT,dY/dT,dZ/dT).
'
'INPUT PARAMETERS:
'    P   -   parametric spline interpolant
'    T   -   point:
'            * T in [0,1] corresponds to interval spanned by points
'            * for non-periodic splines T<0 (or T>1) correspond to parts of
'              the curve before the first (after the last) point
'            * for periodic splines T<0 (or T>1) are projected  into  [0,1]
'              by making T=T-floor(T).
'
'OUTPUT PARAMETERS:
'    X   -   X-value
'    DX  -   X-derivative
'    Y   -   Y-value
'    DY  -   Y-derivative
'    Z   -   Z-value
'    DZ  -   Z-derivative
'
'
'  -- ALGLIB PROJECT --
'     Copyright 28.05.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PSpline3Diff(ByRef P As PSpline3Interpolant, _
         ByVal T As Double, _
         ByRef X As Double, _
         ByRef DX As Double, _
         ByRef Y As Double, _
         ByRef DY As Double, _
         ByRef z As Double, _
         ByRef DZ As Double)
    Dim D2S As Double
    If P.Periodic Then
        T = T - Int(T)
    End If
    Call Spline1DDiff(P.X, T, X, DX, D2S)
    Call Spline1DDiff(P.Y, T, Y, DY, D2S)
    Call Spline1DDiff(P.z, T, z, DZ, D2S)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function calculates first and second derivative with respect to T.
'
'INPUT PARAMETERS:
'    P   -   parametric spline interpolant
'    T   -   point:
'            * T in [0,1] corresponds to interval spanned by points
'            * for non-periodic splines T<0 (or T>1) correspond to parts of
'              the curve before the first (after the last) point
'            * for periodic splines T<0 (or T>1) are projected  into  [0,1]
'              by making T=T-floor(T).
'
'OUTPUT PARAMETERS:
'    X   -   X-value
'    DX  -   derivative
'    D2X -   second derivative
'    Y   -   Y-value
'    DY  -   derivative
'    D2Y -   second derivative
'
'
'  -- ALGLIB PROJECT --
'     Copyright 28.05.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PSpline2Diff2(ByRef P As PSpline2Interpolant, _
         ByVal T As Double, _
         ByRef X As Double, _
         ByRef DX As Double, _
         ByRef D2X As Double, _
         ByRef Y As Double, _
         ByRef DY As Double, _
         ByRef D2Y As Double)
    If P.Periodic Then
        T = T - Int(T)
    End If
    Call Spline1DDiff(P.X, T, X, DX, D2X)
    Call Spline1DDiff(P.Y, T, Y, DY, D2Y)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function calculates first and second derivative with respect to T.
'
'INPUT PARAMETERS:
'    P   -   parametric spline interpolant
'    T   -   point:
'            * T in [0,1] corresponds to interval spanned by points
'            * for non-periodic splines T<0 (or T>1) correspond to parts of
'              the curve before the first (after the last) point
'            * for periodic splines T<0 (or T>1) are projected  into  [0,1]
'              by making T=T-floor(T).
'
'OUTPUT PARAMETERS:
'    X   -   X-value
'    DX  -   derivative
'    D2X -   second derivative
'    Y   -   Y-value
'    DY  -   derivative
'    D2Y -   second derivative
'    Z   -   Z-value
'    DZ  -   derivative
'    D2Z -   second derivative
'
'
'  -- ALGLIB PROJECT --
'     Copyright 28.05.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PSpline3Diff2(ByRef P As PSpline3Interpolant, _
         ByVal T As Double, _
         ByRef X As Double, _
         ByRef DX As Double, _
         ByRef D2X As Double, _
         ByRef Y As Double, _
         ByRef DY As Double, _
         ByRef D2Y As Double, _
         ByRef z As Double, _
         ByRef DZ As Double, _
         ByRef D2Z As Double)
    If P.Periodic Then
        T = T - Int(T)
    End If
    Call Spline1DDiff(P.X, T, X, DX, D2X)
    Call Spline1DDiff(P.Y, T, Y, DY, D2Y)
    Call Spline1DDiff(P.z, T, z, DZ, D2Z)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function  calculates  arc length, i.e. length of  curve  between  t=a
'and t=b.
'
'INPUT PARAMETERS:
'    P   -   parametric spline interpolant
'    A,B -   parameter values corresponding to arc ends:
'            * B>A will result in positive length returned
'            * B<A will result in negative length returned
'
'RESULT:
'    length of arc starting at T=A and ending at T=B.
'
'
'  -- ALGLIB PROJECT --
'     Copyright 30.05.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function PSpline2ArcLength(ByRef P As PSpline2Interpolant, _
         ByVal A As Double, _
         ByVal B As Double) As Double
    Dim Result As Double
    Dim State As AutoGKState
    Dim Rep As AutoGKReport
    Dim SX As Double
    Dim DSX As Double
    Dim D2SX As Double
    Dim SY As Double
    Dim DSY As Double
    Dim D2SY As Double
    Call AutoGKSmooth(A, B, State)
    Do While AutoGKIteration(State)
        Call Spline1DDiff(P.X, State.X, SX, DSX, D2SX)
        Call Spline1DDiff(P.Y, State.X, SY, DSY, D2SY)
        State.F = SafePythag2(DSX, DSY)
    Loop
    Call AutoGKResults(State, Result, Rep)
    PSpline2ArcLength = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function  calculates  arc length, i.e. length of  curve  between  t=a
'and t=b.
'
'INPUT PARAMETERS:
'    P   -   parametric spline interpolant
'    A,B -   parameter values corresponding to arc ends:
'            * B>A will result in positive length returned
'            * B<A will result in negative length returned
'
'RESULT:
'    length of arc starting at T=A and ending at T=B.
'
'
'  -- ALGLIB PROJECT --
'     Copyright 30.05.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function PSpline3ArcLength(ByRef P As PSpline3Interpolant, _
         ByVal A As Double, _
         ByVal B As Double) As Double
    Dim Result As Double
    Dim State As AutoGKState
    Dim Rep As AutoGKReport
    Dim SX As Double
    Dim DSX As Double
    Dim D2SX As Double
    Dim SY As Double
    Dim DSY As Double
    Dim D2SY As Double
    Dim SZ As Double
    Dim DSZ As Double
    Dim D2SZ As Double
    Call AutoGKSmooth(A, B, State)
    Do While AutoGKIteration(State)
        Call Spline1DDiff(P.X, State.X, SX, DSX, D2SX)
        Call Spline1DDiff(P.Y, State.X, SY, DSY, D2SY)
        Call Spline1DDiff(P.z, State.X, SZ, DSZ, D2SZ)
        State.F = SafePythag3(DSX, DSY, DSZ)
    Loop
    Call AutoGKResults(State, Result, Rep)
    PSpline3ArcLength = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Builds non-periodic parameterization for 2-dimensional spline
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub PSpline2Par(ByRef XY() As Double, _
         ByVal N As Long, _
         ByVal PT As Long, _
         ByRef P() As Double)
    Dim V As Double
    Dim i As Long
    Dim i_ As Long
    
    '
    ' Build parameterization:
    ' * fill by non-normalized values
    ' * normalize them so we have P[0]=0, P[N-1]=1.
    '
    ReDim P(0 To N - 1)
    If PT = 0# Then
        For i = 0# To N - 1# Step 1
            P(i) = i
        Next i
    End If
    If PT = 1# Then
        P(0#) = 0#
        For i = 1# To N - 1# Step 1
            P(i) = P(i - 1#) + SafePythag2(XY(i, 0#) - XY(i - 1#, 0#), XY(i, 1#) - XY(i - 1#, 1#))
        Next i
    End If
    If PT = 2# Then
        P(0#) = 0#
        For i = 1# To N - 1# Step 1
            P(i) = P(i - 1#) + Sqr(SafePythag2(XY(i, 0#) - XY(i - 1#, 0#), XY(i, 1#) - XY(i - 1#, 1#)))
        Next i
    End If
    V = 1# / P(N - 1#)
    For i_ = 0# To N - 1# Step 1
        P(i_) = V * P(i_)
    Next i_
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Builds non-periodic parameterization for 3-dimensional spline
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub PSpline3Par(ByRef XY() As Double, _
         ByVal N As Long, _
         ByVal PT As Long, _
         ByRef P() As Double)
    Dim V As Double
    Dim i As Long
    Dim i_ As Long
    
    '
    ' Build parameterization:
    ' * fill by non-normalized values
    ' * normalize them so we have P[0]=0, P[N-1]=1.
    '
    ReDim P(0 To N - 1)
    If PT = 0# Then
        For i = 0# To N - 1# Step 1
            P(i) = i
        Next i
    End If
    If PT = 1# Then
        P(0#) = 0#
        For i = 1# To N - 1# Step 1
            P(i) = P(i - 1#) + SafePythag3(XY(i, 0#) - XY(i - 1#, 0#), XY(i, 1#) - XY(i - 1#, 1#), XY(i, 2#) - XY(i - 1#, 2#))
        Next i
    End If
    If PT = 2# Then
        P(0#) = 0#
        For i = 1# To N - 1# Step 1
            P(i) = P(i - 1#) + Sqr(SafePythag3(XY(i, 0#) - XY(i - 1#, 0#), XY(i, 1#) - XY(i - 1#, 1#), XY(i, 2#) - XY(i - 1#, 2#)))
        Next i
    End If
    V = 1# / P(N - 1#)
    For i_ = 0# To N - 1# Step 1
        P(i_) = V * P(i_)
    Next i_
End Sub
