''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This file is a part of ALGLIB project.
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Utility subroutine performing the "safe" solution of system of linear
'equations with triangular coefficient matrices.
'
'The subroutine uses scaling and solves the scaled system A*x=s*b (where  s
'is  a  scalar  value)  instead  of  A*x=b,  choosing  s  so  that x can be
'represented by a floating-point number. The closer the system  gets  to  a
'singular, the less s is. If the system is singular, s=0 and x contains the
'non-trivial solution of equation A*x=0.
'
'The feature of an algorithm is that it could not cause an  overflow  or  a
'division by zero regardless of the matrix used as the input.
'
'The algorithm can solve systems of equations with  upper/lower  triangular
'matrices,  with/without unit diagonal, and systems of type A*x=b or A'*x=b
'(where A' is a transposed matrix A).
'
'Input parameters:
'    A       -   system matrix. Array whose indexes range within [0..N-1, 0..N-1].
'    N       -   size of matrix A.
'    X       -   right-hand member of a system.
'                Array whose index ranges within [0..N-1].
'    IsUpper -   matrix type. If it is True, the system matrix is the upper
'                triangular and is located in  the  corresponding  part  of
'                matrix A.
'    Trans   -   problem type. If it is True, the problem to be  solved  is
'                A'*x=b, otherwise it is A*x=b.
'    Isunit  -   matrix type. If it is True, the system matrix has  a  unit
'                diagonal (the elements on the main diagonal are  not  used
'                in the calculation process), otherwise the matrix is considered
'                to be a general triangular matrix.
'
'Output parameters:
'    X       -   solution. Array whose index ranges within [0..N-1].
'    S       -   scaling factor.
'
'  -- LAPACK auxiliary routine (version 3.0) --
'     Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd.,
'     Courant Institute, Argonne National Lab, and Rice University
'     June 30, 1992
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub RMatrixTRSafeSolve(ByRef A() As Double, _
         ByVal N As Long, _
         ByRef X() As Double, _
         ByRef S As Double, _
         ByVal IsUpper As Boolean, _
         ByVal IsTrans As Boolean, _
         ByVal Isunit As Boolean)
    Dim NORMIN As Boolean
    Dim CNORM() As Double
    Dim A1() As Double
    Dim X1() As Double
    Dim i As Long
    Dim i_ As Long
    Dim i1_ As Long
    
    '
    ' From 0-based to 1-based
    '
    NORMIN = False
    ReDim A1(1# To N, 1# To N)
    ReDim X1(1# To N)
    For i = 1# To N Step 1
        i1_ = (0#) - (1#)
        For i_ = 1# To N Step 1
            A1(i, i_) = A(i - 1#, i_ + i1_)
        Next i_
    Next i
    i1_ = (0#) - (1#)
    For i_ = 1# To N Step 1
        X1(i_) = X(i_ + i1_)
    Next i_
    
    '
    ' Solve 1-based
    '
    Call SafeSolveTriangular(A1, N, X1, S, IsUpper, IsTrans, Isunit, NORMIN, CNORM)
    
    '
    ' From 1-based to 0-based
    '
    i1_ = (1#) - (0#)
    For i_ = 0# To N - 1# Step 1
        X(i_) = X1(i_ + i1_)
    Next i_
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Obsolete 1-based subroutine.
'See RMatrixTRSafeSolve for 0-based replacement.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub SafeSolveTriangular(ByRef A() As Double, _
         ByVal N As Long, _
         ByRef X() As Double, _
         ByRef S As Double, _
         ByVal IsUpper As Boolean, _
         ByVal IsTrans As Boolean, _
         ByVal Isunit As Boolean, _
         ByVal NORMIN As Boolean, _
         ByRef CNORM() As Double)
    Dim i As Long
    Dim IMAX As Long
    Dim j As Long
    Dim JFIRST As Long
    Dim JINC As Long
    Dim JLAST As Long
    Dim JM1 As Long
    Dim JP1 As Long
    Dim IP1 As Long
    Dim IM1 As Long
    Dim K As Long
    Dim Flg As Long
    Dim V As Double
    Dim VD As Double
    Dim BIGNUM As Double
    Dim GROW As Double
    Dim REC As Double
    Dim SMLNUM As Double
    Dim SUMJ As Double
    Dim TJJ As Double
    Dim TJJS As Double
    Dim TMAX As Double
    Dim TSCAL As Double
    Dim USCAL As Double
    Dim XBND As Double
    Dim XJ As Double
    Dim XMAX As Double
    Dim NOTRAN As Boolean
    Dim UPPER As Boolean
    Dim NOunit As Boolean
    Dim i_ As Long
    UPPER = IsUpper
    NOTRAN = Not IsTrans
    NOunit = Not Isunit
    
    '
    ' Quick return if possible
    '
    If N = 0# Then
        Exit Sub
    End If
    
    '
    ' Determine machine dependent parameters to control overflow.
    '
    SMLNUM = MinRealNumber / (MachineEpsilon * 2#)
    BIGNUM = 1# / SMLNUM
    S = 1#
    If Not NORMIN Then
        ReDim CNORM(1# To N)
        
        '
        ' Compute the 1-norm of each column, not including the diagonal.
        '
        If UPPER Then
            
            '
            ' A is upper triangular.
            '
            For j = 1# To N Step 1
                V = 0#
                For K = 1# To j - 1# Step 1
                    V = V + Abs(A(K, j))
                Next K
                CNORM(j) = V
            Next j
        Else
            
            '
            ' A is lower triangular.
            '
            For j = 1# To N - 1# Step 1
                V = 0#
                For K = j + 1# To N Step 1
                    V = V + Abs(A(K, j))
                Next K
                CNORM(j) = V
            Next j
            CNORM(N) = 0#
        End If
    End If
    
    '
    ' Scale the column norms by TSCAL if the maximum element in CNORM is
    ' greater than BIGNUM.
    '
    IMAX = 1#
    For K = 2# To N Step 1
        If CNORM(K) > CNORM(IMAX) Then
            IMAX = K
        End If
    Next K
    TMAX = CNORM(IMAX)
    If TMAX <= BIGNUM Then
        TSCAL = 1#
    Else
        TSCAL = 1# / (SMLNUM * TMAX)
        For i_ = 1# To N Step 1
            CNORM(i_) = TSCAL * CNORM(i_)
        Next i_
    End If
    
    '
    ' Compute a bound on the computed solution vector to see if the
    ' Level 2 BLAS routine DTRSV can be used.
    '
    j = 1#
    For K = 2# To N Step 1
        If Abs(X(K)) > Abs(X(j)) Then
            j = K
        End If
    Next K
    XMAX = Abs(X(j))
    XBND = XMAX
    If NOTRAN Then
        
        '
        ' Compute the growth in A * x = b.
        '
        If UPPER Then
            JFIRST = N
            JLAST = 1#
            JINC = -1#
        Else
            JFIRST = 1#
            JLAST = N
            JINC = 1#
        End If
        If TSCAL <> 1# Then
            GROW = 0#
        Else
            If NOunit Then
                
                '
                ' A is non-unit triangular.
                '
                ' Compute GROW = 1/G(j) and XBND = 1/M(j).
                ' Initially, G(0) = max{x(i), i=1,...,n}.
                '
                GROW = 1# / MaxReal(XBND, SMLNUM)
                XBND = GROW
                j = JFIRST
                Do While JINC > 0# And j <= JLAST Or JINC < 0# And j >= JLAST
                    
                    '
                    ' Exit the loop if the growth factor is too small.
                    '
                    If GROW <= SMLNUM Then
                        Exit Do
                    End If
                    
                    '
                    ' M(j) = G(j-1) / abs(A(j,j))
                    '
                    TJJ = Abs(A(j, j))
                    XBND = MinReal(XBND, MinReal(1#, TJJ) * GROW)
                    If TJJ + CNORM(j) >= SMLNUM Then
                        
                        '
                        ' G(j) = G(j-1)*( 1 + CNORM(j) / abs(A(j,j)) )
                        '
                        GROW = GROW * (TJJ / (TJJ + CNORM(j)))
                    Else
                        
                        '
                        ' G(j) could overflow, set GROW to 0.
                        '
                        GROW = 0#
                    End If
                    If j = JLAST Then
                        GROW = XBND
                    End If
                    j = j + JINC
                Loop
            Else
                
                '
                ' A is unit triangular.
                '
                ' Compute GROW = 1/G(j), where G(0) = max{x(i), i=1,...,n}.
                '
                GROW = MinReal(1#, 1# / MaxReal(XBND, SMLNUM))
                j = JFIRST
                Do While JINC > 0# And j <= JLAST Or JINC < 0# And j >= JLAST
                    
                    '
                    ' Exit the loop if the growth factor is too small.
                    '
                    If GROW <= SMLNUM Then
                        Exit Do
                    End If
                    
                    '
                    ' G(j) = G(j-1)*( 1 + CNORM(j) )
                    '
                    GROW = GROW * (1# / (1# + CNORM(j)))
                    j = j + JINC
                Loop
            End If
        End If
    Else
        
        '
        ' Compute the growth in A' * x = b.
        '
        If UPPER Then
            JFIRST = 1#
            JLAST = N
            JINC = 1#
        Else
            JFIRST = N
            JLAST = 1#
            JINC = -1#
        End If
        If TSCAL <> 1# Then
            GROW = 0#
        Else
            If NOunit Then
                
                '
                ' A is non-unit triangular.
                '
                ' Compute GROW = 1/G(j) and XBND = 1/M(j).
                ' Initially, M(0) = max{x(i), i=1,...,n}.
                '
                GROW = 1# / MaxReal(XBND, SMLNUM)
                XBND = GROW
                j = JFIRST
                Do While JINC > 0# And j <= JLAST Or JINC < 0# And j >= JLAST
                    
                    '
                    ' Exit the loop if the growth factor is too small.
                    '
                    If GROW <= SMLNUM Then
                        Exit Do
                    End If
                    
                    '
                    ' G(j) = max( G(j-1), M(j-1)*( 1 + CNORM(j) ) )
                    '
                    XJ = 1# + CNORM(j)
                    GROW = MinReal(GROW, XBND / XJ)
                    
                    '
                    ' M(j) = M(j-1)*( 1 + CNORM(j) ) / abs(A(j,j))
                    '
                    TJJ = Abs(A(j, j))
                    If XJ > TJJ Then
                        XBND = XBND * (TJJ / XJ)
                    End If
                    If j = JLAST Then
                        GROW = MinReal(GROW, XBND)
                    End If
                    j = j + JINC
                Loop
            Else
                
                '
                ' A is unit triangular.
                '
                ' Compute GROW = 1/G(j), where G(0) = max{x(i), i=1,...,n}.
                '
                GROW = MinReal(1#, 1# / MaxReal(XBND, SMLNUM))
                j = JFIRST
                Do While JINC > 0# And j <= JLAST Or JINC < 0# And j >= JLAST
                    
                    '
                    ' Exit the loop if the growth factor is too small.
                    '
                    If GROW <= SMLNUM Then
                        Exit Do
                    End If
                    
                    '
                    ' G(j) = ( 1 + CNORM(j) )*G(j-1)
                    '
                    XJ = 1# + CNORM(j)
                    GROW = GROW / XJ
                    j = j + JINC
                Loop
            End If
        End If
    End If
    If GROW * TSCAL > SMLNUM Then
        
        '
        ' Use the Level 2 BLAS solve if the reciprocal of the bound on
        ' elements of X is not too small.
        '
        If UPPER And NOTRAN Or Not UPPER And Not NOTRAN Then
            If NOunit Then
                VD = A(N, N)
            Else
                VD = 1#
            End If
            X(N) = X(N) / VD
            For i = N - 1# To 1# Step -1
                IP1 = i + 1#
                If UPPER Then
                    V = 0#
                    For i_ = IP1 To N Step 1
                        V = V + A(i, i_) * X(i_)
                    Next i_
                Else
                    V = 0#
                    For i_ = IP1 To N Step 1
                        V = V + A(i_, i) * X(i_)
                    Next i_
                End If
                If NOunit Then
                    VD = A(i, i)
                Else
                    VD = 1#
                End If
                X(i) = (X(i) - V) / VD
            Next i
        Else
            If NOunit Then
                VD = A(1#, 1#)
            Else
                VD = 1#
            End If
            X(1#) = X(1#) / VD
            For i = 2# To N Step 1
                IM1 = i - 1#
                If UPPER Then
                    V = 0#
                    For i_ = 1# To IM1 Step 1
                        V = V + A(i_, i) * X(i_)
                    Next i_
                Else
                    V = 0#
                    For i_ = 1# To IM1 Step 1
                        V = V + A(i, i_) * X(i_)
                    Next i_
                End If
                If NOunit Then
                    VD = A(i, i)
                Else
                    VD = 1#
                End If
                X(i) = (X(i) - V) / VD
            Next i
        End If
    Else
        
        '
        ' Use a Level 1 BLAS solve, scaling intermediate results.
        '
        If XMAX > BIGNUM Then
            
            '
            ' Scale X so that its components are less than or equal to
            ' BIGNUM in absolute value.
            '
            S = BIGNUM / XMAX
            For i_ = 1# To N Step 1
                X(i_) = S * X(i_)
            Next i_
            XMAX = BIGNUM
        End If
        If NOTRAN Then
            
            '
            ' Solve A * x = b
            '
            j = JFIRST
            Do While JINC > 0# And j <= JLAST Or JINC < 0# And j >= JLAST
                
                '
                ' Compute x(j) = b(j) / A(j,j), scaling x if necessary.
                '
                XJ = Abs(X(j))
                Flg = 0#
                If NOunit Then
                    TJJS = A(j, j) * TSCAL
                Else
                    TJJS = TSCAL
                    If TSCAL = 1# Then
                        Flg = 100#
                    End If
                End If
                If Flg <> 100# Then
                    TJJ = Abs(TJJS)
                    If TJJ > SMLNUM Then
                        
                        '
                        ' abs(A(j,j)) > SMLNUM:
                        '
                        If TJJ < 1# Then
                            If XJ > TJJ * BIGNUM Then
                                
                                '
                                ' Scale x by 1/b(j).
                                '
                                REC = 1# / XJ
                                For i_ = 1# To N Step 1
                                    X(i_) = REC * X(i_)
                                Next i_
                                S = S * REC
                                XMAX = XMAX * REC
                            End If
                        End If
                        X(j) = X(j) / TJJS
                        XJ = Abs(X(j))
                    Else
                        If TJJ > 0# Then
                            
                            '
                            ' 0 < abs(A(j,j)) <= SMLNUM:
                            '
                            If XJ > TJJ * BIGNUM Then
                                
                                '
                                ' Scale x by (1/abs(x(j)))*abs(A(j,j))*BIGNUM
                                ' to avoid overflow when dividing by A(j,j).
                                '
                                REC = TJJ * BIGNUM / XJ
                                If CNORM(j) > 1# Then
                                    
                                    '
                                    ' Scale by 1/CNORM(j) to avoid overflow when
                                    ' multiplying x(j) times column j.
                                    '
                                    REC = REC / CNORM(j)
                                End If
                                For i_ = 1# To N Step 1
                                    X(i_) = REC * X(i_)
                                Next i_
                                S = S * REC
                                XMAX = XMAX * REC
                            End If
                            X(j) = X(j) / TJJS
                            XJ = Abs(X(j))
                        Else
                            
                            '
                            ' A(j,j) = 0:  Set x(1:n) = 0, x(j) = 1, and
                            ' scale = 0, and compute a solution to A*x = 0.
                            '
                            For i = 1# To N Step 1
                                X(i) = 0#
                            Next i
                            X(j) = 1#
                            XJ = 1#
                            S = 0#
                            XMAX = 0#
                        End If
                    End If
                End If
                
                '
                ' Scale x if necessary to avoid overflow when adding a
                ' multiple of column j of A.
                '
                If XJ > 1# Then
                    REC = 1# / XJ
                    If CNORM(j) > (BIGNUM - XMAX) * REC Then
                        
                        '
                        ' Scale x by 1/(2*abs(x(j))).
                        '
                        REC = REC * 0.5
                        For i_ = 1# To N Step 1
                            X(i_) = REC * X(i_)
                        Next i_
                        S = S * REC
                    End If
                Else
                    If XJ * CNORM(j) > BIGNUM - XMAX Then
                        
                        '
                        ' Scale x by 1/2.
                        '
                        For i_ = 1# To N Step 1
                            X(i_) = 0.5 * X(i_)
                        Next i_
                        S = S * 0.5
                    End If
                End If
                If UPPER Then
                    If j > 1# Then
                        
                        '
                        ' Compute the update
                        ' x(1:j-1) := x(1:j-1) - x(j) * A(1:j-1,j)
                        '
                        V = X(j) * TSCAL
                        JM1 = j - 1#
                        For i_ = 1# To JM1 Step 1
                            X(i_) = X(i_) - V * A(i_, j)
                        Next i_
                        i = 1#
                        For K = 2# To j - 1# Step 1
                            If Abs(X(K)) > Abs(X(i)) Then
                                i = K
                            End If
                        Next K
                        XMAX = Abs(X(i))
                    End If
                Else
                    If j < N Then
                        
                        '
                        ' Compute the update
                        ' x(j+1:n) := x(j+1:n) - x(j) * A(j+1:n,j)
                        '
                        JP1 = j + 1#
                        V = X(j) * TSCAL
                        For i_ = JP1 To N Step 1
                            X(i_) = X(i_) - V * A(i_, j)
                        Next i_
                        i = j + 1#
                        For K = j + 2# To N Step 1
                            If Abs(X(K)) > Abs(X(i)) Then
                                i = K
                            End If
                        Next K
                        XMAX = Abs(X(i))
                    End If
                End If
                j = j + JINC
            Loop
        Else
            
            '
            ' Solve A' * x = b
            '
            j = JFIRST
            Do While JINC > 0# And j <= JLAST Or JINC < 0# And j >= JLAST
                
                '
                ' Compute x(j) = b(j) - sum A(k,j)*x(k).
                '   k<>j
                '
                XJ = Abs(X(j))
                USCAL = TSCAL
                REC = 1# / MaxReal(XMAX, 1#)
                If CNORM(j) > (BIGNUM - XJ) * REC Then
                    
                    '
                    ' If x(j) could overflow, scale x by 1/(2*XMAX).
                    '
                    REC = REC * 0.5
                    If NOunit Then
                        TJJS = A(j, j) * TSCAL
                    Else
                        TJJS = TSCAL
                    End If
                    TJJ = Abs(TJJS)
                    If TJJ > 1# Then
                        
                        '
                        ' Divide by A(j,j) when scaling x if A(j,j) > 1.
                        '
                        REC = MinReal(1#, REC * TJJ)
                        USCAL = USCAL / TJJS
                    End If
                    If REC < 1# Then
                        For i_ = 1# To N Step 1
                            X(i_) = REC * X(i_)
                        Next i_
                        S = S * REC
                        XMAX = XMAX * REC
                    End If
                End If
                SUMJ = 0#
                If USCAL = 1# Then
                    
                    '
                    ' If the scaling needed for A in the dot product is 1,
                    ' call DDOT to perform the dot product.
                    '
                    If UPPER Then
                        If j > 1# Then
                            JM1 = j - 1#
                            SUMJ = 0#
                            For i_ = 1# To JM1 Step 1
                                SUMJ = SUMJ + A(i_, j) * X(i_)
                            Next i_
                        Else
                            SUMJ = 0#
                        End If
                    Else
                        If j < N Then
                            JP1 = j + 1#
                            SUMJ = 0#
                            For i_ = JP1 To N Step 1
                                SUMJ = SUMJ + A(i_, j) * X(i_)
                            Next i_
                        End If
                    End If
                Else
                    
                    '
                    ' Otherwise, use in-line code for the dot product.
                    '
                    If UPPER Then
                        For i = 1# To j - 1# Step 1
                            V = A(i, j) * USCAL
                            SUMJ = SUMJ + V * X(i)
                        Next i
                    Else
                        If j < N Then
                            For i = j + 1# To N Step 1
                                V = A(i, j) * USCAL
                                SUMJ = SUMJ + V * X(i)
                            Next i
                        End If
                    End If
                End If
                If USCAL = TSCAL Then
                    
                    '
                    ' Compute x(j) := ( x(j) - sumj ) / A(j,j) if 1/A(j,j)
                    ' was not used to scale the dotproduct.
                    '
                    X(j) = X(j) - SUMJ
                    XJ = Abs(X(j))
                    Flg = 0#
                    If NOunit Then
                        TJJS = A(j, j) * TSCAL
                    Else
                        TJJS = TSCAL
                        If TSCAL = 1# Then
                            Flg = 150#
                        End If
                    End If
                    
                    '
                    ' Compute x(j) = x(j) / A(j,j), scaling if necessary.
                    '
                    If Flg <> 150# Then
                        TJJ = Abs(TJJS)
                        If TJJ > SMLNUM Then
                            
                            '
                            ' abs(A(j,j)) > SMLNUM:
                            '
                            If TJJ < 1# Then
                                If XJ > TJJ * BIGNUM Then
                                    
                                    '
                                    ' Scale X by 1/abs(x(j)).
                                    '
                                    REC = 1# / XJ
                                    For i_ = 1# To N Step 1
                                        X(i_) = REC * X(i_)
                                    Next i_
                                    S = S * REC
                                    XMAX = XMAX * REC
                                End If
                            End If
                            X(j) = X(j) / TJJS
                        Else
                            If TJJ > 0# Then
                                
                                '
                                ' 0 < abs(A(j,j)) <= SMLNUM:
                                '
                                If XJ > TJJ * BIGNUM Then
                                    
                                    '
                                    ' Scale x by (1/abs(x(j)))*abs(A(j,j))*BIGNUM.
                                    '
                                    REC = TJJ * BIGNUM / XJ
                                    For i_ = 1# To N Step 1
                                        X(i_) = REC * X(i_)
                                    Next i_
                                    S = S * REC
                                    XMAX = XMAX * REC
                                End If
                                X(j) = X(j) / TJJS
                            Else
                                
                                '
                                ' A(j,j) = 0:  Set x(1:n) = 0, x(j) = 1, and
                                ' scale = 0, and compute a solution to A'*x = 0.
                                '
                                For i = 1# To N Step 1
                                    X(i) = 0#
                                Next i
                                X(j) = 1#
                                S = 0#
                                XMAX = 0#
                            End If
                        End If
                    End If
                Else
                    
                    '
                    ' Compute x(j) := x(j) / A(j,j)  - sumj if the dot
                    ' product has already been divided by 1/A(j,j).
                    '
                    X(j) = X(j) / TJJS - SUMJ
                End If
                XMAX = MaxReal(XMAX, Abs(X(j)))
                j = j + JINC
            Loop
        End If
        S = S / TSCAL
    End If
    
    '
    ' Scale the column norms by 1/TSCAL for return.
    '
    If TSCAL <> 1# Then
        V = 1# / TSCAL
        For i_ = 1# To N Step 1
            CNORM(i_) = V * CNORM(i_)
        Next i_
    End If
End Sub

