''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2010, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Data types
Public Type KDTree
    N As Long
    NX As Long
    NY As Long
    NormType As Long
    DistMatrixType As Long
    XY() As Double
    Tags() As Long
    BoxMin() As Double
    BoxMax() As Double
    CurBoxMin() As Double
    CurBoxMax() As Double
    CurDist As Double
    Nodes() As Long
    Splits() As Double
    X() As Double
    KNeeded As Long
    RNeeded As Double
    SelfMatch As Boolean
    ApproxF As Double
    KCur As Long
    Idx() As Long
    R() As Double
    Buf() As Double
    DebugCounter As Long
End Type
'Global constants
Private Const SplitNodeSize As Long = 6#
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'KD-tree creation
'
'This subroutine creates KD-tree from set of X-values and optional Y-values
'
'INPUT PARAMETERS
'    XY      -   dataset, array[0..N-1,0..NX+NY-1].
'                one row corresponds to one point.
'                first NX columns contain X-values, next NY (NY may be zero)
'                columns may contain associated Y-values
'    N       -   number of points, N>=1
'    NX      -   space dimension, NX>=1.
'    NY      -   number of optional Y-values, NY>=0.
'    NormType-   norm type:
'                * 0 denotes infinity-norm
'                * 1 denotes 1-norm
'                * 2 denotes 2-norm (Euclidean norm)
'
'OUTPUT PARAMETERS
'    KDT     -   KD-tree
'
'
'NOTES
'
'1. KD-tree  creation  have O(N*logN) complexity and O(N*(2*NX+NY))  memory
'   requirements.
'2. Although KD-trees may be used with any combination of N  and  NX,  they
'   are more efficient than brute-force search only when N >> 4^NX. So they
'   are most useful in low-dimensional tasks (NX=2, NX=3). NX=1  is another
'   inefficient case, because  simple  binary  search  (without  additional
'   structures) is much more efficient in such tasks than KD-trees.
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub KDTreeBuild(ByRef XY() As Double, _
         ByVal N As Long, _
         ByVal NX As Long, _
         ByVal NY As Long, _
         ByVal NormType As Long, _
         ByRef KDT As KDTree)
    Dim Tags() As Long
    Dim i As Long
    ReDim Tags(0 To N - 1)
    For i = 0# To N - 1# Step 1
        Tags(i) = 0#
    Next i
    Call KDTreeBuildTagged(XY, Tags, N, NX, NY, NormType, KDT)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'KD-tree creation
'
'This  subroutine  creates  KD-tree  from set of X-values, integer tags and
'optional Y-values
'
'INPUT PARAMETERS
'    XY      -   dataset, array[0..N-1,0..NX+NY-1].
'                one row corresponds to one point.
'                first NX columns contain X-values, next NY (NY may be zero)
'                columns may contain associated Y-values
'    Tags    -   tags, array[0..N-1], contains integer tags associated
'                with points.
'    N       -   number of points, N>=1
'    NX      -   space dimension, NX>=1.
'    NY      -   number of optional Y-values, NY>=0.
'    NormType-   norm type:
'                * 0 denotes infinity-norm
'                * 1 denotes 1-norm
'                * 2 denotes 2-norm (Euclidean norm)
'
'OUTPUT PARAMETERS
'    KDT     -   KD-tree
'
'NOTES
'
'1. KD-tree  creation  have O(N*logN) complexity and O(N*(2*NX+NY))  memory
'   requirements.
'2. Although KD-trees may be used with any combination of N  and  NX,  they
'   are more efficient than brute-force search only when N >> 4^NX. So they
'   are most useful in low-dimensional tasks (NX=2, NX=3). NX=1  is another
'   inefficient case, because  simple  binary  search  (without  additional
'   structures) is much more efficient in such tasks than KD-trees.
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub KDTreeBuildTagged(ByRef XY() As Double, _
         ByRef Tags() As Long, _
         ByVal N As Long, _
         ByVal NX As Long, _
         ByVal NY As Long, _
         ByVal NormType As Long, _
         ByRef KDT As KDTree)
    Dim i As Long
    Dim J As Long
    Dim MaxNodes As Long
    Dim NodesOffs As Long
    Dim SplitsOffs As Long
    Dim i_ As Long
    Dim i1_ As Long
    
    '
    ' initialize
    '
    KDT.N = N
    KDT.NX = NX
    KDT.NY = NY
    KDT.NormType = NormType
    KDT.DistMatrixType = 0#
    ReDim KDT.XY(0 To N - 1, 0 To 2# * NX + NY - 1)
    ReDim KDT.Tags(0 To N - 1)
    ReDim KDT.Idx(0 To N - 1)
    ReDim KDT.R(0 To N - 1)
    ReDim KDT.X(0 To NX - 1)
    ReDim KDT.Buf(0 To MaxInt(N, NX) - 1)
    
    '
    ' Initial fill
    '
    For i = 0# To N - 1# Step 1
        For i_ = 0# To NX - 1# Step 1
            KDT.XY(i, i_) = XY(i, i_)
        Next i_
        i1_ = (0#) - (NX)
        For i_ = NX To 2# * NX + NY - 1# Step 1
            KDT.XY(i, i_) = XY(i, i_ + i1_)
        Next i_
        KDT.Tags(i) = Tags(i)
    Next i
    
    '
    ' Determine bounding box
    '
    ReDim KDT.BoxMin(0 To NX - 1)
    ReDim KDT.BoxMax(0 To NX - 1)
    ReDim KDT.CurBoxMin(0 To NX - 1)
    ReDim KDT.CurBoxMax(0 To NX - 1)
    For i_ = 0# To NX - 1# Step 1
        KDT.BoxMin(i_) = KDT.XY(0#, i_)
    Next i_
    For i_ = 0# To NX - 1# Step 1
        KDT.BoxMax(i_) = KDT.XY(0#, i_)
    Next i_
    For i = 1# To N - 1# Step 1
        For J = 0# To NX - 1# Step 1
            KDT.BoxMin(J) = MinReal(KDT.BoxMin(J), KDT.XY(i, J))
            KDT.BoxMax(J) = MaxReal(KDT.BoxMax(J), KDT.XY(i, J))
        Next J
    Next i
    
    '
    ' prepare tree structure
    ' * MaxNodes=N because we guarantee no trivial splits, i.e.
    '   every split will generate two non-empty boxes
    '
    MaxNodes = N
    ReDim KDT.Nodes(0 To SplitNodeSize * 2# * MaxNodes - 1)
    ReDim KDT.Splits(0 To 2# * MaxNodes - 1)
    NodesOffs = 0#
    SplitsOffs = 0#
    For i_ = 0# To NX - 1# Step 1
        KDT.CurBoxMin(i_) = KDT.BoxMin(i_)
    Next i_
    For i_ = 0# To NX - 1# Step 1
        KDT.CurBoxMax(i_) = KDT.BoxMax(i_)
    Next i_
    Call KDTreeGenerateTreeRec(KDT, NodesOffs, SplitsOffs, 0#, N, 8#)
    
    '
    ' Set current query size to 0
    '
    KDT.KCur = 0#
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'K-NN query: K nearest neighbors
'
'INPUT PARAMETERS
'    KDT         -   KD-tree
'    X           -   point, array[0..NX-1].
'    K           -   number of neighbors to return, K>=1
'    SelfMatch   -   whether self-matches are allowed:
'                    * if True, nearest neighbor may be the point itself
'                      (if it exists in original dataset)
'                    * if False, then only points with non-zero distance
'                      are returned
'
'RESULT
'    number of actual neighbors found (either K or N, if K>N).
'
'This  subroutine  performs  query  and  stores  its result in the internal
'structures of the KD-tree. You can use  following  subroutines  to  obtain
'these results:
'* KDTreeQueryResultsX() to get X-values
'* KDTreeQueryResultsXY() to get X- and Y-values
'* KDTreeQueryResultsTags() to get tag values
'* KDTreeQueryResultsDistances() to get distances
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function KDTreeQueryKNN(ByRef KDT As KDTree, _
         ByRef X() As Double, _
         ByVal K As Long, _
         ByVal SelfMatch As Boolean) As Long
    Dim Result As Long
    Result = KDTreeQueryAKNN(KDT, X, K, SelfMatch, 0#)
    KDTreeQueryKNN = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'R-NN query: all points within R-sphere centered at X
'
'INPUT PARAMETERS
'    KDT         -   KD-tree
'    X           -   point, array[0..NX-1].
'    R           -   radius of sphere (in corresponding norm), R>0
'    SelfMatch   -   whether self-matches are allowed:
'                    * if True, nearest neighbor may be the point itself
'                      (if it exists in original dataset)
'                    * if False, then only points with non-zero distance
'                      are returned
'
'RESULT
'    number of neighbors found, >=0
'
'This  subroutine  performs  query  and  stores  its result in the internal
'structures of the KD-tree. You can use  following  subroutines  to  obtain
'actual results:
'* KDTreeQueryResultsX() to get X-values
'* KDTreeQueryResultsXY() to get X- and Y-values
'* KDTreeQueryResultsTags() to get tag values
'* KDTreeQueryResultsDistances() to get distances
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function KDTreeQueryRNN(ByRef KDT As KDTree, _
         ByRef X() As Double, _
         ByVal R As Double, _
         ByVal SelfMatch As Boolean) As Long
    Dim Result As Long
    Dim i As Long
    Dim J As Long
    Dim VX As Double
    Dim VMin As Double
    Dim VMax As Double
    
    '
    ' Prepare parameters
    '
    KDT.KNeeded = 0#
    If KDT.NormType <> 2# Then
        KDT.RNeeded = R
    Else
        KDT.RNeeded = Square(R)
    End If
    KDT.SelfMatch = SelfMatch
    KDT.ApproxF = 1#
    KDT.KCur = 0#
    
    '
    ' calculate distance from point to current bounding box
    '
    Call KDTreeInitBox(KDT, X)
    
    '
    ' call recursive search
    ' results are returned as heap
    '
    Call KDTreeQueryNNRec(KDT, 0#)
    
    '
    ' pop from heap to generate ordered representation
    '
    ' last element is non pop'ed because it is already in
    ' its place
    '
    Result = KDT.KCur
    J = KDT.KCur
    For i = KDT.KCur To 2# Step -1
        Call TagHeapPopI(KDT.R, KDT.Idx, J)
    Next i
    KDTreeQueryRNN = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'K-NN query: approximate K nearest neighbors
'
'INPUT PARAMETERS
'    KDT         -   KD-tree
'    X           -   point, array[0..NX-1].
'    K           -   number of neighbors to return, K>=1
'    SelfMatch   -   whether self-matches are allowed:
'                    * if True, nearest neighbor may be the point itself
'                      (if it exists in original dataset)
'                    * if False, then only points with non-zero distance
'                      are returned
'    Eps         -   approximation factor, Eps>=0. eps-approximate  nearest
'                    neighbor  is  a  neighbor  whose distance from X is at
'                    most (1+eps) times distance of true nearest neighbor.
'
'RESULT
'    number of actual neighbors found (either K or N, if K>N).
'
'NOTES
'    significant performance gain may be achieved only when Eps  is  is  on
'    the order of magnitude of 1 or larger.
'
'This  subroutine  performs  query  and  stores  its result in the internal
'structures of the KD-tree. You can use  following  subroutines  to  obtain
'these results:
'* KDTreeQueryResultsX() to get X-values
'* KDTreeQueryResultsXY() to get X- and Y-values
'* KDTreeQueryResultsTags() to get tag values
'* KDTreeQueryResultsDistances() to get distances
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function KDTreeQueryAKNN(ByRef KDT As KDTree, _
         ByRef X() As Double, _
         ByVal K As Long, _
         ByVal SelfMatch As Boolean, _
         ByVal Eps As Double) As Long
    Dim Result As Long
    Dim i As Long
    Dim J As Long
    Dim VX As Double
    Dim VMin As Double
    Dim VMax As Double
    
    '
    ' Prepare parameters
    '
    K = MinInt(K, KDT.N)
    KDT.KNeeded = K
    KDT.RNeeded = 0#
    KDT.SelfMatch = SelfMatch
    If KDT.NormType = 2# Then
        KDT.ApproxF = 1# / Square(1# + Eps)
    Else
        KDT.ApproxF = 1# / (1# + Eps)
    End If
    KDT.KCur = 0#
    
    '
    ' calculate distance from point to current bounding box
    '
    Call KDTreeInitBox(KDT, X)
    
    '
    ' call recursive search
    ' results are returned as heap
    '
    Call KDTreeQueryNNRec(KDT, 0#)
    
    '
    ' pop from heap to generate ordered representation
    '
    ' last element is non pop'ed because it is already in
    ' its place
    '
    Result = KDT.KCur
    J = KDT.KCur
    For i = KDT.KCur To 2# Step -1
        Call TagHeapPopI(KDT.R, KDT.Idx, J)
    Next i
    KDTreeQueryAKNN = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'X-values from last query
'
'INPUT PARAMETERS
'    KDT     -   KD-tree
'    X       -   pre-allocated array, at least K rows, at least NX columns
'
'OUTPUT PARAMETERS
'    X       -   K rows are filled with X-values
'    K       -   number of points
'
'NOTE
'    points are ordered by distance from the query point (first = closest)
'
'SEE ALSO
'* KDTreeQueryResultsXY()            X- and Y-values
'* KDTreeQueryResultsTags()          tag values
'* KDTreeQueryResultsDistances()     distances
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub KDTreeQueryResultsX(ByRef KDT As KDTree, _
         ByRef X() As Double, _
         ByRef K As Long)
    Dim i As Long
    Dim i_ As Long
    Dim i1_ As Long
    K = KDT.KCur
    For i = 0# To K - 1# Step 1
        i1_ = (KDT.NX) - (0#)
        For i_ = 0# To KDT.NX - 1# Step 1
            X(i, i_) = KDT.XY(KDT.Idx(i), i_ + i1_)
        Next i_
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'X- and Y-values from last query
'
'INPUT PARAMETERS
'    KDT     -   KD-tree
'    XY      -   pre-allocated array, at least K rows, at least NX+NY columns
'
'OUTPUT PARAMETERS
'    X       -   K rows are filled with points: first NX columns with
'                X-values, next NY columns - with Y-values.
'    K       -   number of points
'
'NOTE
'    points are ordered by distance from the query point (first = closest)
'
'SEE ALSO
'* KDTreeQueryResultsX()             X-values
'* KDTreeQueryResultsTags()          tag values
'* KDTreeQueryResultsDistances()     distances
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub KDTreeQueryResultsXY(ByRef KDT As KDTree, _
         ByRef XY() As Double, _
         ByRef K As Long)
    Dim i As Long
    Dim i_ As Long
    Dim i1_ As Long
    K = KDT.KCur
    For i = 0# To K - 1# Step 1
        i1_ = (KDT.NX) - (0#)
        For i_ = 0# To KDT.NX + KDT.NY - 1# Step 1
            XY(i, i_) = KDT.XY(KDT.Idx(i), i_ + i1_)
        Next i_
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'point tags from last query
'
'INPUT PARAMETERS
'    KDT     -   KD-tree
'    Tags    -   pre-allocated array, at least K elements
'
'OUTPUT PARAMETERS
'    Tags    -   first K elements are filled with tags associated with points,
'                or, when no tags were supplied, with zeros
'    K       -   number of points
'
'NOTE
'    points are ordered by distance from the query point (first = closest)
'
'SEE ALSO
'* KDTreeQueryResultsX()             X-values
'* KDTreeQueryResultsXY()            X- and Y-values
'* KDTreeQueryResultsDistances()     distances
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub KDTreeQueryResultsTags(ByRef KDT As KDTree, _
         ByRef Tags() As Long, _
         ByRef K As Long)
    Dim i As Long
    K = KDT.KCur
    For i = 0# To K - 1# Step 1
        Tags(i) = KDT.Tags(KDT.Idx(i))
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Distances from last query
'
'INPUT PARAMETERS
'    KDT     -   KD-tree
'    R       -   pre-allocated array, at least K elements
'
'OUTPUT PARAMETERS
'    R       -   first K elements are filled with distances
'                (in corresponding norm)
'    K       -   number of points
'
'NOTE
'    points are ordered by distance from the query point (first = closest)
'
'SEE ALSO
'* KDTreeQueryResultsX()             X-values
'* KDTreeQueryResultsXY()            X- and Y-values
'* KDTreeQueryResultsTags()          tag values
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub KDTreeQueryResultsDistances(ByRef KDT As KDTree, _
         ByRef R() As Double, _
         ByRef K As Long)
    Dim i As Long
    K = KDT.KCur
    
    '
    ' unload norms
    '
    ' Abs() call is used to handle cases with negative norms
    ' (generated during KFN requests)
    '
    If KDT.NormType = 0# Then
        For i = 0# To K - 1# Step 1
            R(i) = Abs(KDT.R(i))
        Next i
    End If
    If KDT.NormType = 1# Then
        For i = 0# To K - 1# Step 1
            R(i) = Abs(KDT.R(i))
        Next i
    End If
    If KDT.NormType = 2# Then
        For i = 0# To K - 1# Step 1
            R(i) = Sqr(Abs(KDT.R(i)))
        Next i
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Rearranges nodes [I1,I2) using partition in D-th dimension with S as threshold.
'Returns split position I3: [I1,I3) and [I3,I2) are created as result.
'
'This subroutine doesn't create tree structures, just rearranges nodes.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub KDTreeSplit(ByRef KDT As KDTree, _
         ByVal I1 As Long, _
         ByVal I2 As Long, _
         ByVal D As Long, _
         ByVal S As Double, _
         ByRef I3 As Long)
    Dim i As Long
    Dim J As Long
    Dim ILeft As Long
    Dim IRight As Long
    Dim V As Double
    
    '
    ' split XY/Tags in two parts:
    ' * [ILeft,IRight] is non-processed part of XY/Tags
    '
    ' After cycle is done, we have Ileft=IRight. We deal with
    ' this element separately.
    '
    ' After this, [I1,ILeft) contains left part, and [ILeft,I2)
    ' contains right part.
    '
    ILeft = I1
    IRight = I2 - 1#
    Do While ILeft < IRight
        If KDT.XY(ILeft, D) <= S Then
            
            '
            ' XY[ILeft] is on its place.
            ' Advance ILeft.
            '
            ILeft = ILeft + 1#
        Else
            
            '
            ' XY[ILeft,..] must be at IRight.
            ' Swap and advance IRight.
            '
            For i = 0# To 2# * KDT.NX + KDT.NY - 1# Step 1
                V = KDT.XY(ILeft, i)
                KDT.XY(ILeft, i) = KDT.XY(IRight, i)
                KDT.XY(IRight, i) = V
            Next i
            J = KDT.Tags(ILeft)
            KDT.Tags(ILeft) = KDT.Tags(IRight)
            KDT.Tags(IRight) = J
            IRight = IRight - 1#
        End If
    Loop
    If KDT.XY(ILeft, D) <= S Then
        ILeft = ILeft + 1#
    Else
        IRight = IRight - 1#
    End If
    I3 = ILeft
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Recursive kd-tree generation subroutine.
'
'PARAMETERS
'    KDT         tree
'    NodesOffs   unused part of Nodes[] which must be filled by tree
'    SplitsOffs  unused part of Splits[]
'    I1, I2      points from [I1,I2) are processed
'
'NodesOffs[] and SplitsOffs[] must be large enough.
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub KDTreeGenerateTreeRec(ByRef KDT As KDTree, _
         ByRef NodesOffs As Long, _
         ByRef SplitsOffs As Long, _
         ByVal I1 As Long, _
         ByVal I2 As Long, _
         ByVal MaxLeafSize As Long)
    Dim N As Long
    Dim NX As Long
    Dim NY As Long
    Dim i As Long
    Dim J As Long
    Dim OldOffs As Long
    Dim I3 As Long
    Dim CntLess As Long
    Dim CntGreater As Long
    Dim MinV As Double
    Dim MaxV As Double
    Dim MinIdx As Long
    Dim MaxIdx As Long
    Dim D As Long
    Dim DS As Double
    Dim S As Double
    Dim V As Double
    Dim i_ As Long
    Dim i1_ As Long
    
    '
    ' Generate leaf if needed
    '
    If I2 - I1 <= MaxLeafSize Then
        KDT.Nodes(NodesOffs + 0#) = I2 - I1
        KDT.Nodes(NodesOffs + 1#) = I1
        NodesOffs = NodesOffs + 2#
        Exit Sub
    End If
    
    '
    ' Load values for easier access
    '
    NX = KDT.NX
    NY = KDT.NY
    
    '
    ' select dimension to split:
    ' * D is a dimension number
    '
    D = 0#
    DS = KDT.CurBoxMax(0#) - KDT.CurBoxMin(0#)
    For i = 1# To NX - 1# Step 1
        V = KDT.CurBoxMax(i) - KDT.CurBoxMin(i)
        If V > DS Then
            DS = V
            D = i
        End If
    Next i
    
    '
    ' Select split position S using sliding midpoint rule,
    ' rearrange points into [I1,I3) and [I3,I2)
    '
    S = KDT.CurBoxMin(D) + 0.5 * DS
    i1_ = (I1) - (0#)
    For i_ = 0# To I2 - I1 - 1# Step 1
        KDT.Buf(i_) = KDT.XY(i_ + i1_, D)
    Next i_
    N = I2 - I1
    CntLess = 0#
    CntGreater = 0#
    MinV = KDT.Buf(0#)
    MaxV = KDT.Buf(0#)
    MinIdx = I1
    MaxIdx = I1
    For i = 0# To N - 1# Step 1
        V = KDT.Buf(i)
        If V < MinV Then
            MinV = V
            MinIdx = I1 + i
        End If
        If V > MaxV Then
            MaxV = V
            MaxIdx = I1 + i
        End If
        If V < S Then
            CntLess = CntLess + 1#
        End If
        If V > S Then
            CntGreater = CntGreater + 1#
        End If
    Next i
    If CntLess > 0# And CntGreater > 0# Then
        
        '
        ' normal midpoint split
        '
        Call KDTreeSplit(KDT, I1, I2, D, S, I3)
    Else
        
        '
        ' sliding midpoint
        '
        If CntLess = 0# Then
            
            '
            ' 1. move split to MinV,
            ' 2. place one point to the left bin (move to I1),
            '    others - to the right bin
            '
            S = MinV
            If MinIdx <> I1 Then
                For i = 0# To 2# * KDT.NX + KDT.NY - 1# Step 1
                    V = KDT.XY(MinIdx, i)
                    KDT.XY(MinIdx, i) = KDT.XY(I1, i)
                    KDT.XY(I1, i) = V
                Next i
                J = KDT.Tags(MinIdx)
                KDT.Tags(MinIdx) = KDT.Tags(I1)
                KDT.Tags(I1) = J
            End If
            I3 = I1 + 1#
        Else
            
            '
            ' 1. move split to MaxV,
            ' 2. place one point to the right bin (move to I2-1),
            '    others - to the left bin
            '
            S = MaxV
            If MaxIdx <> I2 - 1# Then
                For i = 0# To 2# * KDT.NX + KDT.NY - 1# Step 1
                    V = KDT.XY(MaxIdx, i)
                    KDT.XY(MaxIdx, i) = KDT.XY(I2 - 1#, i)
                    KDT.XY(I2 - 1#, i) = V
                Next i
                J = KDT.Tags(MaxIdx)
                KDT.Tags(MaxIdx) = KDT.Tags(I2 - 1#)
                KDT.Tags(I2 - 1#) = J
            End If
            I3 = I2 - 1#
        End If
    End If
    
    '
    ' Generate 'split' node
    '
    KDT.Nodes(NodesOffs + 0#) = 0#
    KDT.Nodes(NodesOffs + 1#) = D
    KDT.Nodes(NodesOffs + 2#) = SplitsOffs
    KDT.Splits(SplitsOffs + 0#) = S
    OldOffs = NodesOffs
    NodesOffs = NodesOffs + SplitNodeSize
    SplitsOffs = SplitsOffs + 1#
    
    '
    ' Recirsive generation:
    ' * update CurBox
    ' * call subroutine
    ' * restore CurBox
    '
    KDT.Nodes(OldOffs + 3#) = NodesOffs
    V = KDT.CurBoxMax(D)
    KDT.CurBoxMax(D) = S
    Call KDTreeGenerateTreeRec(KDT, NodesOffs, SplitsOffs, I1, I3, MaxLeafSize)
    KDT.CurBoxMax(D) = V
    KDT.Nodes(OldOffs + 4#) = NodesOffs
    V = KDT.CurBoxMin(D)
    KDT.CurBoxMin(D) = S
    Call KDTreeGenerateTreeRec(KDT, NodesOffs, SplitsOffs, I3, I2, MaxLeafSize)
    KDT.CurBoxMin(D) = V
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Recursive subroutine for NN queries.
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub KDTreeQueryNNRec(ByRef KDT As KDTree, ByVal Offs As Long)
    Dim PtDist As Double
    Dim i As Long
    Dim J As Long
    Dim K As Long
    Dim TI As Long
    Dim NX As Long
    Dim I1 As Long
    Dim I2 As Long
    Dim K1 As Long
    Dim K2 As Long
    Dim R1 As Double
    Dim R2 As Double
    Dim D As Long
    Dim S As Double
    Dim V As Double
    Dim T1 As Double
    Dim ChildBestOffs As Long
    Dim ChildWorstOffs As Long
    Dim ChildOffs As Long
    Dim PrevDist As Double
    Dim ToDive As Boolean
    Dim BestIsLeft As Boolean
    Dim UpdateMin As Boolean
    
    '
    ' Leaf node.
    ' Process points.
    '
    If KDT.Nodes(Offs) > 0# Then
        I1 = KDT.Nodes(Offs + 1#)
        I2 = I1 + KDT.Nodes(Offs)
        For i = I1 To I2 - 1# Step 1
            
            '
            ' Calculate distance
            '
            PtDist = 0#
            NX = KDT.NX
            If KDT.NormType = 0# Then
                For J = 0# To NX - 1# Step 1
                    PtDist = MaxReal(PtDist, Abs(KDT.XY(i, J) - KDT.X(J)))
                Next J
            End If
            If KDT.NormType = 1# Then
                For J = 0# To NX - 1# Step 1
                    PtDist = PtDist + Abs(KDT.XY(i, J) - KDT.X(J))
                Next J
            End If
            If KDT.NormType = 2# Then
                For J = 0# To NX - 1# Step 1
                    PtDist = PtDist + Square(KDT.XY(i, J) - KDT.X(J))
                Next J
            End If
            
            '
            ' Skip points with zero distance if self-matches are turned off
            '
            If PtDist = 0# And Not KDT.SelfMatch Then
                GoTo Cont_1
            End If
            
            '
            ' We CAN'T process point if R-criterion isn't satisfied,
            ' i.e. (RNeeded<>0) AND (PtDist>R).
            '
            If KDT.RNeeded = 0# Or PtDist <= KDT.RNeeded Then
                
                '
                ' R-criterion is satisfied, we must either:
                ' * replace worst point, if (KNeeded<>0) AND (KCur=KNeeded)
                '   (or skip, if worst point is better)
                ' * add point without replacement otherwise
                '
                If KDT.KCur < KDT.KNeeded Or KDT.KNeeded = 0# Then
                    
                    '
                    ' add current point to heap without replacement
                    '
                    Call TagHeapPushI(KDT.R, KDT.Idx, KDT.KCur, PtDist, i)
                Else
                    
                    '
                    ' New points are added or not, depending on their distance.
                    ' If added, they replace element at the top of the heap
                    '
                    If PtDist < KDT.R(0#) Then
                        If KDT.KNeeded = 1# Then
                            KDT.Idx(0#) = i
                            KDT.R(0#) = PtDist
                        Else
                            Call TagHeapReplaceTopI(KDT.R, KDT.Idx, KDT.KNeeded, PtDist, i)
                        End If
                    End If
                End If
            End If
Cont_1:
        Next i
        Exit Sub
    End If
    
    '
    ' Simple split
    '
    If KDT.Nodes(Offs) = 0# Then
        
        '
        ' Load:
        ' * D  dimension to split
        ' * S  split position
        '
        D = KDT.Nodes(Offs + 1#)
        S = KDT.Splits(KDT.Nodes(Offs + 2#))
        
        '
        ' Calculate:
        ' * ChildBestOffs      child box with best chances
        ' * ChildWorstOffs     child box with worst chances
        '
        If KDT.X(D) <= S Then
            ChildBestOffs = KDT.Nodes(Offs + 3#)
            ChildWorstOffs = KDT.Nodes(Offs + 4#)
            BestIsLeft = True
        Else
            ChildBestOffs = KDT.Nodes(Offs + 4#)
            ChildWorstOffs = KDT.Nodes(Offs + 3#)
            BestIsLeft = False
        End If
        
        '
        ' Navigate through childs
        '
        For i = 0# To 1# Step 1
            
            '
            ' Select child to process:
            ' * ChildOffs      current child offset in Nodes[]
            ' * UpdateMin      whether minimum or maximum value
            '                  of bounding box is changed on update
            '
            If i = 0# Then
                ChildOffs = ChildBestOffs
                UpdateMin = Not BestIsLeft
            Else
                UpdateMin = BestIsLeft
                ChildOffs = ChildWorstOffs
            End If
            
            '
            ' Update bounding box and current distance
            '
            If UpdateMin Then
                PrevDist = KDT.CurDist
                T1 = KDT.X(D)
                V = KDT.CurBoxMin(D)
                If T1 <= S Then
                    If KDT.NormType = 0# Then
                        KDT.CurDist = MaxReal(KDT.CurDist, S - T1)
                    End If
                    If KDT.NormType = 1# Then
                        KDT.CurDist = KDT.CurDist - MaxReal(V - T1, 0#) + S - T1
                    End If
                    If KDT.NormType = 2# Then
                        KDT.CurDist = KDT.CurDist - Square(MaxReal(V - T1, 0#)) + Square(S - T1)
                    End If
                End If
                KDT.CurBoxMin(D) = S
            Else
                PrevDist = KDT.CurDist
                T1 = KDT.X(D)
                V = KDT.CurBoxMax(D)
                If T1 >= S Then
                    If KDT.NormType = 0# Then
                        KDT.CurDist = MaxReal(KDT.CurDist, T1 - S)
                    End If
                    If KDT.NormType = 1# Then
                        KDT.CurDist = KDT.CurDist - MaxReal(T1 - V, 0#) + T1 - S
                    End If
                    If KDT.NormType = 2# Then
                        KDT.CurDist = KDT.CurDist - Square(MaxReal(T1 - V, 0#)) + Square(T1 - S)
                    End If
                End If
                KDT.CurBoxMax(D) = S
            End If
            
            '
            ' Decide: to dive into cell or not to dive
            '
            If KDT.RNeeded <> 0# And KDT.CurDist > KDT.RNeeded Then
                ToDive = False
            Else
                If KDT.KCur < KDT.KNeeded Or KDT.KNeeded = 0# Then
                    
                    '
                    ' KCur<KNeeded (i.e. not all points are found)
                    '
                    ToDive = True
                Else
                    
                    '
                    ' KCur=KNeeded, decide to dive or not to dive
                    ' using point position relative to bounding box.
                    '
                    ToDive = KDT.CurDist <= KDT.R(0#) * KDT.ApproxF
                End If
            End If
            If ToDive Then
                Call KDTreeQueryNNRec(KDT, ChildOffs)
            End If
            
            '
            ' Restore bounding box and distance
            '
            If UpdateMin Then
                KDT.CurBoxMin(D) = V
            Else
                KDT.CurBoxMax(D) = V
            End If
            KDT.CurDist = PrevDist
        Next i
        Exit Sub
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copies X[] to KDT.X[]
'Loads distance from X[] to bounding box.
'Initializes CurBox[].
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub KDTreeInitBox(ByRef KDT As KDTree, ByRef X() As Double)
    Dim i As Long
    Dim VX As Double
    Dim VMin As Double
    Dim VMax As Double
    
    '
    ' calculate distance from point to current bounding box
    '
    KDT.CurDist = 0#
    If KDT.NormType = 0# Then
        For i = 0# To KDT.NX - 1# Step 1
            VX = X(i)
            VMin = KDT.BoxMin(i)
            VMax = KDT.BoxMax(i)
            KDT.X(i) = VX
            KDT.CurBoxMin(i) = VMin
            KDT.CurBoxMax(i) = VMax
            If VX < VMin Then
                KDT.CurDist = MaxReal(KDT.CurDist, VMin - VX)
            Else
                If VX > VMax Then
                    KDT.CurDist = MaxReal(KDT.CurDist, VX - VMax)
                End If
            End If
        Next i
    End If
    If KDT.NormType = 1# Then
        For i = 0# To KDT.NX - 1# Step 1
            VX = X(i)
            VMin = KDT.BoxMin(i)
            VMax = KDT.BoxMax(i)
            KDT.X(i) = VX
            KDT.CurBoxMin(i) = VMin
            KDT.CurBoxMax(i) = VMax
            If VX < VMin Then
                KDT.CurDist = KDT.CurDist + VMin - VX
            Else
                If VX > VMax Then
                    KDT.CurDist = KDT.CurDist + VX - VMax
                End If
            End If
        Next i
    End If
    If KDT.NormType = 2# Then
        For i = 0# To KDT.NX - 1# Step 1
            VX = X(i)
            VMin = KDT.BoxMin(i)
            VMax = KDT.BoxMax(i)
            KDT.X(i) = VX
            KDT.CurBoxMin(i) = VMin
            KDT.CurBoxMax(i) = VMax
            If VX < VMin Then
                KDT.CurDist = KDT.CurDist + Square(VMin - VX)
            Else
                If VX > VMax Then
                    KDT.CurDist = KDT.CurDist + Square(VX - VMax)
                End If
            End If
        Next i
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Returns norm_k(x)^k (root-free = faster, but preserves ordering)
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function VRootFreeNorm(ByRef X() As Double, _
         ByVal N As Long, _
         ByVal NormType As Long) As Double
    Dim Result As Double
    Dim i As Long
    Result = 0#
    If NormType = 0# Then
        Result = 0#
        For i = 0# To N - 1# Step 1
            Result = MaxReal(Result, Abs(X(i)))
        Next i
        VRootFreeNorm = Result
        Exit Function
    End If
    If NormType = 1# Then
        Result = 0#
        For i = 0# To N - 1# Step 1
            Result = Result + Abs(X(i))
        Next i
        VRootFreeNorm = Result
        Exit Function
    End If
    If NormType = 2# Then
        Result = 0#
        For i = 0# To N - 1# Step 1
            Result = Result + Square(X(i))
        Next i
        VRootFreeNorm = Result
        Exit Function
    End If
    VRootFreeNorm = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Returns norm_k(x)^k (root-free = faster, but preserves ordering)
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function VRootFreeComponentNorm(ByVal X As Double, _
         ByVal NormType As Long) As Double
    Dim Result As Double
    Result = 0#
    If NormType = 0# Then
        Result = Abs(X)
    End If
    If NormType = 1# Then
        Result = Abs(X)
    End If
    If NormType = 2# Then
        Result = Square(X)
    End If
    VRootFreeComponentNorm = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Returns range distance: distance from X to [A,B]
'
'  -- ALGLIB --
'     Copyright 28.02.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function VRangeDist(ByVal X As Double, _
         ByVal A As Double, _
         ByVal B As Double) As Double
    Dim Result As Double
    If X < A Then
        Result = A - X
    Else
        If X > B Then
            Result = X - B
        Else
            Result = 0#
        End If
    End If
    VRangeDist = Result
End Function
