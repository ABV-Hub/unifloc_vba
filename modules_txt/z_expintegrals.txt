''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Cephes Math Library Release 2.8:  June, 2000
'Copyright by Stephen L. Moshier
'
'Contributors:
'    * Sergey Bochkanov (ALGLIB project). Translation from C to
'      pseudocode.
'
'See subroutines comments for additional copyrights.
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Exponential integral Ei(x)
'
'              x
'               -     t
'              | |   e
'   Ei(x) =   -|-   ---  dt .
'            | |     t
'             -
'            -inf
'
'Not defined for x <= 0.
'See also expn.c.
'
'
'
'ACCURACY:
'
'                     Relative error:
'arithmetic   domain     # trials      peak         rms
'   IEEE       0,100       50000      8.6e-16     1.3e-16
'
'Cephes Math Library Release 2.8:  May, 1999
'Copyright 1999 by Stephen L. Moshier
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function ExponentialIntegralEI(ByVal X As Double) As Double
    Dim Result As Double
    Dim EUL As Double
    Dim F As Double
    Dim F1 As Double
    Dim F2 As Double
    Dim w As Double
    EUL = 0.577215664901533
    If X <= 0# Then
        Result = 0#
        ExponentialIntegralEI = Result
        Exit Function
    End If
    If X < 2# Then
        F1 = -5.35044735781254
        F1 = F1 * X + 218.504916881661
        F1 = F1 * X - 4176.57238482669
        F1 = F1 * X + 55411.7675639356
        F1 = F1 * X - 331338.133117814
        F1 = F1 * X + 1592627.16338495
        F2 = 1#
        F2 = F2 * X - 52.5054795911286
        F2 = F2 * X + 1259.61618678679
        F2 = F2 * X - 17565.4958197353
        F2 = F2 * X + 149306.211700273
        F2 = F2 * X - 729494.923964053
        F2 = F2 * X + 1592627.16338495
        F = F1 / F2
        Result = EUL + Log(X) + X * F
        ExponentialIntegralEI = Result
        Exit Function
    End If
    If X < 4# Then
        w = 1# / X
        F1 = 1.98180850325969E-02
        F1 = F1 * w - 1.27164562598492
        F1 = F1 * w - 2.08816033568123
        F1 = F1 * w + 2.75554450918794
        F1 = F1 * w - 0.44095070487016
        F1 = F1 * w + 4.66562380593589E-02
        F1 = F1 * w - 1.54504267967349E-03
        F1 = F1 * w + 7.05998060529962E-05
        F2 = 1#
        F2 = F2 * w + 1.47649867091492
        F2 = F2 * w + 0.562917717482244
        F2 = F2 * w + 0.169901789787931
        F2 = F2 * w + 2.29164717903421E-02
        F2 = F2 * w + 4.45015043972875E-03
        F2 = F2 * w + 1.72743961220652E-04
        F2 = F2 * w + 3.95316719554967E-05
        F = F1 / F2
        Result = Exp(X) * w * (1# + w * F)
        ExponentialIntegralEI = Result
        Exit Function
    End If
    If X < 8# Then
        w = 1# / X
        F1 = -1.37321537587121
        F1 = F1 * w - 0.708455913374084
        F1 = F1 * w + 1.58080685554794
        F1 = F1 * w - 0.260150042742562
        F1 = F1 * w + 2.99467469411371E-02
        F1 = F1 * w - 1.03808604018874E-03
        F1 = F1 * w + 4.37106442075301E-05
        F1 = F1 * w + 2.1417836795226E-06
        F2 = 1#
        F2 = F2 * w + 0.858523142362203
        F2 = F2 * w + 0.4483285822874
        F2 = F2 * w + 7.68793215812448E-02
        F2 = F2 * w + 2.44986824102189E-02
        F2 = F2 * w + 8.8321659419278E-04
        F2 = F2 * w + 4.59095229951135E-04
        F2 = F2 * w + -4.72984835186652E-06
        F2 = F2 * w + 2.66519553739071E-06
        F = F1 / F2
        Result = Exp(X) * w * (1# + w * F)
        ExponentialIntegralEI = Result
        Exit Function
    End If
    If X < 16# Then
        w = 1# / X
        F1 = -2.10693460169192
        F1 = F1 * w + 1.73273386966469
        F1 = F1 * w - 0.242361917893584
        F1 = F1 * w + 2.32272418093757E-02
        F1 = F1 * w + 2.37288044049318E-04
        F1 = F1 * w - 8.34321956119255E-05
        F1 = F1 * w + 1.36340879560525E-05
        F1 = F1 * w - 3.65541232199925E-07
        F1 = F1 * w + 1.46494173397596E-08
        F1 = F1 * w + 6.17640786371036E-10
        F2 = 1#
        F2 = F2 * w - 0.229806223990168
        F2 = F2 * w + 0.110507704147404
        F2 = F2 * w - 1.56654296663079E-02
        F2 = F2 * w + 2.76110685081735E-03
        F2 = F2 * w - 2.08914801228405E-04
        F2 = F2 * w + 1.70852893880768E-05
        F2 = F2 * w - 4.45931179635669E-07
        F2 = F2 * w + 1.39463493035385E-08
        F2 = F2 * w + 6.15086593397734E-10
        F = F1 / F2
        Result = Exp(X) * w * (1# + w * F)
        ExponentialIntegralEI = Result
        Exit Function
    End If
    If X < 32# Then
        w = 1# / X
        F1 = -0.245811936767402
        F1 = F1 * w - 0.148338225332208
        F1 = F1 * w + 7.24829179573555E-02
        F1 = F1 * w - 1.34831568738094E-02
        F1 = F1 * w + 1.34277506978864E-03
        F1 = F1 * w - 7.94246563715971E-05
        F1 = F1 * w + 2.64417951898424E-06
        F1 = F1 * w - 4.23947365931377E-08
        F2 = 1#
        F2 = F2 * w - 0.104422590844387
        F2 = F2 * w - 0.26764531281014
        F2 = F2 * w + 9.69500025462198E-02
        F2 = F2 * w - 1.60174569271299E-02
        F2 = F2 * w + 1.49641489920591E-03
        F2 = F2 * w - 8.46245256377849E-05
        F2 = F2 * w + 2.72893840347673E-06
        F2 = F2 * w - 4.23946243181954E-08
        F = F1 / F2
        Result = Exp(X) * w * (1# + w * F)
        ExponentialIntegralEI = Result
        Exit Function
    End If
    If X < 64# Then
        w = 1# / X
        F1 = 0.121256111810546
        F1 = F1 * w - 0.582313317904389
        F1 = F1 * w + 0.234888731455702
        F1 = F1 * w - 3.04003431811325E-02
        F1 = F1 * w + 1.51008214686519E-03
        F1 = F1 * w - 2.52313709549957E-05
        F2 = 1#
        F2 = F2 * w - 1.00225215036585
        F2 = F2 * w + 0.292870969487222
        F2 = F2 * w - 3.33700433867401E-02
        F2 = F2 * w + 1.56054488112739E-03
        F2 = F2 * w - 2.52313709360323E-05
        F = F1 / F2
        Result = Exp(X) * w * (1# + w * F)
        ExponentialIntegralEI = Result
        Exit Function
    End If
    w = 1# / X
    F1 = -0.765784707828613
    F1 = F1 * w + 0.688619241556671
    F1 = F1 * w - 0.213259811354521
    F1 = F1 * w + 3.34610755238419E-02
    F1 = F1 * w - 3.07654147734476E-03
    F1 = F1 * w + 1.74711931645491E-04
    F1 = F1 * w - 6.10371168227417E-06
    F1 = F1 * w + 1.21803276542865E-07
    F1 = F1 * w - 1.08607610279329E-09
    F2 = 1#
    F2 = F2 * w - 1.88880286866231
    F2 = F2 * w + 1.06669168721141
    F2 = F2 * w - 0.275191598230638
    F2 = F2 * w + 3.93085268823382E-02
    F2 = F2 * w - 3.41468455860237E-03
    F2 = F2 * w + 1.86684437070356E-04
    F2 = F2 * w - 6.34514608313052E-06
    F2 = F2 * w + 1.23975428748321E-07
    F2 = F2 * w - 1.08607610279313E-09
    F = F1 / F2
    Result = Exp(X) * w * (1# + w * F)
    ExponentialIntegralEI = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Exponential integral En(x)
'
'Evaluates the exponential integral
'
'                inf.
'                  -
'                 | |   -xt
'                 |    e
'     E (x)  =    |    ----  dt.
'      n          |      n
'               | |     t
'                -
'                 1
'
'
'Both n and x must be nonnegative.
'
'The routine employs either a power series, a continued
'fraction, or an asymptotic formula depending on the
'relative values of n and x.
'
'ACCURACY:
'
'                     Relative error:
'arithmetic   domain     # trials      peak         rms
'   IEEE      0, 30       10000       1.7e-15     3.6e-16
'
'Cephes Math Library Release 2.8:  June, 2000
'Copyright 1985, 2000 by Stephen L. Moshier
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function ExponentialIntegralEN(ByVal X As Double, _
         ByVal N As Long) As Double
    Dim Result As Double
    Dim R As Double
    Dim T As Double
    Dim YK As Double
    Dim XK As Double
    Dim pk As Double
    Dim pkm1 As Double
    Dim pkm2 As Double
    Dim qk As Double
    Dim qkm1 As Double
    Dim qkm2 As Double
    Dim Psi As Double
    Dim z As Double
    Dim i As Long
    Dim K As Long
    Dim big As Double
    Dim EUL As Double
    EUL = 0.577215664901533
    big = 1.44115188075856 * Power(10#, 17#)
    If N < 0# Or X < 0# Or X > 170# Or X = 0# And N < 2# Then
        Result = -1#
        ExponentialIntegralEN = Result
        Exit Function
    End If
    If X = 0# Then
        Result = 1# / (N - 1#)
        ExponentialIntegralEN = Result
        Exit Function
    End If
    If N = 0# Then
        Result = Exp(-X) / X
        ExponentialIntegralEN = Result
        Exit Function
    End If
    If N > 5000# Then
        XK = X + N
        YK = 1# / (XK * XK)
        T = N
        Result = YK * T * (6# * X * X - 8# * T * X + T * T)
        Result = YK * (Result + T * (T - 2# * X))
        Result = YK * (Result + T)
        Result = (Result + 1#) * Exp(-X) / XK
        ExponentialIntegralEN = Result
        Exit Function
    End If
    If X <= 1# Then
        Psi = -EUL - Log(X)
        For i = 1# To N - 1# Step 1
            Psi = Psi + 1# / i
        Next i
        z = -X
        XK = 0#
        YK = 1#
        pk = 1# - N
        If N = 1# Then
            Result = 0#
        Else
            Result = 1# / pk
        End If
        Do
            XK = XK + 1#
            YK = YK * z / XK
            pk = pk + 1#
            If pk <> 0# Then
                Result = Result + YK / pk
            End If
            If Result <> 0# Then
                T = Abs(YK / Result)
            Else
                T = 1#
            End If
        Loop Until T < MachineEpsilon
        T = 1#
        For i = 1# To N - 1# Step 1
            T = T * z / i
        Next i
        Result = Psi * T - Result
        ExponentialIntegralEN = Result
        Exit Function
    Else
        K = 1#
        pkm2 = 1#
        qkm2 = X
        pkm1 = 1#
        qkm1 = X + N
        Result = pkm1 / qkm1
        Do
            K = K + 1#
            If K Mod 2# = 1# Then
                YK = 1#
                XK = N + (K - 1#) / 2#
            Else
                YK = X
                XK = K / 2#
            End If
            pk = pkm1 * YK + pkm2 * XK
            qk = qkm1 * YK + qkm2 * XK
            If qk <> 0# Then
                R = pk / qk
                T = Abs((Result - R) / R)
                Result = R
            Else
                T = 1#
            End If
            pkm2 = pkm1
            pkm1 = pk
            qkm2 = qkm1
            qkm1 = qk
            If Abs(pk) > big Then
                pkm2 = pkm2 / big
                pkm1 = pkm1 / big
                qkm2 = qkm2 / big
                qkm1 = qkm1 / big
            End If
        Loop Until T < MachineEpsilon
        Result = Result * Exp(-X)
    End If
    ExponentialIntegralEN = Result
End Function

