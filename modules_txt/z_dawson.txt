''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Cephes Math Library Release 2.8:  June, 2000
'Copyright by Stephen L. Moshier
'
'Contributors:
'    * Sergey Bochkanov (ALGLIB project). Translation from C to
'      pseudocode.
'
'See subroutines comments for additional copyrights.
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Dawson's Integral
'
'Approximates the integral
'
'                            x
'                            -
'                     2     | |        2
' dawsn(x)  =  exp( -x  )   |    exp( t  ) dt
'                         | |
'                          -
'                          0
'
'Three different rational approximations are employed, for
'the intervals 0 to 3.25; 3.25 to 6.25; and 6.25 up.
'
'ACCURACY:
'
'                     Relative error:
'arithmetic   domain     # trials      peak         rms
'   IEEE      0,10        10000       6.9e-16     1.0e-16
'
'Cephes Math Library Release 2.8:  June, 2000
'Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function DawsonIntegral(ByVal X As Double) As Double
    Dim Result As Double
    Dim X2 As Double
    Dim y As Double
    Dim sg As Long
    Dim AN As Double
    Dim AD As Double
    Dim BN As Double
    Dim BD As Double
    Dim CN As Double
    Dim CD As Double
    sg = 1#
    If X < 0# Then
        sg = -1#
        X = -X
    End If
    If X < 3.25 Then
        X2 = X * X
        AN = 1.13681498971756E-11
        AN = AN * X2 + 8.49262267667474E-10
        AN = AN * X2 + 1.94434204175553E-08
        AN = AN * X2 + 9.53151741254484E-07
        AN = AN * X2 + 3.07828309874913E-06
        AN = AN * X2 + 3.52513368520289E-04
        AN = AN * X2 + -8.50149846724411E-04
        AN = AN * X2 + 4.22618223005547E-02
        AN = AN * X2 + -9.17480371773452E-02
        AN = AN * X2 + 1#
        AD = 2.40372073066763E-11
        AD = AD * X2 + 1.48864681368493E-09
        AD = AD * X2 + 5.21265281010542E-08
        AD = AD * X2 + 1.27258478273187E-06
        AD = AD * X2 + 2.3249024982079E-05
        AD = AD * X2 + 3.25524741826058E-04
        AD = AD * X2 + 3.48805814657163E-03
        AD = AD * X2 + 2.79448531198829E-02
        AD = AD * X2 + 0.158874241960121
        AD = AD * X2 + 0.57491862948932
        AD = AD * X2 + 1#
        y = X * AN / AD
        Result = sg * y
        DawsonIntegral = Result
        Exit Function
    End If
    X2 = 1# / (X * X)
    If X < 6.25 Then
        BN = 0.508955156417901
        BN = BN * X2 - 0.244754418142698
        BN = BN * X2 + 9.41512335303534E-02
        BN = BN * X2 - 2.18711255142039E-02
        BN = BN * X2 + 3.66207612329569E-03
        BN = BN * X2 - 4.23209114460389E-04
        BN = BN * X2 + 3.59641304793897E-05
        BN = BN * X2 - 2.14640351719969E-06
        BN = BN * X2 + 9.10010780076391E-08
        BN = BN * X2 - 2.40274520828251E-09
        BN = BN * X2 + 3.59233385440928E-11
        BD = 1#
        BD = BD * X2 - 0.631839869873368
        BD = BD * X2 + 0.236706788228249
        BD = BD * X2 - 5.31806367003223E-02
        BD = BD * X2 + 8.48041718586295E-03
        BD = BD * X2 - 9.47996768486665E-04
        BD = BD * X2 + 7.81025592944552E-05
        BD = BD * X2 - 4.55875153252443E-06
        BD = BD * X2 + 1.89100358111422E-07
        BD = BD * X2 - 4.91324691331921E-09
        BD = BD * X2 + 7.18466403235735E-11
        y = 1# / X + X2 * BN / (BD * X)
        Result = sg * 0.5 * y
        DawsonIntegral = Result
        Exit Function
    End If
    If X > 1000000000# Then
        Result = sg * 0.5 / X
        DawsonIntegral = Result
        Exit Function
    End If
    CN = -0.590592860534773
    CN = CN * X2 + 0.629235242724369
    CN = CN * X2 - 0.172858975380388
    CN = CN * X2 + 0.016483704782519
    CN = CN * X2 - 4.86827613020463E-04
    CD = 1#
    CD = CD * X2 - 2.69820057197545
    CD = CD * X2 + 1.73270799045948
    CD = CD * X2 - 0.39370858228194
    CD = CD * X2 + 3.44278924041233E-02
    CD = CD * X2 - 9.73655226040941E-04
    y = 1# / X + X2 * CN / (CD * X)
    Result = sg * 0.5 * y
    DawsonIntegral = Result
End Function

