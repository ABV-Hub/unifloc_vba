''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2005-2007, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Inverse matrix update by the Sherman-Morrison formula
'
'The algorithm updates matrix A^-1 when adding a number to an element
'of matrix A.
'
'Input parameters:
'    InvA    -   inverse of matrix A.
'                Array whose indexes range within [0..N-1, 0..N-1].
'    N       -   size of matrix A.
'    UpdRow  -   row where the element to be updated is stored.
'    UpdColumn - column where the element to be updated is stored.
'    UpdVal  -   a number to be added to the element.
'
'
'Output parameters:
'    InvA    -   inverse of modified matrix A.
'
'  -- ALGLIB --
'     Copyright 2005 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub RMatrixInvUpdateSimple(ByRef InvA() As Double, _
         ByVal N As Long, _
         ByVal UpdRow As Long, _
         ByVal UpdColumn As Long, _
         ByVal UpdVal As Double)
    Dim T1() As Double
    Dim T2() As Double
    Dim i As Long
    Dim Lambda As Double
    Dim VT As Double
    Dim i_ As Long
    ReDim T1(0# To N - 1#)
    ReDim T2(0# To N - 1#)
    
    '
    ' T1 = InvA * U
    '
    For i_ = 0# To N - 1# Step 1
        T1(i_) = InvA(i_, UpdRow)
    Next i_
    
    '
    ' T2 = v*InvA
    '
    For i_ = 0# To N - 1# Step 1
        T2(i_) = InvA(UpdColumn, i_)
    Next i_
    
    '
    ' Lambda = v * InvA * U
    '
    Lambda = UpdVal * InvA(UpdColumn, UpdRow)
    
    '
    ' InvA = InvA - correction
    '
    For i = 0# To N - 1# Step 1
        VT = UpdVal * T1(i)
        VT = VT / (1# + Lambda)
        For i_ = 0# To N - 1# Step 1
            InvA(i, i_) = InvA(i, i_) - VT * T2(i_)
        Next i_
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Inverse matrix update by the Sherman-Morrison formula
'
'The algorithm updates matrix A^-1 when adding a vector to a row
'of matrix A.
'
'Input parameters:
'    InvA    -   inverse of matrix A.
'                Array whose indexes range within [0..N-1, 0..N-1].
'    N       -   size of matrix A.
'    UpdRow  -   the row of A whose vector V was added.
'                0 <= Row <= N-1
'    V       -   the vector to be added to a row.
'                Array whose index ranges within [0..N-1].
'
'Output parameters:
'    InvA    -   inverse of modified matrix A.
'
'  -- ALGLIB --
'     Copyright 2005 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub RMatrixInvUpdateRow(ByRef InvA() As Double, _
         ByVal N As Long, _
         ByVal UpdRow As Long, _
         ByRef V() As Double)
    Dim T1() As Double
    Dim T2() As Double
    Dim i As Long
    Dim j As Long
    Dim Lambda As Double
    Dim VT As Double
    Dim i_ As Long
    ReDim T1(0# To N - 1#)
    ReDim T2(0# To N - 1#)
    
    '
    ' T1 = InvA * U
    '
    For i_ = 0# To N - 1# Step 1
        T1(i_) = InvA(i_, UpdRow)
    Next i_
    
    '
    ' T2 = v*InvA
    ' Lambda = v * InvA * U
    '
    For j = 0# To N - 1# Step 1
        VT = 0#
        For i_ = 0# To N - 1# Step 1
            VT = VT + V(i_) * InvA(i_, j)
        Next i_
        T2(j) = VT
    Next j
    Lambda = T2(UpdRow)
    
    '
    ' InvA = InvA - correction
    '
    For i = 0# To N - 1# Step 1
        VT = T1(i) / (1# + Lambda)
        For i_ = 0# To N - 1# Step 1
            InvA(i, i_) = InvA(i, i_) - VT * T2(i_)
        Next i_
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Inverse matrix update by the Sherman-Morrison formula
'
'The algorithm updates matrix A^-1 when adding a vector to a column
'of matrix A.
'
'Input parameters:
'    InvA        -   inverse of matrix A.
'                    Array whose indexes range within [0..N-1, 0..N-1].
'    N           -   size of matrix A.
'    UpdColumn   -   the column of A whose vector U was added.
'                    0 <= UpdColumn <= N-1
'    U           -   the vector to be added to a column.
'                    Array whose index ranges within [0..N-1].
'
'Output parameters:
'    InvA        -   inverse of modified matrix A.
'
'  -- ALGLIB --
'     Copyright 2005 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub RMatrixInvUpdateColumn(ByRef InvA() As Double, _
         ByVal N As Long, _
         ByVal UpdColumn As Long, _
         ByRef U() As Double)
    Dim T1() As Double
    Dim T2() As Double
    Dim i As Long
    Dim Lambda As Double
    Dim VT As Double
    Dim i_ As Long
    ReDim T1(0# To N - 1#)
    ReDim T2(0# To N - 1#)
    
    '
    ' T1 = InvA * U
    ' Lambda = v * InvA * U
    '
    For i = 0# To N - 1# Step 1
        VT = 0#
        For i_ = 0# To N - 1# Step 1
            VT = VT + InvA(i, i_) * U(i_)
        Next i_
        T1(i) = VT
    Next i
    Lambda = T1(UpdColumn)
    
    '
    ' T2 = v*InvA
    '
    For i_ = 0# To N - 1# Step 1
        T2(i_) = InvA(UpdColumn, i_)
    Next i_
    
    '
    ' InvA = InvA - correction
    '
    For i = 0# To N - 1# Step 1
        VT = T1(i) / (1# + Lambda)
        For i_ = 0# To N - 1# Step 1
            InvA(i, i_) = InvA(i, i_) - VT * T2(i_)
        Next i_
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Inverse matrix update by the Sherman-Morrison formula
'
'The algorithm computes the inverse of matrix A+u*v’ by using the given matrix
'A^-1 and the vectors u and v.
'
'Input parameters:
'    InvA    -   inverse of matrix A.
'                Array whose indexes range within [0..N-1, 0..N-1].
'    N       -   size of matrix A.
'    U       -   the vector modifying the matrix.
'                Array whose index ranges within [0..N-1].
'    V       -   the vector modifying the matrix.
'                Array whose index ranges within [0..N-1].
'
'Output parameters:
'    InvA - inverse of matrix A + u*v'.
'
'  -- ALGLIB --
'     Copyright 2005 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub RMatrixInvUpdateUV(ByRef InvA() As Double, _
         ByVal N As Long, _
         ByRef U() As Double, _
         ByRef V() As Double)
    Dim T1() As Double
    Dim T2() As Double
    Dim i As Long
    Dim j As Long
    Dim Lambda As Double
    Dim VT As Double
    Dim i_ As Long
    ReDim T1(0# To N - 1#)
    ReDim T2(0# To N - 1#)
    
    '
    ' T1 = InvA * U
    ' Lambda = v * T1
    '
    For i = 0# To N - 1# Step 1
        VT = 0#
        For i_ = 0# To N - 1# Step 1
            VT = VT + InvA(i, i_) * U(i_)
        Next i_
        T1(i) = VT
    Next i
    Lambda = 0#
    For i_ = 0# To N - 1# Step 1
        Lambda = Lambda + V(i_) * T1(i_)
    Next i_
    
    '
    ' T2 = v*InvA
    '
    For j = 0# To N - 1# Step 1
        VT = 0#
        For i_ = 0# To N - 1# Step 1
            VT = VT + V(i_) * InvA(i_, j)
        Next i_
        T2(j) = VT
    Next j
    
    '
    ' InvA = InvA - correction
    '
    For i = 0# To N - 1# Step 1
        VT = T1(i) / (1# + Lambda)
        For i_ = 0# To N - 1# Step 1
            InvA(i, i_) = InvA(i, i_) - VT * T2(i_)
        Next i_
    Next i
End Sub
Public Sub ShermanMorrisonSimpleUpdate(ByRef InvA() As Double, _
         ByVal N As Long, _
         ByVal UpdRow As Long, _
         ByVal UpdColumn As Long, _
         ByVal UpdVal As Double)
    Dim T1() As Double
    Dim T2() As Double
    Dim i As Long
    Dim Lambda As Double
    Dim VT As Double
    Dim i_ As Long
    ReDim T1(1# To N)
    ReDim T2(1# To N)
    
    '
    ' T1 = InvA * U
    '
    For i_ = 1# To N Step 1
        T1(i_) = InvA(i_, UpdRow)
    Next i_
    
    '
    ' T2 = v*InvA
    '
    For i_ = 1# To N Step 1
        T2(i_) = InvA(UpdColumn, i_)
    Next i_
    
    '
    ' Lambda = v * InvA * U
    '
    Lambda = UpdVal * InvA(UpdColumn, UpdRow)
    
    '
    ' InvA = InvA - correction
    '
    For i = 1# To N Step 1
        VT = UpdVal * T1(i)
        VT = VT / (1# + Lambda)
        For i_ = 1# To N Step 1
            InvA(i, i_) = InvA(i, i_) - VT * T2(i_)
        Next i_
    Next i
End Sub
Public Sub ShermanMorrisonUpdateRow(ByRef InvA() As Double, _
         ByVal N As Long, _
         ByVal UpdRow As Long, _
         ByRef V() As Double)
    Dim T1() As Double
    Dim T2() As Double
    Dim i As Long
    Dim j As Long
    Dim Lambda As Double
    Dim VT As Double
    Dim i_ As Long
    ReDim T1(1# To N)
    ReDim T2(1# To N)
    
    '
    ' T1 = InvA * U
    '
    For i_ = 1# To N Step 1
        T1(i_) = InvA(i_, UpdRow)
    Next i_
    
    '
    ' T2 = v*InvA
    ' Lambda = v * InvA * U
    '
    For j = 1# To N Step 1
        VT = 0#
        For i_ = 1# To N Step 1
            VT = VT + V(i_) * InvA(i_, j)
        Next i_
        T2(j) = VT
    Next j
    Lambda = T2(UpdRow)
    
    '
    ' InvA = InvA - correction
    '
    For i = 1# To N Step 1
        VT = T1(i) / (1# + Lambda)
        For i_ = 1# To N Step 1
            InvA(i, i_) = InvA(i, i_) - VT * T2(i_)
        Next i_
    Next i
End Sub
Public Sub ShermanMorrisonUpdateColumn(ByRef InvA() As Double, _
         ByVal N As Long, _
         ByVal UpdColumn As Long, _
         ByRef U() As Double)
    Dim T1() As Double
    Dim T2() As Double
    Dim i As Long
    Dim Lambda As Double
    Dim VT As Double
    Dim i_ As Long
    ReDim T1(1# To N)
    ReDim T2(1# To N)
    
    '
    ' T1 = InvA * U
    ' Lambda = v * InvA * U
    '
    For i = 1# To N Step 1
        VT = 0#
        For i_ = 1# To N Step 1
            VT = VT + InvA(i, i_) * U(i_)
        Next i_
        T1(i) = VT
    Next i
    Lambda = T1(UpdColumn)
    
    '
    ' T2 = v*InvA
    '
    For i_ = 1# To N Step 1
        T2(i_) = InvA(UpdColumn, i_)
    Next i_
    
    '
    ' InvA = InvA - correction
    '
    For i = 1# To N Step 1
        VT = T1(i) / (1# + Lambda)
        For i_ = 1# To N Step 1
            InvA(i, i_) = InvA(i, i_) - VT * T2(i_)
        Next i_
    Next i
End Sub
Public Sub ShermanMorrisonUpdateUV(ByRef InvA() As Double, _
         ByVal N As Long, _
         ByRef U() As Double, _
         ByRef V() As Double)
    Dim T1() As Double
    Dim T2() As Double
    Dim i As Long
    Dim j As Long
    Dim Lambda As Double
    Dim VT As Double
    Dim i_ As Long
    ReDim T1(1# To N)
    ReDim T2(1# To N)
    
    '
    ' T1 = InvA * U
    ' Lambda = v * T1
    '
    For i = 1# To N Step 1
        VT = 0#
        For i_ = 1# To N Step 1
            VT = VT + InvA(i, i_) * U(i_)
        Next i_
        T1(i) = VT
    Next i
    Lambda = 0#
    For i_ = 1# To N Step 1
        Lambda = Lambda + V(i_) * T1(i_)
    Next i_
    
    '
    ' T2 = v*InvA
    '
    For j = 1# To N Step 1
        VT = 0#
        For i_ = 1# To N Step 1
            VT = VT + V(i_) * InvA(i_, j)
        Next i_
        T2(j) = VT
    Next j
    
    '
    ' InvA = InvA - correction
    '
    For i = 1# To N Step 1
        VT = T1(i) / (1# + Lambda)
        For i_ = 1# To N Step 1
            InvA(i, i_) = InvA(i, i_) - VT * T2(i_)
        Next i_
    Next i
End Sub

