''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Cephes Math Library Release 2.8:  June, 2000
'Copyright by Stephen L. Moshier
'
'Contributors:
'    * Sergey Bochkanov (ALGLIB project). Translation from C to
'      pseudocode.
'
'See subroutines comments for additional copyrights.
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Psi (digamma) function
'
'             d      -
'  psi(x)  =  -- ln | (x)
'             dx
'
'is the logarithmic derivative of the gamma function.
'For integer x,
'                  n-1
'                   -
'psi(n) = -EUL  +   >  1/k.
'                   -
'                  k=1
'
'This formula is used for 0 < n <= 10.  If x is negative, it
'is transformed to a positive argument by the reflection
'formula  psi(1-x) = psi(x) + pi cot(pi x).
'For general positive x, the argument is made greater than 10
'using the recurrence  psi(x+1) = psi(x) + 1/x.
'Then the following asymptotic expansion is applied:
'
'                          inf.   B
'                           -      2k
'psi(x) = log(x) - 1/2x -   >   -------
'                           -        2k
'                          k=1   2k x
'
'where the B2k are Bernoulli numbers.
'
'ACCURACY:
'   Relative error (except absolute when |psi| < 1):
'arithmetic   domain     # trials      peak         rms
'   IEEE      0,30        30000       1.3e-15     1.4e-16
'   IEEE      -30,0       40000       1.5e-15     2.2e-16
'
'Cephes Math Library Release 2.8:  June, 2000
'Copyright 1984, 1987, 1992, 2000 by Stephen L. Moshier
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function Psi(ByVal X As Double) As Double
    Dim Result As Double
    Dim P As Double
    Dim q As Double
    Dim nz As Double
    Dim S As Double
    Dim W As Double
    Dim Y As Double
    Dim z As Double
    Dim polv As Double
    Dim i As Long
    Dim N As Long
    Dim negative As Long
    negative = 0#
    nz = 0#
    If X <= 0# Then
        negative = 1#
        q = X
        P = Int(q)
        If P = q Then
            Result = MaxRealNumber
            Psi = Result
            Exit Function
        End If
        nz = q - P
        If nz <> 0.5 Then
            If nz > 0.5 Then
                P = P + 1#
                nz = q - P
            End If
            nz = Pi() / Tan(Pi() * nz)
        Else
            nz = 0#
        End If
        X = 1# - X
    End If
    If X <= 10# And X = Int(X) Then
        Y = 0#
        N = Int(X)
        For i = 1# To N - 1# Step 1
            W = i
            Y = Y + 1# / W
        Next i
        Y = Y - 0.577215664901533
    Else
        S = X
        W = 0#
        Do While S < 10#
            W = W + 1# / S
            S = S + 1#
        Loop
        If S < 1E+17 Then
            z = 1# / (S * S)
            polv = 8.33333333333333E-02
            polv = polv * z - 2.10927960927961E-02
            polv = polv * z + 7.57575757575758E-03
            polv = polv * z - 4.16666666666667E-03
            polv = polv * z + 3.96825396825397E-03
            polv = polv * z - 8.33333333333333E-03
            polv = polv * z + 8.33333333333333E-02
            Y = z * polv
        Else
            Y = 0#
        End If
        Y = Log(S) - 0.5 / S - Y - W
    End If
    If negative <> 0# Then
        Y = Y - nz
    End If
    Result = Y
    Psi = Result
End Function
