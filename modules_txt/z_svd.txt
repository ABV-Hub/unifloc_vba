''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2005-2007, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Singular value decomposition of a rectangular matrix.
'
'The algorithm calculates the singular value decomposition of a matrix of
'size MxN: A = U * S * V^T
'
'The algorithm finds the singular values and, optionally, matrices U and V^T.
'The algorithm can find both first min(M,N) columns of matrix U and rows of
'matrix V^T (singular vectors), and matrices U and V^T wholly (of sizes MxM
'and NxN respectively).
'
'Take into account that the subroutine does not return matrix V but V^T.
'
'Input parameters:
'    A           -   matrix to be decomposed.
'                    Array whose indexes range within [0..M-1, 0..N-1].
'    M           -   number of rows in matrix A.
'    N           -   number of columns in matrix A.
'    UNeeded     -   0, 1 or 2. See the description of the parameter U.
'    VTNeeded    -   0, 1 or 2. See the description of the parameter VT.
'    AdditionalMemory -
'                    If the parameter:
'                     * equals 0, the algorithm doesn’t use additional
'                       memory (lower requirements, lower performance).
'                     * equals 1, the algorithm uses additional
'                       memory of size min(M,N)*min(M,N) of real numbers.
'                       It often speeds up the algorithm.
'                     * equals 2, the algorithm uses additional
'                       memory of size M*min(M,N) of real numbers.
'                       It allows to get a maximum performance.
'                    The recommended value of the parameter is 2.
'
'Output parameters:
'    W           -   contains singular values in descending order.
'    U           -   if UNeeded=0, U isn't changed, the left singular vectors
'                    are not calculated.
'                    if Uneeded=1, U contains left singular vectors (first
'                    min(M,N) columns of matrix U). Array whose indexes range
'                    within [0..M-1, 0..Min(M,N)-1].
'                    if UNeeded=2, U contains matrix U wholly. Array whose
'                    indexes range within [0..M-1, 0..M-1].
'    VT          -   if VTNeeded=0, VT isn’t changed, the right singular vectors
'                    are not calculated.
'                    if VTNeeded=1, VT contains right singular vectors (first
'                    min(M,N) rows of matrix V^T). Array whose indexes range
'                    within [0..min(M,N)-1, 0..N-1].
'                    if VTNeeded=2, VT contains matrix V^T wholly. Array whose
'                    indexes range within [0..N-1, 0..N-1].
'
'  -- ALGLIB --
'     Copyright 2005 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function RMatrixSVD(ByRef A_() As Double, _
         ByVal M As Long, _
         ByVal N As Long, _
         ByVal UNeeded As Long, _
         ByVal VTNeeded As Long, _
         ByVal AdditionalMemory As Long, _
         ByRef W() As Double, _
         ByRef U() As Double, _
         ByRef VT() As Double) As Boolean
    Dim Result As Boolean
    Dim A() As Double
    Dim TauQ() As Double
    Dim TauP() As Double
    Dim Tau() As Double
    Dim E() As Double
    Dim WORK() As Double
    Dim T2() As Double
    Dim IsUpper As Boolean
    Dim MinMN As Long
    Dim NCU As Long
    Dim NRVT As Long
    Dim NRU As Long
    Dim NCVT As Long
    Dim i As Long
    Dim J As Long
    A = A_
    Result = True
    If M = 0# Or N = 0# Then
        RMatrixSVD = Result
        Exit Function
    End If
    
    '
    ' initialize
    '
    MinMN = MinInt(M, N)
    ReDim W(1# To MinMN)
    NCU = 0#
    NRU = 0#
    If UNeeded = 1# Then
        NRU = M
        NCU = MinMN
        ReDim U(0# To NRU - 1#, 0# To NCU - 1#)
    End If
    If UNeeded = 2# Then
        NRU = M
        NCU = M
        ReDim U(0# To NRU - 1#, 0# To NCU - 1#)
    End If
    NRVT = 0#
    NCVT = 0#
    If VTNeeded = 1# Then
        NRVT = MinMN
        NCVT = N
        ReDim VT(0# To NRVT - 1#, 0# To NCVT - 1#)
    End If
    If VTNeeded = 2# Then
        NRVT = N
        NCVT = N
        ReDim VT(0# To NRVT - 1#, 0# To NCVT - 1#)
    End If
    
    '
    ' M much larger than N
    ' Use bidiagonal reduction with QR-decomposition
    '
    If M > 1.6 * N Then
        If UNeeded = 0# Then
            
            '
            ' No left singular vectors to be computed
            '
            Call RMatrixQR(A, M, N, Tau)
            For i = 0# To N - 1# Step 1
                For J = 0# To i - 1# Step 1
                    A(i, J) = 0#
                Next J
            Next i
            Call RMatrixBD(A, N, N, TauQ, TauP)
            Call RMatrixBDUnpackPT(A, N, N, TauP, NRVT, VT)
            Call RMatrixBDUnpackDiagonals(A, N, N, IsUpper, W, E)
            Result = RMatrixBDSVD(W, E, N, IsUpper, False, U, 0#, A, 0#, VT, NCVT)
            RMatrixSVD = Result
            Exit Function
        Else
            
            '
            ' Left singular vectors (may be full matrix U) to be computed
            '
            Call RMatrixQR(A, M, N, Tau)
            Call RMatrixQRUnpackQ(A, M, N, Tau, NCU, U)
            For i = 0# To N - 1# Step 1
                For J = 0# To i - 1# Step 1
                    A(i, J) = 0#
                Next J
            Next i
            Call RMatrixBD(A, N, N, TauQ, TauP)
            Call RMatrixBDUnpackPT(A, N, N, TauP, NRVT, VT)
            Call RMatrixBDUnpackDiagonals(A, N, N, IsUpper, W, E)
            If AdditionalMemory < 1# Then
                
                '
                ' No additional memory can be used
                '
                Call RMatrixBDMultiplyByQ(A, N, N, TauQ, U, M, N, True, False)
                Result = RMatrixBDSVD(W, E, N, IsUpper, False, U, M, A, 0#, VT, NCVT)
            Else
                
                '
                ' Large U. Transforming intermediate matrix T2
                '
                ReDim WORK(1# To MaxInt(M, N))
                Call RMatrixBDUnpackQ(A, N, N, TauQ, N, T2)
                Call CopyMatrix(U, 0#, M - 1#, 0#, N - 1#, A, 0#, M - 1#, 0#, N - 1#)
                Call InplaceTranspose(T2, 0#, N - 1#, 0#, N - 1#, WORK)
                Result = RMatrixBDSVD(W, E, N, IsUpper, False, U, 0#, T2, N, VT, NCVT)
                Call MatrixMatrixMultiply(A, 0#, M - 1#, 0#, N - 1#, False, T2, 0#, N - 1#, 0#, N - 1#, True, 1#, U, 0#, M - 1#, 0#, N - 1#, 0#, WORK)
            End If
            RMatrixSVD = Result
            Exit Function
        End If
    End If
    
    '
    ' N much larger than M
    ' Use bidiagonal reduction with LQ-decomposition
    '
    If N > 1.6 * M Then
        If VTNeeded = 0# Then
            
            '
            ' No right singular vectors to be computed
            '
            Call RMatrixLQ(A, M, N, Tau)
            For i = 0# To M - 1# Step 1
                For J = i + 1# To M - 1# Step 1
                    A(i, J) = 0#
                Next J
            Next i
            Call RMatrixBD(A, M, M, TauQ, TauP)
            Call RMatrixBDUnpackQ(A, M, M, TauQ, NCU, U)
            Call RMatrixBDUnpackDiagonals(A, M, M, IsUpper, W, E)
            ReDim WORK(1# To M)
            Call InplaceTranspose(U, 0#, NRU - 1#, 0#, NCU - 1#, WORK)
            Result = RMatrixBDSVD(W, E, M, IsUpper, False, A, 0#, U, NRU, VT, 0#)
            Call InplaceTranspose(U, 0#, NRU - 1#, 0#, NCU - 1#, WORK)
            RMatrixSVD = Result
            Exit Function
        Else
            
            '
            ' Right singular vectors (may be full matrix VT) to be computed
            '
            Call RMatrixLQ(A, M, N, Tau)
            Call RMatrixLQUnpackQ(A, M, N, Tau, NRVT, VT)
            For i = 0# To M - 1# Step 1
                For J = i + 1# To M - 1# Step 1
                    A(i, J) = 0#
                Next J
            Next i
            Call RMatrixBD(A, M, M, TauQ, TauP)
            Call RMatrixBDUnpackQ(A, M, M, TauQ, NCU, U)
            Call RMatrixBDUnpackDiagonals(A, M, M, IsUpper, W, E)
            ReDim WORK(1# To MaxInt(M, N))
            Call InplaceTranspose(U, 0#, NRU - 1#, 0#, NCU - 1#, WORK)
            If AdditionalMemory < 1# Then
                
                '
                ' No additional memory available
                '
                Call RMatrixBDMultiplyByP(A, M, M, TauP, VT, M, N, False, True)
                Result = RMatrixBDSVD(W, E, M, IsUpper, False, A, 0#, U, NRU, VT, N)
            Else
                
                '
                ' Large VT. Transforming intermediate matrix T2
                '
                Call RMatrixBDUnpackPT(A, M, M, TauP, M, T2)
                Result = RMatrixBDSVD(W, E, M, IsUpper, False, A, 0#, U, NRU, T2, M)
                Call CopyMatrix(VT, 0#, M - 1#, 0#, N - 1#, A, 0#, M - 1#, 0#, N - 1#)
                Call MatrixMatrixMultiply(T2, 0#, M - 1#, 0#, M - 1#, False, A, 0#, M - 1#, 0#, N - 1#, False, 1#, VT, 0#, M - 1#, 0#, N - 1#, 0#, WORK)
            End If
            Call InplaceTranspose(U, 0#, NRU - 1#, 0#, NCU - 1#, WORK)
            RMatrixSVD = Result
            Exit Function
        End If
    End If
    
    '
    ' M<=N
    ' We can use inplace transposition of U to get rid of columnwise operations
    '
    If M <= N Then
        Call RMatrixBD(A, M, N, TauQ, TauP)
        Call RMatrixBDUnpackQ(A, M, N, TauQ, NCU, U)
        Call RMatrixBDUnpackPT(A, M, N, TauP, NRVT, VT)
        Call RMatrixBDUnpackDiagonals(A, M, N, IsUpper, W, E)
        ReDim WORK(1# To M)
        Call InplaceTranspose(U, 0#, NRU - 1#, 0#, NCU - 1#, WORK)
        Result = RMatrixBDSVD(W, E, MinMN, IsUpper, False, A, 0#, U, NRU, VT, NCVT)
        Call InplaceTranspose(U, 0#, NRU - 1#, 0#, NCU - 1#, WORK)
        RMatrixSVD = Result
        Exit Function
    End If
    
    '
    ' Simple bidiagonal reduction
    '
    Call RMatrixBD(A, M, N, TauQ, TauP)
    Call RMatrixBDUnpackQ(A, M, N, TauQ, NCU, U)
    Call RMatrixBDUnpackPT(A, M, N, TauP, NRVT, VT)
    Call RMatrixBDUnpackDiagonals(A, M, N, IsUpper, W, E)
    If AdditionalMemory < 2# Or UNeeded = 0# Then
        
        '
        ' We cant use additional memory or there is no need in such operations
        '
        Result = RMatrixBDSVD(W, E, MinMN, IsUpper, False, U, NRU, A, 0#, VT, NCVT)
    Else
        
        '
        ' We can use additional memory
        '
        ReDim T2(0# To MinMN - 1#, 0# To M - 1#)
        Call CopyAndTranspose(U, 0#, M - 1#, 0#, MinMN - 1#, T2, 0#, MinMN - 1#, 0#, M - 1#)
        Result = RMatrixBDSVD(W, E, MinMN, IsUpper, False, U, 0#, T2, M, VT, NCVT)
        Call CopyAndTranspose(T2, 0#, MinMN - 1#, 0#, M - 1#, U, 0#, M - 1#, 0#, MinMN - 1#)
    End If
    RMatrixSVD = Result
End Function
