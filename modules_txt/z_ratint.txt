''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2007-2009, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Data types
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Barycentric interpolant.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Type BarycentricInterpolant
    N As Long
    SY As Double
    X() As Double
    y() As Double
    w() As Double
End Type
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Barycentric fitting report:
'    TaskRCond       reciprocal of task's condition number
'    RMSError        RMS error
'    AvgError        average error
'    AvgRelError     average relative error (for non-zero Y[I])
'    MaxError        maximum error
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Type BarycentricFitReport
    TaskRCond As Double
    DBest As Long
    RMSError As Double
    AvgError As Double
    AvgRelError As Double
    MaxError As Double
End Type
'Global constants
Private Const BRCVNum As Long = 10#
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Rational interpolation using barycentric formula
'
'F(t) = SUM(i=0,n-1,w[i]*f[i]/(t-x[i])) / SUM(i=0,n-1,w[i]/(t-x[i]))
'
'Input parameters:
'    B   -   barycentric interpolant built with one of model building
'            subroutines.
'    T   -   interpolation point
'
'Result:
'    barycentric interpolant F(t)
'
'  -- ALGLIB --
'     Copyright 17.08.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function BarycentricCalc(ByRef B As BarycentricInterpolant, _
         ByVal T As Double) As Double
    Dim Result As Double
    Dim S1 As Double
    Dim S2 As Double
    Dim S As Double
    Dim V As Double
    Dim i As Long
    
    '
    ' special case: N=1
    '
    If B.N = 1# Then
        Result = B.SY * B.y(0#)
        BarycentricCalc = Result
        Exit Function
    End If
    
    '
    ' Here we assume that task is normalized, i.e.:
    ' 1. abs(Y[i])<=1
    ' 2. abs(W[i])<=1
    ' 3. X[] is ordered
    '
    S = Abs(T - B.X(0#))
    For i = 0# To B.N - 1# Step 1
        V = B.X(i)
        If V = T Then
            Result = B.SY * B.y(i)
            BarycentricCalc = Result
            Exit Function
        End If
        V = Abs(T - V)
        If V < S Then
            S = V
        End If
    Next i
    S1 = 0#
    S2 = 0#
    For i = 0# To B.N - 1# Step 1
        V = S / (T - B.X(i))
        V = V * B.w(i)
        S1 = S1 + V * B.y(i)
        S2 = S2 + V
    Next i
    Result = B.SY * S1 / S2
    BarycentricCalc = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Differentiation of barycentric interpolant: first derivative.
'
'Algorithm used in this subroutine is very robust and should not fail until
'provided with values too close to MaxRealNumber  (usually  MaxRealNumber/N
'or greater will overflow).
'
'INPUT PARAMETERS:
'    B   -   barycentric interpolant built with one of model building
'            subroutines.
'    T   -   interpolation point
'
'OUTPUT PARAMETERS:
'    F   -   barycentric interpolant at T
'    DF  -   first derivative
'
'NOTE
'
'
'  -- ALGLIB --
'     Copyright 17.08.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub BarycentricDiff1(ByRef B As BarycentricInterpolant, _
         ByVal T As Double, _
         ByRef F As Double, _
         ByRef DF As Double)
    Dim V As Double
    Dim VV As Double
    Dim i As Long
    Dim K As Long
    Dim N0 As Double
    Dim N1 As Double
    Dim D0 As Double
    Dim D1 As Double
    Dim S0 As Double
    Dim S1 As Double
    Dim XK As Double
    Dim XI As Double
    Dim XMin As Double
    Dim XMAX As Double
    Dim XScale1 As Double
    Dim XOffs1 As Double
    Dim XScale2 As Double
    Dim XOffs2 As Double
    Dim XPrev As Double
    
    '
    ' special case: N=1
    '
    If B.N = 1# Then
        F = B.SY * B.y(0#)
        DF = 0#
        Exit Sub
    End If
    If B.SY = 0# Then
        F = 0#
        DF = 0#
        Exit Sub
    End If
    
    '
    ' We assume than N>1 and B.SY>0. Find:
    ' 1. pivot point (X[i] closest to T)
    ' 2. width of interval containing X[i]
    '
    V = Abs(B.X(0#) - T)
    K = 0#
    XMin = B.X(0#)
    XMAX = B.X(0#)
    For i = 1# To B.N - 1# Step 1
        VV = B.X(i)
        If Abs(VV - T) < V Then
            V = Abs(VV - T)
            K = i
        End If
        XMin = MinReal(XMin, VV)
        XMAX = MaxReal(XMAX, VV)
    Next i
    
    '
    ' pivot point found, calculate dNumerator and dDenominator
    '
    XScale1 = 1# / (XMAX - XMin)
    XOffs1 = -(XMin / (XMAX - XMin)) + 1#
    XScale2 = 2#
    XOffs2 = -3#
    T = T * XScale1 + XOffs1
    T = T * XScale2 + XOffs2
    XK = B.X(K)
    XK = XK * XScale1 + XOffs1
    XK = XK * XScale2 + XOffs2
    V = T - XK
    N0 = 0#
    N1 = 0#
    D0 = 0#
    D1 = 0#
    XPrev = -2#
    For i = 0# To B.N - 1# Step 1
        XI = B.X(i)
        XI = XI * XScale1 + XOffs1
        XI = XI * XScale2 + XOffs2
        XPrev = XI
        If i <> K Then
            VV = Square(T - XI)
            S0 = (T - XK) / (T - XI)
            S1 = (XK - XI) / VV
        Else
            S0 = 1#
            S1 = 0#
        End If
        VV = B.w(i) * B.y(i)
        N0 = N0 + S0 * VV
        N1 = N1 + S1 * VV
        VV = B.w(i)
        D0 = D0 + S0 * VV
        D1 = D1 + S1 * VV
    Next i
    F = B.SY * N0 / D0
    DF = (N1 * D0 - N0 * D1) / Square(D0)
    If DF <> 0# Then
        DF = Sgn(DF) * Exp(Log(Abs(DF)) + Log(B.SY) + Log(XScale1) + Log(XScale2))
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Differentiation of barycentric interpolant: first/second derivatives.
'
'INPUT PARAMETERS:
'    B   -   barycentric interpolant built with one of model building
'            subroutines.
'    T   -   interpolation point
'
'OUTPUT PARAMETERS:
'    F   -   barycentric interpolant at T
'    DF  -   first derivative
'    D2F -   second derivative
'
'NOTE: this algorithm may fail due to overflow/underflor if  used  on  data
'whose values are close to MaxRealNumber or MinRealNumber.  Use more robust
'BarycentricDiff1() subroutine in such cases.
'
'
'  -- ALGLIB --
'     Copyright 17.08.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub BarycentricDiff2(ByRef B As BarycentricInterpolant, _
         ByVal T As Double, _
         ByRef F As Double, _
         ByRef DF As Double, _
         ByRef D2F As Double)
    Dim V As Double
    Dim VV As Double
    Dim i As Long
    Dim K As Long
    Dim N0 As Double
    Dim N1 As Double
    Dim N2 As Double
    Dim D0 As Double
    Dim D1 As Double
    Dim D2 As Double
    Dim S0 As Double
    Dim S1 As Double
    Dim S2 As Double
    Dim XK As Double
    Dim XI As Double
    F = 0#
    DF = 0#
    D2F = 0#
    
    '
    ' special case: N=1
    '
    If B.N = 1# Then
        F = B.SY * B.y(0#)
        DF = 0#
        D2F = 0#
        Exit Sub
    End If
    If B.SY = 0# Then
        F = 0#
        DF = 0#
        D2F = 0#
        Exit Sub
    End If
    
    '
    ' We assume than N>1 and B.SY>0. Find:
    ' 1. pivot point (X[i] closest to T)
    ' 2. width of interval containing X[i]
    '
    V = Abs(B.X(0#) - T)
    K = 0#
    For i = 1# To B.N - 1# Step 1
        VV = B.X(i)
        If Abs(VV - T) < V Then
            V = Abs(VV - T)
            K = i
        End If
    Next i
    
    '
    ' pivot point found, calculate dNumerator and dDenominator
    '
    XK = B.X(K)
    V = T - XK
    N0 = 0#
    N1 = 0#
    N2 = 0#
    D0 = 0#
    D1 = 0#
    D2 = 0#
    For i = 0# To B.N - 1# Step 1
        If i <> K Then
            XI = B.X(i)
            VV = Square(T - XI)
            S0 = (T - XK) / (T - XI)
            S1 = (XK - XI) / VV
            S2 = -(2# * (XK - XI) / (VV * (T - XI)))
        Else
            S0 = 1#
            S1 = 0#
            S2 = 0#
        End If
        VV = B.w(i) * B.y(i)
        N0 = N0 + S0 * VV
        N1 = N1 + S1 * VV
        N2 = N2 + S2 * VV
        VV = B.w(i)
        D0 = D0 + S0 * VV
        D1 = D1 + S1 * VV
        D2 = D2 + S2 * VV
    Next i
    F = B.SY * N0 / D0
    DF = B.SY * (N1 * D0 - N0 * D1) / Square(D0)
    D2F = B.SY * ((N2 * D0 - N0 * D2) * Square(D0) - (N1 * D0 - N0 * D1) * 2# * D0 * D1) / Square(Square(D0))
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This subroutine performs linear transformation of the argument.
'
'INPUT PARAMETERS:
'    B       -   rational interpolant in barycentric form
'    CA, CB  -   transformation coefficients: x = CA*t + CB
'
'OUTPUT PARAMETERS:
'    B       -   transformed interpolant with X replaced by T
'
'  -- ALGLIB PROJECT --
'     Copyright 19.08.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub BarycentricLinTransX(ByRef B As BarycentricInterpolant, _
         ByVal CA As Double, _
         ByVal CB As Double)
    Dim i As Long
    Dim j As Long
    Dim V As Double
    
    '
    ' special case, replace by constant F(CB)
    '
    If CA = 0# Then
        B.SY = BarycentricCalc(B, CB)
        V = 1#
        For i = 0# To B.N - 1# Step 1
            B.y(i) = 1#
            B.w(i) = V
            V = -V
        Next i
        Exit Sub
    End If
    
    '
    ' general case: CA<>0
    '
    For i = 0# To B.N - 1# Step 1
        B.X(i) = (B.X(i) - CB) / CA
    Next i
    If CA < 0# Then
        For i = 0# To B.N - 1# Step 1
            If i < B.N - 1# - i Then
                j = B.N - 1# - i
                V = B.X(i)
                B.X(i) = B.X(j)
                B.X(j) = V
                V = B.y(i)
                B.y(i) = B.y(j)
                B.y(j) = V
                V = B.w(i)
                B.w(i) = B.w(j)
                B.w(j) = V
            Else
                Exit For
            End If
        Next i
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This  subroutine   performs   linear  transformation  of  the  barycentric
'interpolant.
'
'INPUT PARAMETERS:
'    B       -   rational interpolant in barycentric form
'    CA, CB  -   transformation coefficients: B2(x) = CA*B(x) + CB
'
'OUTPUT PARAMETERS:
'    B       -   transformed interpolant
'
'  -- ALGLIB PROJECT --
'     Copyright 19.08.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub BarycentricLinTransY(ByRef B As BarycentricInterpolant, _
         ByVal CA As Double, _
         ByVal CB As Double)
    Dim i As Long
    Dim V As Double
    Dim i_ As Long
    For i = 0# To B.N - 1# Step 1
        B.y(i) = CA * B.SY * B.y(i) + CB
    Next i
    B.SY = 0#
    For i = 0# To B.N - 1# Step 1
        B.SY = MaxReal(B.SY, Abs(B.y(i)))
    Next i
    If B.SY > 0# Then
        V = 1# / B.SY
        For i_ = 0# To B.N - 1# Step 1
            B.y(i_) = V * B.y(i_)
        Next i_
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Extracts X/Y/W arrays from rational interpolant
'
'INPUT PARAMETERS:
'    B   -   barycentric interpolant
'
'OUTPUT PARAMETERS:
'    N   -   nodes count, N>0
'    X   -   interpolation nodes, array[0..N-1]
'    F   -   function values, array[0..N-1]
'    W   -   barycentric weights, array[0..N-1]
'
'  -- ALGLIB --
'     Copyright 17.08.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub BarycentricUnpack(ByRef B As BarycentricInterpolant, _
         ByRef N As Long, _
         ByRef X() As Double, _
         ByRef y() As Double, _
         ByRef w() As Double)
    Dim V As Double
    Dim i_ As Long
    N = B.N
    ReDim X(0 To N - 1)
    ReDim y(0 To N - 1)
    ReDim w(0 To N - 1)
    V = B.SY
    For i_ = 0# To N - 1# Step 1
        X(i_) = B.X(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        y(i_) = V * B.y(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        w(i_) = B.w(i_)
    Next i_
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Serialization of the barycentric interpolant
'
'INPUT PARAMETERS:
'    B   -   barycentric interpolant
'
'OUTPUT PARAMETERS:
'    RA      -   array of real numbers which contains interpolant,
'                array[0..RLen-1]
'    RLen    -   RA lenght
'
'  -- ALGLIB --
'     Copyright 17.08.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub BarycentricSerialize(ByRef B As BarycentricInterpolant, _
         ByRef RA() As Double, _
         ByRef RALen As Long)
    Dim i_ As Long
    Dim i1_ As Long
    RALen = 2# + 2# + 3# * B.N
    ReDim RA(0 To RALen - 1)
    RA(0#) = RALen
    RA(1#) = BRCVNum
    RA(2#) = B.N
    RA(3#) = B.SY
    i1_ = (0#) - (4#)
    For i_ = 4# To 4# + B.N - 1# Step 1
        RA(i_) = B.X(i_ + i1_)
    Next i_
    i1_ = (0#) - (4# + B.N)
    For i_ = 4# + B.N To 4# + 2# * B.N - 1# Step 1
        RA(i_) = B.y(i_ + i1_)
    Next i_
    i1_ = (0#) - (4# + 2# * B.N)
    For i_ = 4# + 2# * B.N To 4# + 3# * B.N - 1# Step 1
        RA(i_) = B.w(i_ + i1_)
    Next i_
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Unserialization of the barycentric interpolant
'
'INPUT PARAMETERS:
'    RA  -   array of real numbers which contains interpolant,
'
'OUTPUT PARAMETERS:
'    B   -   barycentric interpolant
'
'  -- ALGLIB --
'     Copyright 17.08.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub BarycentricUnserialize(ByRef RA() As Double, _
         ByRef B As BarycentricInterpolant)
    Dim i_ As Long
    Dim i1_ As Long
    B.N = Round(RA(2#))
    B.SY = RA(3#)
    ReDim B.X(0 To B.N - 1)
    ReDim B.y(0 To B.N - 1)
    ReDim B.w(0 To B.N - 1)
    i1_ = (4#) - (0#)
    For i_ = 0# To B.N - 1# Step 1
        B.X(i_) = RA(i_ + i1_)
    Next i_
    i1_ = (4# + B.N) - (0#)
    For i_ = 0# To B.N - 1# Step 1
        B.y(i_) = RA(i_ + i1_)
    Next i_
    i1_ = (4# + 2# * B.N) - (0#)
    For i_ = 0# To B.N - 1# Step 1
        B.w(i_) = RA(i_ + i1_)
    Next i_
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copying of the barycentric interpolant
'
'INPUT PARAMETERS:
'    B   -   barycentric interpolant
'
'OUTPUT PARAMETERS:
'    B2  -   copy(B1)
'
'  -- ALGLIB --
'     Copyright 17.08.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub BarycentricCopy(ByRef B As BarycentricInterpolant, _
         ByRef b2 As BarycentricInterpolant)
    Dim i_ As Long
    b2.N = B.N
    b2.SY = B.SY
    ReDim b2.X(0 To b2.N - 1)
    ReDim b2.y(0 To b2.N - 1)
    ReDim b2.w(0 To b2.N - 1)
    For i_ = 0# To b2.N - 1# Step 1
        b2.X(i_) = B.X(i_)
    Next i_
    For i_ = 0# To b2.N - 1# Step 1
        b2.y(i_) = B.y(i_)
    Next i_
    For i_ = 0# To b2.N - 1# Step 1
        b2.w(i_) = B.w(i_)
    Next i_
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Rational interpolant from X/Y/W arrays
'
'F(t) = SUM(i=0,n-1,w[i]*f[i]/(t-x[i])) / SUM(i=0,n-1,w[i]/(t-x[i]))
'
'INPUT PARAMETERS:
'    X   -   interpolation nodes, array[0..N-1]
'    F   -   function values, array[0..N-1]
'    W   -   barycentric weights, array[0..N-1]
'    N   -   nodes count, N>0
'
'OUTPUT PARAMETERS:
'    B   -   barycentric interpolant built from (X, Y, W)
'
'  -- ALGLIB --
'     Copyright 17.08.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub BarycentricBuildXYW(ByRef X() As Double, _
         ByRef y() As Double, _
         ByRef w() As Double, _
         ByVal N As Long, _
         ByRef B As BarycentricInterpolant)
    Dim i_ As Long
    
    '
    ' fill X/Y/W
    '
    ReDim B.X(0 To N - 1)
    ReDim B.y(0 To N - 1)
    ReDim B.w(0 To N - 1)
    For i_ = 0# To N - 1# Step 1
        B.X(i_) = X(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        B.y(i_) = y(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        B.w(i_) = w(i_)
    Next i_
    B.N = N
    
    '
    ' Normalize
    '
    Call BarycentricNormalize(B)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Rational interpolant without poles
'
'The subroutine constructs the rational interpolating function without real
'poles  (see  'Barycentric rational interpolation with no  poles  and  high
'rates of approximation', Michael S. Floater. and  Kai  Hormann,  for  more
'information on this subject).
'
'Input parameters:
'    X   -   interpolation nodes, array[0..N-1].
'    Y   -   function values, array[0..N-1].
'    N   -   number of nodes, N>0.
'    D   -   order of the interpolation scheme, 0 <= D <= N-1.
'            D<0 will cause an error.
'            D>=N it will be replaced with D=N-1.
'            if you don't know what D to choose, use small value about 3-5.
'
'Output parameters:
'    B   -   barycentric interpolant.
'
'Note:
'    this algorithm always succeeds and calculates the weights  with  close
'    to machine precision.
'
'  -- ALGLIB PROJECT --
'     Copyright 17.06.2007 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub BarycentricBuildFloaterHormann(ByRef X() As Double, _
         ByRef y() As Double, _
         ByVal N As Long, _
         ByVal D As Long, _
         ByRef B As BarycentricInterpolant)
    Dim S0 As Double
    Dim S As Double
    Dim V As Double
    Dim i As Long
    Dim j As Long
    Dim K As Long
    Dim Perm() As Long
    Dim WTemp() As Double
    Dim i_ As Long
    
    '
    ' Prepare
    '
    If D > N - 1# Then
        D = N - 1#
    End If
    B.N = N
    
    '
    ' special case: N=1
    '
    If N = 1# Then
        ReDim B.X(0 To N - 1)
        ReDim B.y(0 To N - 1)
        ReDim B.w(0 To N - 1)
        B.X(0#) = X(0#)
        B.y(0#) = y(0#)
        B.w(0#) = 1#
        Call BarycentricNormalize(B)
        Exit Sub
    End If
    
    '
    ' Fill X/Y
    '
    ReDim B.X(0 To N - 1)
    ReDim B.y(0 To N - 1)
    For i_ = 0# To N - 1# Step 1
        B.X(i_) = X(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        B.y(i_) = y(i_)
    Next i_
    Call TagSortFastR(B.X, B.y, N)
    
    '
    ' Calculate Wk
    '
    ReDim B.w(0 To N - 1)
    S0 = 1#
    For K = 1# To D Step 1
        S0 = -S0
    Next K
    For K = 0# To N - 1# Step 1
        
        '
        ' Wk
        '
        S = 0#
        For i = MaxInt(K - D, 0#) To MinInt(K, N - 1# - D) Step 1
            V = 1#
            For j = i To i + D Step 1
                If j <> K Then
                    V = V / Abs(B.X(K) - B.X(j))
                End If
            Next j
            S = S + V
        Next i
        B.w(K) = S0 * S
        
        '
        ' Next S0
        '
        S0 = -S0
    Next K
    
    '
    ' Normalize
    '
    Call BarycentricNormalize(B)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Weghted rational least  squares  fitting  using  Floater-Hormann  rational
'functions  with  optimal  D  chosen  from  [0,9],  with  constraints   and
'individual weights.
'
'Equidistant  grid  with M node on [min(x),max(x)]  is  used to build basis
'functions. Different values of D are tried, optimal D (least WEIGHTED root
'mean square error) is chosen.  Task  is  linear,  so  linear least squares
'solver  is  used.  Complexity  of  this  computational  scheme is O(N*M^2)
'(mostly dominated by the least squares solver).
'
'SEE ALSO
'* BarycentricFitFloaterHormann(), "lightweight" fitting without invididual
'  weights and constraints.
'
'INPUT PARAMETERS:
'    X   -   points, array[0..N-1].
'    Y   -   function values, array[0..N-1].
'    W   -   weights, array[0..N-1]
'            Each summand in square  sum  of  approximation deviations from
'            given  values  is  multiplied  by  the square of corresponding
'            weight. Fill it by 1's if you don't  want  to  solve  weighted
'            task.
'    N   -   number of points, N>0.
'    XC  -   points where function values/derivatives are constrained,
'            array[0..K-1].
'    YC  -   values of constraints, array[0..K-1]
'    DC  -   array[0..K-1], types of constraints:
'            * DC[i]=0   means that S(XC[i])=YC[i]
'            * DC[i]=1   means that S'(XC[i])=YC[i]
'            SEE BELOW FOR IMPORTANT INFORMATION ON CONSTRAINTS
'    K   -   number of constraints, 0<=K<M.
'            K=0 means no constraints (XC/YC/DC are not used in such cases)
'    M   -   number of basis functions ( = number_of_nodes), M>=2.
'
'OUTPUT PARAMETERS:
'    Info-   same format as in LSFitLinearWC() subroutine.
'            * Info>0    task is solved
'            * Info<=0   an error occured:
'                        -4 means inconvergence of internal SVD
'                        -3 means inconsistent constraints
'                        -1 means another errors in parameters passed
'                           (N<=0, for example)
'    B   -   barycentric interpolant.
'    Rep -   report, same format as in LSFitLinearWC() subroutine.
'            Following fields are set:
'            * DBest         best value of the D parameter
'            * RMSError      rms error on the (X,Y).
'            * AvgError      average error on the (X,Y).
'            * AvgRelError   average relative error on the non-zero Y
'            * MaxError      maximum error
'                            NON-WEIGHTED ERRORS ARE CALCULATED
'
'IMPORTANT:
'    this subroitine doesn't calculate task's condition number for K<>0.
'
'SETTING CONSTRAINTS - DANGERS AND OPPORTUNITIES:
'
'Setting constraints can lead  to undesired  results,  like ill-conditioned
'behavior, or inconsistency being detected. From the other side,  it allows
'us to improve quality of the fit. Here we summarize  our  experience  with
'constrained barycentric interpolants:
'* excessive  constraints  can  be  inconsistent.   Floater-Hormann   basis
'  functions aren't as flexible as splines (although they are very smooth).
'* the more evenly constraints are spread across [min(x),max(x)],  the more
'  chances that they will be consistent
'* the  greater  is  M (given  fixed  constraints),  the  more chances that
'  constraints will be consistent
'* in the general case, consistency of constraints IS NOT GUARANTEED.
'* in the several special cases, however, we CAN guarantee consistency.
'* one of this cases is constraints on the function  VALUES at the interval
'  boundaries. Note that consustency of the  constraints  on  the  function
'  DERIVATIVES is NOT guaranteed (you can use in such cases  cubic  splines
'  which are more flexible).
'* another  special  case  is ONE constraint on the function value (OR, but
'  not AND, derivative) anywhere in the interval
'
'Our final recommendation is to use constraints  WHEN  AND  ONLY  WHEN  you
'can't solve your task without them. Anything beyond  special  cases  given
'above is not guaranteed and may result in inconsistency.
'
'  -- ALGLIB PROJECT --
'     Copyright 18.08.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub BarycentricFitFloaterHormannWC(ByRef X() As Double, _
         ByRef y() As Double, _
         ByRef w() As Double, _
         ByVal N As Long, _
         ByRef XC() As Double, _
         ByRef YC() As Double, _
         ByRef DC() As Long, _
         ByVal K As Long, _
         ByVal M As Long, _
         ByRef Info As Long, _
         ByRef B As BarycentricInterpolant, _
         ByRef Rep As BarycentricFitReport)
    Dim D As Long
    Dim i As Long
    Dim WRMSCur As Double
    Dim WRMSBest As Double
    Dim LocB As BarycentricInterpolant
    Dim LocRep As BarycentricFitReport
    Dim LocInfo As Long
    If N < 1# Or M < 2# Or K < 0# Or K >= M Then
        Info = -1#
        Exit Sub
    End If
    
    '
    ' Find optimal D
    '
    ' Info is -3 by default (degenerate constraints).
    ' If LocInfo will always be equal to -3, Info will remain equal to -3.
    ' If at least once LocInfo will be -4, Info will be -4.
    '
    WRMSBest = MaxRealNumber
    Rep.DBest = -1#
    Info = -3#
    For D = 0# To MinInt(9#, N - 1#) Step 1
        Call BarycentricFitWCFixedD(X, y, w, N, XC, YC, DC, K, M, D, LocInfo, LocB, LocRep)
        If LocInfo > 0# Then
            
            '
            ' Calculate weghted RMS
            '
            WRMSCur = 0#
            For i = 0# To N - 1# Step 1
                WRMSCur = WRMSCur + Square(w(i) * (y(i) - BarycentricCalc(LocB, X(i))))
            Next i
            WRMSCur = Sqr(WRMSCur / N)
            If WRMSCur < WRMSBest Or Rep.DBest < 0# Then
                Call BarycentricCopy(LocB, B)
                Rep.DBest = D
                Info = 1#
                Rep.RMSError = LocRep.RMSError
                Rep.AvgError = LocRep.AvgError
                Rep.AvgRelError = LocRep.AvgRelError
                Rep.MaxError = LocRep.MaxError
                Rep.TaskRCond = LocRep.TaskRCond
                WRMSBest = WRMSCur
            End If
        Else
            If LocInfo <> -3# And Info < 0# Then
                Info = LocInfo
            End If
        End If
    Next D
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Rational least squares fitting, without weights and constraints.
'
'See BarycentricFitFloaterHormannWC() for more information.
'
'  -- ALGLIB PROJECT --
'     Copyright 18.08.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub BarycentricFitFloaterHormann(ByRef X() As Double, _
         ByRef y() As Double, _
         ByVal N As Long, _
         ByVal M As Long, _
         ByRef Info As Long, _
         ByRef B As BarycentricInterpolant, _
         ByRef Rep As BarycentricFitReport)
    Dim w() As Double
    Dim XC() As Double
    Dim YC() As Double
    Dim DC() As Long
    Dim i As Long
    If N < 1# Then
        Info = -1#
        Exit Sub
    End If
    ReDim w(0 To N - 1)
    For i = 0# To N - 1# Step 1
        w(i) = 1#
    Next i
    Call BarycentricFitFloaterHormannWC(X, y, w, N, XC, YC, DC, 0#, M, Info, B, Rep)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Normalization of barycentric interpolant:
'* B.N, B.X, B.Y and B.W are initialized
'* B.SY is NOT initialized
'* Y[] is normalized, scaling coefficient is stored in B.SY
'* W[] is normalized, no scaling coefficient is stored
'* X[] is sorted
'
'Internal subroutine.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub BarycentricNormalize(ByRef B As BarycentricInterpolant)
    Dim P1() As Long
    Dim P2() As Long
    Dim i As Long
    Dim j As Long
    Dim J2 As Long
    Dim V As Double
    Dim i_ As Long
    
    '
    ' Normalize task: |Y|<=1, |W|<=1, sort X[]
    '
    B.SY = 0#
    For i = 0# To B.N - 1# Step 1
        B.SY = MaxReal(B.SY, Abs(B.y(i)))
    Next i
    If B.SY > 0# And Abs(B.SY - 1#) > 10# * MachineEpsilon Then
        V = 1# / B.SY
        For i_ = 0# To B.N - 1# Step 1
            B.y(i_) = V * B.y(i_)
        Next i_
    End If
    V = 0#
    For i = 0# To B.N - 1# Step 1
        V = MaxReal(V, Abs(B.w(i)))
    Next i
    If V > 0# And Abs(V - 1#) > 10# * MachineEpsilon Then
        V = 1# / V
        For i_ = 0# To B.N - 1# Step 1
            B.w(i_) = V * B.w(i_)
        Next i_
    End If
    For i = 0# To B.N - 2# Step 1
        If B.X(i + 1#) < B.X(i) Then
            Call TagSort(B.X, B.N, P1, P2)
            For j = 0# To B.N - 1# Step 1
                J2 = P2(j)
                V = B.y(j)
                B.y(j) = B.y(J2)
                B.y(J2) = V
                V = B.w(j)
                B.w(j) = B.w(J2)
                B.w(J2) = V
            Next j
            Exit For
        End If
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal subroutine, calculates barycentric basis functions.
'Used for efficient simultaneous calculation of N basis functions.
'
'  -- ALGLIB --
'     Copyright 17.08.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub BarycentricCalcBasis(ByRef B As BarycentricInterpolant, _
         ByVal T As Double, _
         ByRef y() As Double)
    Dim S2 As Double
    Dim S As Double
    Dim V As Double
    Dim i As Long
    Dim j As Long
    Dim i_ As Long
    
    '
    ' special case: N=1
    '
    If B.N = 1# Then
        y(0#) = 1#
        Exit Sub
    End If
    
    '
    ' Here we assume that task is normalized, i.e.:
    ' 1. abs(Y[i])<=1
    ' 2. abs(W[i])<=1
    ' 3. X[] is ordered
    '
    ' First, we decide: should we use "safe" formula (guarded
    ' against overflow) or fast one?
    '
    S = Abs(T - B.X(0#))
    For i = 0# To B.N - 1# Step 1
        V = B.X(i)
        If V = T Then
            For j = 0# To B.N - 1# Step 1
                y(j) = 0#
            Next j
            y(i) = 1#
            Exit Sub
        End If
        V = Abs(T - V)
        If V < S Then
            S = V
        End If
    Next i
    S2 = 0#
    For i = 0# To B.N - 1# Step 1
        V = S / (T - B.X(i))
        V = V * B.w(i)
        y(i) = V
        S2 = S2 + V
    Next i
    V = 1# / S2
    For i_ = 0# To B.N - 1# Step 1
        y(i_) = V * y(i_)
    Next i_
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal Floater-Hormann fitting subroutine for fixed D
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub BarycentricFitWCFixedD(ByRef X_() As Double, _
         ByRef y_() As Double, _
         ByRef w() As Double, _
         ByVal N As Long, _
         ByRef XC_() As Double, _
         ByRef YC_() As Double, _
         ByRef DC() As Long, _
         ByVal K As Long, _
         ByVal M As Long, _
         ByVal D As Long, _
         ByRef Info As Long, _
         ByRef B As BarycentricInterpolant, _
         ByRef Rep As BarycentricFitReport)
    Dim X() As Double
    Dim y() As Double
    Dim XC() As Double
    Dim YC() As Double
    Dim FMatrix() As Double
    Dim CMatrix() As Double
    Dim Y2() As Double
    Dim W2() As Double
    Dim SX() As Double
    Dim SY() As Double
    Dim SBF() As Double
    Dim XOriginal() As Double
    Dim YOriginal() As Double
    Dim Tmp() As Double
    Dim LRep As LSFitReport
    Dim V0 As Double
    Dim V1 As Double
    Dim MX As Double
    Dim b2 As BarycentricInterpolant
    Dim i As Long
    Dim j As Long
    Dim RelCnt As Long
    Dim XA As Double
    Dim XB As Double
    Dim SA As Double
    Dim SB As Double
    Dim Decay As Double
    Dim i_ As Long
    X = X_
    y = y_
    XC = XC_
    YC = YC_
    If N < 1# Or M < 2# Or K < 0# Or K >= M Then
        Info = -1#
        Exit Sub
    End If
    For i = 0# To K - 1# Step 1
        Info = 0#
        If DC(i) < 0# Then
            Info = -1#
        End If
        If DC(i) > 1# Then
            Info = -1#
        End If
        If Info < 0# Then
            Exit Sub
        End If
    Next i
    
    '
    ' weight decay for correct handling of task which becomes
    ' degenerate after constraints are applied
    '
    Decay = 10000# * MachineEpsilon
    
    '
    ' Scale X, Y, XC, YC
    '
    Call LSFitScaleXY(X, y, N, XC, YC, DC, K, XA, XB, SA, SB, XOriginal, YOriginal)
    
    '
    ' allocate space, initialize:
    ' * FMatrix-   values of basis functions at X[]
    ' * CMatrix-   values (derivatives) of basis functions at XC[]
    '
    ReDim Y2(0 To N + M - 1)
    ReDim W2(0 To N + M - 1)
    ReDim FMatrix(0 To N + M - 1, 0 To M - 1)
    If K > 0# Then
        ReDim CMatrix(0 To K - 1, 0 To M + 1# - 1)
    End If
    ReDim Y2(0 To N + M - 1)
    ReDim W2(0 To N + M - 1)
    
    '
    ' Prepare design and constraints matrices:
    ' * fill constraints matrix
    ' * fill first N rows of design matrix with values
    ' * fill next M rows of design matrix with regularizing term
    ' * append M zeros to Y
    ' * append M elements, mean(abs(W)) each, to W
    '
    ReDim SX(0 To M - 1)
    ReDim SY(0 To M - 1)
    ReDim SBF(0 To M - 1)
    For j = 0# To M - 1# Step 1
        SX(j) = 2# * j / (M - 1#) - 1#
    Next j
    For i = 0# To M - 1# Step 1
        SY(i) = 1#
    Next i
    Call BarycentricBuildFloaterHormann(SX, SY, M, D, b2)
    MX = 0#
    For i = 0# To N - 1# Step 1
        Call BarycentricCalcBasis(b2, X(i), SBF)
        For i_ = 0# To M - 1# Step 1
            FMatrix(i, i_) = SBF(i_)
        Next i_
        Y2(i) = y(i)
        W2(i) = w(i)
        MX = MX + Abs(w(i)) / N
    Next i
    For i = 0# To M - 1# Step 1
        For j = 0# To M - 1# Step 1
            If i = j Then
                FMatrix(N + i, j) = Decay
            Else
                FMatrix(N + i, j) = 0#
            End If
        Next j
        Y2(N + i) = 0#
        W2(N + i) = MX
    Next i
    If K > 0# Then
        For j = 0# To M - 1# Step 1
            For i = 0# To M - 1# Step 1
                SY(i) = 0#
            Next i
            SY(j) = 1#
            Call BarycentricBuildFloaterHormann(SX, SY, M, D, b2)
            For i = 0# To K - 1# Step 1
                Call BarycentricDiff1(b2, XC(i), V0, V1)
                If DC(i) = 0# Then
                    CMatrix(i, j) = V0
                End If
                If DC(i) = 1# Then
                    CMatrix(i, j) = V1
                End If
            Next i
        Next j
        For i = 0# To K - 1# Step 1
            CMatrix(i, M) = YC(i)
        Next i
    End If
    
    '
    ' Solve constrained task
    '
    If K > 0# Then
        
        '
        ' solve using regularization
        '
        Call LSFitLinearWC(Y2, W2, FMatrix, CMatrix, N + M, M, K, Info, Tmp, LRep)
    Else
        
        '
        ' no constraints, no regularization needed
        '
        Call LSFitLinearWC(y, w, FMatrix, CMatrix, N, M, K, Info, Tmp, LRep)
    End If
    If Info < 0# Then
        Exit Sub
    End If
    
    '
    ' Generate interpolant and scale it
    '
    For i_ = 0# To M - 1# Step 1
        SY(i_) = Tmp(i_)
    Next i_
    Call BarycentricBuildFloaterHormann(SX, SY, M, D, B)
    Call BarycentricLinTransX(B, 2# / (XB - XA), -((XA + XB) / (XB - XA)))
    Call BarycentricLinTransY(B, SB - SA, SA)
    
    '
    ' Scale absolute errors obtained from LSFitLinearW.
    ' Relative error should be calculated separately
    ' (because of shifting/scaling of the task)
    '
    Rep.TaskRCond = LRep.TaskRCond
    Rep.RMSError = LRep.RMSError * (SB - SA)
    Rep.AvgError = LRep.AvgError * (SB - SA)
    Rep.MaxError = LRep.MaxError * (SB - SA)
    Rep.AvgRelError = 0#
    RelCnt = 0#
    For i = 0# To N - 1# Step 1
        If YOriginal(i) <> 0# Then
            Rep.AvgRelError = Rep.AvgRelError + Abs(BarycentricCalc(B, XOriginal(i)) - YOriginal(i)) / Abs(YOriginal(i))
            RelCnt = RelCnt + 1#
        End If
    Next i
    If RelCnt <> 0# Then
        Rep.AvgRelError = Rep.AvgRelError / RelCnt
    End If
End Sub

