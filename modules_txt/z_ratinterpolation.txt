''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2007, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Rational barycentric interpolation without poles
'
'The subroutine constructs the rational interpolating function without real
'poles. It should be noted that the barycentric weights of the  interpolant
'constructed are independent of the values of the given function.
'
'Input parameters:
'    X   -   interpolation nodes, array[0..N-1].
'    N   -   number of nodes, N>0.
'    D   -   order of the interpolation scheme, 0 <= D <= N-1.
'
'Output parameters:
'    W   -   array of the barycentric weights which  can  be  used  in  the
'            BarycentricInterpolate subroutine. Array[0..N-1]
'
'Note:
'    this algorithm always succeeds and calculates the weights  with  close
'    to machine precision.
'
'  -- ALGLIB PROJECT --
'     Copyright 17.06.2007 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub BuildFloaterHormannRationalInterpolant(ByRef X_() As Double, _
         ByVal N As Long, _
         ByVal D As Long, _
         ByRef w() As Double)
    Dim X() As Double
    Dim S0 As Double
    Dim S As Double
    Dim V As Double
    Dim i As Long
    Dim j As Long
    Dim K As Long
    Dim Perm() As Long
    Dim WTemp() As Double
    Dim i_ As Long
    X = X_
    
    '
    ' Prepare
    '
    ReDim w(0# To N - 1#)
    S0 = 1#
    For K = 1# To D Step 1
        S0 = -S0
    Next K
    ReDim Perm(0# To N - 1#)
    For i = 0# To N - 1# Step 1
        Perm(i) = i
    Next i
    Call TagSortFastI(X, Perm, N)
    
    '
    ' Calculate Wk
    '
    For K = 0# To N - 1# Step 1
        
        '
        ' Wk
        '
        S = 0#
        For i = MaxInt(K - D, 0#) To MinInt(K, N - 1# - D) Step 1
            V = 1#
            For j = i To i + D Step 1
                If j <> K Then
                    V = V / Abs(X(K) - X(j))
                End If
            Next j
            S = S + V
        Next i
        w(K) = S0 * S
        
        '
        ' Next S0
        '
        S0 = -S0
    Next K
    
    '
    ' Reorder W
    '
    ReDim WTemp(0# To N - 1#)
    For i_ = 0# To N - 1# Step 1
        WTemp(i_) = w(i_)
    Next i_
    For i = 0# To N - 1# Step 1
        w(Perm(i)) = WTemp(i)
    Next i
End Sub

