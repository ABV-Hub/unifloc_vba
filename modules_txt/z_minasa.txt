''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2010, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Data types
Public Type MinASAState
    N As Long
    EpsG As Double
    EpsF As Double
    EpsX As Double
    MaxIts As Long
    XRep As Boolean
    StpMax As Double
    CGType As Long
    K As Long
    NFEV As Long
    MCStage As Long
    BndL() As Double
    BndU() As Double
    CurAlgo As Long
    ACount As Long
    Mu As Double
    FInit As Double
    DGInit As Double
    AK() As Double
    XK() As Double
    DK() As Double
    AN() As Double
    XN() As Double
    DN() As Double
    D() As Double
    Fold As Double
    Stp As Double
    WORK() As Double
    YK() As Double
    GC() As Double
    X() As Double
    F As Double
    G() As Double
    NeedFG As Boolean
    XUpdated As Boolean
    RState As RCommState
    RepIterationsCount As Long
    RepNFEV As Long
    RepTerminationType As Long
    DebugRestartsCount As Long
    LState As LINMINState
    BetaHS As Double
    BetaDY As Double
End Type
Public Type MinASAReport
    IterationsCount As Long
    NFEV As Long
    TerminationType As Long
    ActiveConstraints As Long
End Type
'Global constants
Private Const N1 As Long = 2#
Private Const N2 As Long = 2#
Private Const STPMIN As Double = 1E-300
Private Const GPAFTol As Double = 0.0001
Private Const GPADecay As Double = 0.5
Private Const ASARho As Double = 0.5
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'              NONLINEAR BOUND CONSTRAINED OPTIMIZATION USING
'                               MODIFIED
'                   WILLIAM W. HAGER AND HONGCHAO ZHANG
'                         ACTIVE SET ALGORITHM
'
'The  subroutine  minimizes  function  F(x)  of  N  arguments  with   bound
'constraints: BndL[i] <= x[i] <= BndU[i]
'
'This method is  globally  convergent  as  long  as  grad(f)  is  Lipschitz
'continuous on a level set: L = { x : f(x)<=f(x0) }.
'
'INPUT PARAMETERS:
'    N       -   problem dimension. N>0
'    X       -   initial solution approximation, array[0..N-1].
'    BndL    -   lower bounds, array[0..N-1].
'                all elements MUST be specified,  i.e.  all  variables  are
'                bounded. However, if some (all) variables  are  unbounded,
'                you may specify very small number as bound: -1000,  -1.0E6
'                or -1.0E300, or something like that.
'    BndU    -   upper bounds, array[0..N-1].
'                all elements MUST be specified,  i.e.  all  variables  are
'                bounded. However, if some (all) variables  are  unbounded,
'                you may specify very large number as bound: +1000,  +1.0E6
'                or +1.0E300, or something like that.
'    EpsG    -   positive number which  defines  a  precision  of  search.  The
'                subroutine finishes its work if the condition ||G|| < EpsG  is
'                satisfied, where ||.|| means Euclidian norm, G - gradient, X -
'                current approximation.
'    EpsF    -   positive number which  defines  a  precision  of  search.  The
'                subroutine finishes its work if on iteration  number  k+1  the
'                condition |F(k+1)-F(k)| <= EpsF*max{|F(k)|, |F(k+1)|, 1}    is
'                satisfied.
'    EpsX    -   positive number which  defines  a  precision  of  search.  The
'                subroutine finishes its work if on iteration number k+1    the
'                condition |X(k+1)-X(k)| <= EpsX is fulfilled.
'    MaxIts  -   maximum number of iterations. If MaxIts=0, the number of
'                iterations is unlimited.
'
'OUTPUT PARAMETERS:
'    State - structure used for reverse communication.
'
'This function  initializes  State   structure  with  default  optimization
'parameters (stopping conditions, step size, etc.).  Use  MinASASet??????()
'functions to tune optimization parameters.
'
'After   all   optimization   parameters   are   tuned,   you   should  use
'MinASAIteration() function to advance algorithm iterations.
'
'NOTES:
'
'1. you may tune stopping conditions with MinASASetCond() function
'2. if target function contains exp() or other fast growing functions,  and
'   optimization algorithm makes too large steps which leads  to  overflow,
'   use MinASASetStpMax() function to bound algorithm's steps.
'
'  -- ALGLIB --
'     Copyright 25.03.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinASACreate(ByVal N As Long, _
         ByRef X() As Double, _
         ByRef BndL() As Double, _
         ByRef BndU() As Double, _
         ByRef State As MinASAState)
    Dim i As Long
    Dim i_ As Long
    For i = 0# To N - 1# Step 1
    Next i
    
    '
    ' Initialize
    '
    State.N = N
    Call MinASASetCond(State, 0#, 0#, 0#, 0#)
    Call MinASASetXRep(State, False)
    Call MinASASetStpMax(State, 0#)
    Call MinASASetAlgorithm(State, -1#)
    ReDim State.BndL(0 To N - 1)
    ReDim State.BndU(0 To N - 1)
    ReDim State.AK(0 To N - 1)
    ReDim State.XK(0 To N - 1)
    ReDim State.DK(0 To N - 1)
    ReDim State.AN(0 To N - 1)
    ReDim State.XN(0 To N - 1)
    ReDim State.DN(0 To N - 1)
    ReDim State.X(0 To N - 1)
    ReDim State.D(0 To N - 1)
    ReDim State.G(0 To N - 1)
    ReDim State.GC(0 To N - 1)
    ReDim State.WORK(0 To N - 1)
    ReDim State.YK(0 To N - 1)
    For i_ = 0# To N - 1# Step 1
        State.BndL(i_) = BndL(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        State.BndU(i_) = BndU(i_)
    Next i_
    
    '
    ' Prepare first run
    '
    For i_ = 0# To N - 1# Step 1
        State.X(i_) = X(i_)
    Next i_
    ReDim State.RState.IA(0# To 3#)
    ReDim State.RState.BA(0# To 1#)
    ReDim State.RState.RA(0# To 2#)
    State.RState.Stage = -1#
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function sets stopping conditions for the ASA optimization algorithm.
'
'INPUT PARAMETERS:
'    State   -   structure which stores algorithm state between calls and
'                which is used for reverse communication. Must be initialized
'                with MinASACreate()
'    EpsG    -   >=0
'                The  subroutine  finishes  its  work   if   the  condition
'                ||G||<EpsG is satisfied, where ||.|| means Euclidian norm,
'                G - gradient.
'    EpsF    -   >=0
'                The  subroutine  finishes  its work if on k+1-th iteration
'                the  condition  |F(k+1)-F(k)|<=EpsF*max{|F(k)|,|F(k+1)|,1}
'                is satisfied.
'    EpsX    -   >=0
'                The subroutine finishes its work if  on  k+1-th  iteration
'                the condition |X(k+1)-X(k)| <= EpsX is fulfilled.
'    MaxIts  -   maximum number of iterations. If MaxIts=0, the  number  of
'                iterations is unlimited.
'
'Passing EpsG=0, EpsF=0, EpsX=0 and MaxIts=0 (simultaneously) will lead to
'automatic stopping criterion selection (small EpsX).
'
'  -- ALGLIB --
'     Copyright 02.04.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinASASetCond(ByRef State As MinASAState, _
         ByVal EpsG As Double, _
         ByVal EpsF As Double, _
         ByVal EpsX As Double, _
         ByVal MaxIts As Long)
    If EpsG = 0# And EpsF = 0# And EpsX = 0# And MaxIts = 0# Then
        EpsX = 0.000001
    End If
    State.EpsG = EpsG
    State.EpsF = EpsF
    State.EpsX = EpsX
    State.MaxIts = MaxIts
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function turns on/off reporting.
'
'INPUT PARAMETERS:
'    State   -   structure which stores algorithm state between calls and
'                which is used for reverse communication. Must be
'                initialized with MinASACreate()
'    NeedXRep-   whether iteration reports are needed or not
'
'Usually  algorithm  returns from  MinASAIteration()  only  when  it  needs
'function/gradient. However, with this function we can let  it  stop  after
'each  iteration  (one  iteration  may  include   more  than  one  function
'evaluation), which is indicated by XUpdated field.
'
'  -- ALGLIB --
'     Copyright 02.04.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinASASetXRep(ByRef State As MinASAState, ByVal NeedXRep As Boolean)
    State.XRep = NeedXRep
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function sets optimization algorithm.
'
'INPUT PARAMETERS:
'    State   -   structure which stores algorithm state between calls and
'                which is used for reverse communication. Must be
'                initialized with MinASACreate()
'    UAType  -   algorithm type:
'                * -1    automatic selection of the best algorithm
'                * 0     DY (Dai and Yuan) algorithm
'                * 1     Hybrid DY-HS algorithm
'
'  -- ALGLIB --
'     Copyright 02.04.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinASASetAlgorithm(ByRef State As MinASAState, _
         ByVal AlgoType As Long)
    If AlgoType = -1# Then
        AlgoType = 1#
    End If
    State.CGType = AlgoType
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function sets maximum step length
'
'INPUT PARAMETERS:
'    State   -   structure which stores algorithm state between calls and
'                which is used for reverse communication. Must be
'                initialized with MinCGCreate()
'    StpMax  -   maximum step length, >=0. Set StpMax to 0.0,  if you don't
'                want to limit step length.
'
'Use this subroutine when you optimize target function which contains exp()
'or  other  fast  growing  functions,  and optimization algorithm makes too
'large  steps  which  leads  to overflow. This function allows us to reject
'steps  that  are  too  large  (and  therefore  expose  us  to the possible
'overflow) without actually calculating function value at the x+stp*d.
'
'  -- ALGLIB --
'     Copyright 02.04.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinASASetStpMax(ByRef State As MinASAState, ByVal StpMax As Double)
    State.StpMax = StpMax
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'One ASA iteration
'
'Called after initialization with MinASACreate.
'See HTML documentation for examples.
'
'INPUT PARAMETERS:
'    State   -   structure which stores algorithm state between calls and
'                which is used for reverse communication. Must be initialized
'                with MinASACreate.
'RESULT:
'* if function returned False, iterative proces has converged.
'  Use MinLBFGSResults() to obtain optimization results.
'* if subroutine returned True, then, depending on structure fields, we
'  have one of the following situations
'
'
'=== FUNC/GRAD REQUEST ===
'State.NeedFG is True => function value/gradient are needed.
'Caller should calculate function value State.F and gradient
'State.G[0..N-1] at State.X[0..N-1] and call MinLBFGSIteration() again.
'
'=== NEW INTERATION IS REPORTED ===
'State.XUpdated is True => one more iteration was made.
'State.X contains current position, State.F contains function value at X.
'You can read info from these fields, but never modify  them  because  they
'contain the only copy of optimization algorithm state.
'
'One and only one of these fields (NeedFG, XUpdated) is true on return. New
'iterations are reported only when reports  are  explicitly  turned  on  by
'MinLBFGSSetXRep() function, so if you never called it, you can expect that
'NeedFG is always True.
'
'
'  -- ALGLIB --
'     Copyright 20.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function MinASAIteration(ByRef State As MinASAState) As Boolean
    Dim Result As Boolean
    Dim N As Long
    Dim i As Long
    Dim BetaK As Double
    Dim V As Double
    Dim VV As Double
    Dim MCINFO As Long
    Dim B As Boolean
    Dim StepFound As Boolean
    Dim DiffCnt As Long
    Dim i_ As Long
    
    '
    ' Reverse communication preparations
    ' I know it looks ugly, but it works the same way
    ' anywhere from C++ to Python.
    '
    ' This code initializes locals by:
    ' * random values determined during code
    '   generation - on first subroutine call
    ' * values from previous call - on subsequent calls
    '
    If State.RState.Stage >= 0# Then
        N = State.RState.IA(0#)
        i = State.RState.IA(1#)
        MCINFO = State.RState.IA(2#)
        DiffCnt = State.RState.IA(3#)
        B = State.RState.BA(0#)
        StepFound = State.RState.BA(1#)
        BetaK = State.RState.RA(0#)
        V = State.RState.RA(1#)
        VV = State.RState.RA(2#)
    Else
        N = -983#
        i = -989#
        MCINFO = -834#
        DiffCnt = 900#
        B = True
        StepFound = False
        BetaK = 214#
        V = -338#
        VV = -686#
    End If
    If State.RState.Stage = 0# Then
        GoTo lbl_0
    End If
    If State.RState.Stage = 1# Then
        GoTo lbl_1
    End If
    If State.RState.Stage = 2# Then
        GoTo lbl_2
    End If
    If State.RState.Stage = 3# Then
        GoTo lbl_3
    End If
    If State.RState.Stage = 4# Then
        GoTo lbl_4
    End If
    If State.RState.Stage = 5# Then
        GoTo lbl_5
    End If
    If State.RState.Stage = 6# Then
        GoTo lbl_6
    End If
    If State.RState.Stage = 7# Then
        GoTo lbl_7
    End If
    If State.RState.Stage = 8# Then
        GoTo lbl_8
    End If
    If State.RState.Stage = 9# Then
        GoTo lbl_9
    End If
    If State.RState.Stage = 10# Then
        GoTo lbl_10
    End If
    If State.RState.Stage = 11# Then
        GoTo lbl_11
    End If
    If State.RState.Stage = 12# Then
        GoTo lbl_12
    End If
    If State.RState.Stage = 13# Then
        GoTo lbl_13
    End If
    If State.RState.Stage = 14# Then
        GoTo lbl_14
    End If
    
    '
    ' Routine body
    '
    
    '
    ' Prepare
    '
    N = State.N
    State.RepTerminationType = 0#
    State.RepIterationsCount = 0#
    State.RepNFEV = 0#
    State.DebugRestartsCount = 0#
    State.CGType = 1#
    For i_ = 0# To N - 1# Step 1
        State.XK(i_) = State.X(i_)
    Next i_
    For i = 0# To N - 1# Step 1
        If State.XK(i) = State.BndL(i) Or State.XK(i) = State.BndU(i) Then
            State.AK(i) = 0#
        Else
            State.AK(i) = 1#
        End If
    Next i
    State.Mu = 0.1
    State.CurAlgo = 0#
    
    '
    ' Calculate F/G, initialize algorithm
    '
    Call ClearRequestFields(State)
    State.NeedFG = True
    State.RState.Stage = 0#
    GoTo lbl_rcomm
lbl_0:
    If Not State.XRep Then
        GoTo lbl_15
    End If
    
    '
    ' progress report
    '
    Call ClearRequestFields(State)
    State.XUpdated = True
    State.RState.Stage = 1#
    GoTo lbl_rcomm
lbl_1:
lbl_15:
    If ASABoundedAntiGradNorm(State) <= State.EpsG Then
        State.RepTerminationType = 4#
        Result = False
        MinASAIteration = Result
        Exit Function
    End If
    State.RepNFEV = State.RepNFEV + 1#
    
    '
    ' Main cycle
    '
    ' At the beginning of new iteration:
    ' * CurAlgo stores current algorithm selector
    ' * State.XK, State.F and State.G store current X/F/G
    ' * State.AK stores current set of active constraints
    '
lbl_17:
    If False Then
        GoTo lbl_18
    End If
    
    '
    ' GPA algorithm
    '
    If State.CurAlgo <> 0# Then
        GoTo lbl_19
    End If
    State.K = 0#
    State.ACount = 0#
lbl_21:
    If False Then
        GoTo lbl_22
    End If
    
    '
    ' Determine Dk = proj(xk - gk)-xk
    '
    For i = 0# To N - 1# Step 1
        State.D(i) = ASABoundVal(State.XK(i) - State.G(i), State.BndL(i), State.BndU(i)) - State.XK(i)
    Next i
    
    '
    ' Armijo line search.
    ' * exact search with alpha=1 is tried first,
    '   'exact' means that we evaluate f() EXACTLY at
    '   bound(x-g,bndl,bndu), without intermediate floating
    '   point operations.
    ' * alpha<1 are tried if explicit search wasn't successful
    ' Result is placed into XN.
    '
    ' Two types of search are needed because we can't
    ' just use second type with alpha=1 because in finite
    ' precision arithmetics (x1-x0)+x0 may differ from x1.
    ' So while x1 is correctly bounded (it lie EXACTLY on
    ' boundary, if it is active), (x1-x0)+x0 may be
    ' not bounded.
    '
    V = 0#
    For i_ = 0# To N - 1# Step 1
        V = V + State.D(i_) * State.G(i_)
    Next i_
    State.DGInit = V
    State.FInit = State.F
    If Not (ASAD1Norm(State) <= State.StpMax Or State.StpMax = 0#) Then
        GoTo lbl_23
    End If
    
    '
    ' Try alpha=1 step first
    '
    For i = 0# To N - 1# Step 1
        State.X(i) = ASABoundVal(State.XK(i) - State.G(i), State.BndL(i), State.BndU(i))
    Next i
    Call ClearRequestFields(State)
    State.NeedFG = True
    State.RState.Stage = 2#
    GoTo lbl_rcomm
lbl_2:
    State.RepNFEV = State.RepNFEV + 1#
    StepFound = State.F <= State.FInit + GPAFTol * State.DGInit
    GoTo lbl_24
lbl_23:
    StepFound = False
lbl_24:
    If Not StepFound Then
        GoTo lbl_25
    End If
    
    '
    ' we are at the boundary(ies)
    '
    For i_ = 0# To N - 1# Step 1
        State.XN(i_) = State.X(i_)
    Next i_
    State.Stp = 1#
    GoTo lbl_26
lbl_25:
    
    '
    ' alpha=1 is too large, try smaller values
    '
    State.Stp = 1#
    Call LinMinNormalizeD(State.D, State.Stp, N)
    State.DGInit = State.DGInit / State.Stp
    State.Stp = GPADecay * State.Stp
    If State.StpMax > 0# Then
        State.Stp = MinReal(State.Stp, State.StpMax)
    End If
lbl_27:
    If False Then
        GoTo lbl_28
    End If
    V = State.Stp
    For i_ = 0# To N - 1# Step 1
        State.X(i_) = State.XK(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        State.X(i_) = State.X(i_) + V * State.D(i_)
    Next i_
    Call ClearRequestFields(State)
    State.NeedFG = True
    State.RState.Stage = 3#
    GoTo lbl_rcomm
lbl_3:
    State.RepNFEV = State.RepNFEV + 1#
    If State.Stp <= STPMIN Then
        GoTo lbl_28
    End If
    If State.F <= State.FInit + State.Stp * GPAFTol * State.DGInit Then
        GoTo lbl_28
    End If
    State.Stp = State.Stp * GPADecay
    GoTo lbl_27
lbl_28:
    For i_ = 0# To N - 1# Step 1
        State.XN(i_) = State.X(i_)
    Next i_
lbl_26:
    State.RepIterationsCount = State.RepIterationsCount + 1#
    If Not State.XRep Then
        GoTo lbl_29
    End If
    
    '
    ' progress report
    '
    Call ClearRequestFields(State)
    State.XUpdated = True
    State.RState.Stage = 4#
    GoTo lbl_rcomm
lbl_4:
lbl_29:
    
    '
    ' Calculate new set of active constraints.
    ' Reset counter if active set was changed.
    ' Prepare for the new iteration
    '
    For i = 0# To N - 1# Step 1
        If State.XN(i) = State.BndL(i) Or State.XN(i) = State.BndU(i) Then
            State.AN(i) = 0#
        Else
            State.AN(i) = 1#
        End If
    Next i
    For i = 0# To N - 1# Step 1
        If State.AK(i) <> State.AN(i) Then
            State.ACount = -1#
            Exit For
        End If
    Next i
    State.ACount = State.ACount + 1#
    For i_ = 0# To N - 1# Step 1
        State.XK(i_) = State.XN(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        State.AK(i_) = State.AN(i_)
    Next i_
    
    '
    ' Stopping conditions
    '
    If Not (State.RepIterationsCount >= State.MaxIts And State.MaxIts > 0#) Then
        GoTo lbl_31
    End If
    
    '
    ' Too many iterations
    '
    State.RepTerminationType = 5#
    If Not State.XRep Then
        GoTo lbl_33
    End If
    Call ClearRequestFields(State)
    State.XUpdated = True
    State.RState.Stage = 5#
    GoTo lbl_rcomm
lbl_5:
lbl_33:
    Result = False
    MinASAIteration = Result
    Exit Function
lbl_31:
    If ASABoundedAntiGradNorm(State) > State.EpsG Then
        GoTo lbl_35
    End If
    
    '
    ' Gradient is small enough
    '
    State.RepTerminationType = 4#
    If Not State.XRep Then
        GoTo lbl_37
    End If
    Call ClearRequestFields(State)
    State.XUpdated = True
    State.RState.Stage = 6#
    GoTo lbl_rcomm
lbl_6:
lbl_37:
    Result = False
    MinASAIteration = Result
    Exit Function
lbl_35:
    V = 0#
    For i_ = 0# To N - 1# Step 1
        V = V + State.D(i_) * State.D(i_)
    Next i_
    If Sqr(V) * State.Stp > State.EpsX Then
        GoTo lbl_39
    End If
    
    '
    ' Step size is too small, no further improvement is
    ' possible
    '
    State.RepTerminationType = 2#
    If Not State.XRep Then
        GoTo lbl_41
    End If
    Call ClearRequestFields(State)
    State.XUpdated = True
    State.RState.Stage = 7#
    GoTo lbl_rcomm
lbl_7:
lbl_41:
    Result = False
    MinASAIteration = Result
    Exit Function
lbl_39:
    If State.FInit - State.F > State.EpsF * MaxReal(Abs(State.FInit), MaxReal(Abs(State.F), 1#)) Then
        GoTo lbl_43
    End If
    
    '
    ' F(k+1)-F(k) is small enough
    '
    State.RepTerminationType = 1#
    If Not State.XRep Then
        GoTo lbl_45
    End If
    Call ClearRequestFields(State)
    State.XUpdated = True
    State.RState.Stage = 8#
    GoTo lbl_rcomm
lbl_8:
lbl_45:
    Result = False
    MinASAIteration = Result
    Exit Function
lbl_43:
    
    '
    ' Decide - should we switch algorithm or not
    '
    If ASAUIsEmpty(State) Then
        If ASAGINorm(State) >= State.Mu * ASAD1Norm(State) Then
            State.CurAlgo = 1#
            GoTo lbl_22
        Else
            State.Mu = State.Mu * ASARho
        End If
    Else
        If State.ACount = N1 Then
            If ASAGINorm(State) >= State.Mu * ASAD1Norm(State) Then
                State.CurAlgo = 1#
                GoTo lbl_22
            End If
        End If
    End If
    
    '
    ' Next iteration
    '
    State.K = State.K + 1#
    GoTo lbl_21
lbl_22:
lbl_19:
    
    '
    ' CG algorithm
    '
    If State.CurAlgo <> 1# Then
        GoTo lbl_47
    End If
    
    '
    ' first, check that there are non-active constraints.
    ' move to GPA algorithm, if all constraints are active
    '
    B = True
    For i = 0# To N - 1# Step 1
        If State.AK(i) <> 0# Then
            B = False
            Exit For
        End If
    Next i
    If B Then
        State.CurAlgo = 0#
        GoTo lbl_17
    End If
    
    '
    ' CG iterations
    '
    State.Fold = State.F
    For i_ = 0# To N - 1# Step 1
        State.XK(i_) = State.X(i_)
    Next i_
    For i = 0# To N - 1# Step 1
        State.DK(i) = -(State.G(i) * State.AK(i))
        State.GC(i) = State.G(i) * State.AK(i)
    Next i
lbl_49:
    If False Then
        GoTo lbl_50
    End If
    
    '
    ' Store G[k] for later calculation of Y[k]
    '
    For i = 0# To N - 1# Step 1
        State.YK(i) = -State.GC(i)
    Next i
    
    '
    ' Make a CG step in direction given by DK[]:
    ' * calculate step. Step projection into feasible set
    '   is used. It has several benefits: a) step may be
    '   found with usual line search, b) multiple constraints
    '   may be activated with one step, c) activated constraints
    '   are detected in a natural way - just compare x[i] with
    '   bounds
    ' * update active set, set B to True, if there
    '   were changes in the set.
    '
    For i_ = 0# To N - 1# Step 1
        State.D(i_) = State.DK(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        State.XN(i_) = State.XK(i_)
    Next i_
    State.MCStage = 0#
    State.Stp = 1#
    Call LinMinNormalizeD(State.D, State.Stp, N)
    Call MCSRCH(N, State.XN, State.F, State.GC, State.D, State.Stp, State.StpMax, MCINFO, State.NFEV, State.WORK, State.LState, State.MCStage)
lbl_51:
    If State.MCStage = 0# Then
        GoTo lbl_52
    End If
    
    '
    ' preprocess data: bound State.XN so it belongs to the
    ' feasible set and store it in the State.X
    '
    For i = 0# To N - 1# Step 1
        State.X(i) = ASABoundVal(State.XN(i), State.BndL(i), State.BndU(i))
    Next i
    
    '
    ' RComm
    '
    Call ClearRequestFields(State)
    State.NeedFG = True
    State.RState.Stage = 9#
    GoTo lbl_rcomm
lbl_9:
    
    '
    ' postprocess data: zero components of G corresponding to
    ' the active constraints
    '
    For i = 0# To N - 1# Step 1
        If State.X(i) = State.BndL(i) Or State.X(i) = State.BndU(i) Then
            State.GC(i) = 0#
        Else
            State.GC(i) = State.G(i)
        End If
    Next i
    Call MCSRCH(N, State.XN, State.F, State.GC, State.D, State.Stp, State.StpMax, MCINFO, State.NFEV, State.WORK, State.LState, State.MCStage)
    GoTo lbl_51
lbl_52:
    DiffCnt = 0#
    For i = 0# To N - 1# Step 1
        
        '
        ' XN contains unprojected result, project it,
        ' save copy to X (will be used for progress reporting)
        '
        State.XN(i) = ASABoundVal(State.XN(i), State.BndL(i), State.BndU(i))
        
        '
        ' update active set
        '
        If State.XN(i) = State.BndL(i) Or State.XN(i) = State.BndU(i) Then
            State.AN(i) = 0#
        Else
            State.AN(i) = 1#
        End If
        If State.AN(i) <> State.AK(i) Then
            DiffCnt = DiffCnt + 1#
        End If
        State.AK(i) = State.AN(i)
    Next i
    For i_ = 0# To N - 1# Step 1
        State.XK(i_) = State.XN(i_)
    Next i_
    State.RepNFEV = State.RepNFEV + State.NFEV
    State.RepIterationsCount = State.RepIterationsCount + 1#
    If Not State.XRep Then
        GoTo lbl_53
    End If
    
    '
    ' progress report
    '
    Call ClearRequestFields(State)
    State.XUpdated = True
    State.RState.Stage = 10#
    GoTo lbl_rcomm
lbl_10:
lbl_53:
    
    '
    ' Check stopping conditions.
    '
    If ASABoundedAntiGradNorm(State) > State.EpsG Then
        GoTo lbl_55
    End If
    
    '
    ' Gradient is small enough
    '
    State.RepTerminationType = 4#
    If Not State.XRep Then
        GoTo lbl_57
    End If
    Call ClearRequestFields(State)
    State.XUpdated = True
    State.RState.Stage = 11#
    GoTo lbl_rcomm
lbl_11:
lbl_57:
    Result = False
    MinASAIteration = Result
    Exit Function
lbl_55:
    If Not (State.RepIterationsCount >= State.MaxIts And State.MaxIts > 0#) Then
        GoTo lbl_59
    End If
    
    '
    ' Too many iterations
    '
    State.RepTerminationType = 5#
    If Not State.XRep Then
        GoTo lbl_61
    End If
    Call ClearRequestFields(State)
    State.XUpdated = True
    State.RState.Stage = 12#
    GoTo lbl_rcomm
lbl_12:
lbl_61:
    Result = False
    MinASAIteration = Result
    Exit Function
lbl_59:
    If Not (ASAGINorm(State) >= State.Mu * ASAD1Norm(State) And DiffCnt = 0#) Then
        GoTo lbl_63
    End If
    
    '
    ' These conditions are explicitly or implicitly
    ' related to the current step size and influenced
    ' by changes in the active constraints.
    '
    ' For these reasons they are checked only when we don't
    ' want to 'unstick' at the end of the iteration and there
    ' were no changes in the active set.
    '
    ' NOTE: consition |G|>=Mu*|D1| must be exactly opposite
    ' to the condition used to switch back to GPA. At least
    ' one inequality must be strict, otherwise infinite cycle
    ' may occur when |G|=Mu*|D1| (we DON'T test stopping
    ' conditions and we DON'T switch to GPA, so we cycle
    ' indefinitely).
    '
    If State.Fold - State.F > State.EpsF * MaxReal(Abs(State.Fold), MaxReal(Abs(State.F), 1#)) Then
        GoTo lbl_65
    End If
    
    '
    ' F(k+1)-F(k) is small enough
    '
    State.RepTerminationType = 1#
    If Not State.XRep Then
        GoTo lbl_67
    End If
    Call ClearRequestFields(State)
    State.XUpdated = True
    State.RState.Stage = 13#
    GoTo lbl_rcomm
lbl_13:
lbl_67:
    Result = False
    MinASAIteration = Result
    Exit Function
lbl_65:
    V = 0#
    For i_ = 0# To N - 1# Step 1
        V = V + State.D(i_) * State.D(i_)
    Next i_
    If Sqr(V) * State.Stp > State.EpsX Then
        GoTo lbl_69
    End If
    
    '
    ' X(k+1)-X(k) is small enough
    '
    State.RepTerminationType = 2#
    If Not State.XRep Then
        GoTo lbl_71
    End If
    Call ClearRequestFields(State)
    State.XUpdated = True
    State.RState.Stage = 14#
    GoTo lbl_rcomm
lbl_14:
lbl_71:
    Result = False
    MinASAIteration = Result
    Exit Function
lbl_69:
lbl_63:
    
    '
    ' Check conditions for switching
    '
    If ASAGINorm(State) < State.Mu * ASAD1Norm(State) Then
        State.CurAlgo = 0#
        GoTo lbl_50
    End If
    If DiffCnt > 0# Then
        If ASAUIsEmpty(State) Or DiffCnt >= N2 Then
            State.CurAlgo = 1#
        Else
            State.CurAlgo = 0#
        End If
        GoTo lbl_50
    End If
    
    '
    ' Calculate D(k+1)
    '
    ' Line search may result in:
    ' * maximum feasible step being taken (already processed)
    ' * point satisfying Wolfe conditions
    ' * some kind of error (CG is restarted by assigning 0.0 to Beta)
    '
    If MCINFO = 1# Then
        
        '
        ' Standard Wolfe conditions are satisfied:
        ' * calculate Y[K] and BetaK
        '
        For i_ = 0# To N - 1# Step 1
            State.YK(i_) = State.YK(i_) + State.GC(i_)
        Next i_
        VV = 0#
        For i_ = 0# To N - 1# Step 1
            VV = VV + State.YK(i_) * State.DK(i_)
        Next i_
        V = 0#
        For i_ = 0# To N - 1# Step 1
            V = V + State.GC(i_) * State.GC(i_)
        Next i_
        State.BetaDY = V / VV
        V = 0#
        For i_ = 0# To N - 1# Step 1
            V = V + State.GC(i_) * State.YK(i_)
        Next i_
        State.BetaHS = V / VV
        If State.CGType = 0# Then
            BetaK = State.BetaDY
        End If
        If State.CGType = 1# Then
            BetaK = MaxReal(0#, MinReal(State.BetaDY, State.BetaHS))
        End If
    Else
        
        '
        ' Something is wrong (may be function is too wild or too flat).
        '
        ' We'll set BetaK=0, which will restart CG algorithm.
        ' We can stop later (during normal checks) if stopping conditions are met.
        '
        BetaK = 0#
        State.DebugRestartsCount = State.DebugRestartsCount + 1#
    End If
    For i_ = 0# To N - 1# Step 1
        State.DN(i_) = -State.GC(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        State.DN(i_) = State.DN(i_) + BetaK * State.DK(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        State.DK(i_) = State.DN(i_)
    Next i_
    
    '
    ' update other information
    '
    State.Fold = State.F
    State.K = State.K + 1#
    GoTo lbl_49
lbl_50:
lbl_47:
    GoTo lbl_17
lbl_18:
    Result = False
    MinASAIteration = Result
    Exit Function
    
    '
    ' Saving state
    '
lbl_rcomm:
    Result = True
    State.RState.IA(0#) = N
    State.RState.IA(1#) = i
    State.RState.IA(2#) = MCINFO
    State.RState.IA(3#) = DiffCnt
    State.RState.BA(0#) = B
    State.RState.BA(1#) = StepFound
    State.RState.RA(0#) = BetaK
    State.RState.RA(1#) = V
    State.RState.RA(2#) = VV
    MinASAIteration = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Conjugate gradient results
'
'Called after MinASA returned False.
'
'INPUT PARAMETERS:
'    State   -   algorithm state (used by MinASAIteration).
'
'OUTPUT PARAMETERS:
'    X       -   array[0..N-1], solution
'    Rep     -   optimization report:
'                * Rep.TerminationType completetion code:
'                    * -2    rounding errors prevent further improvement.
'                            X contains best point found.
'                    * -1    incorrect parameters were specified
'                    *  1    relative function improvement is no more than
'                            EpsF.
'                    *  2    relative step is no more than EpsX.
'                    *  4    gradient norm is no more than EpsG
'                    *  5    MaxIts steps was taken
'                    *  7    stopping conditions are too stringent,
'                            further improvement is impossible
'                * Rep.IterationsCount contains iterations count
'                * NFEV countains number of function calculations
'                * ActiveConstraints contains number of active constraints
'
'  -- ALGLIB --
'     Copyright 20.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinASAResults(ByRef State As MinASAState, _
         ByRef X() As Double, _
         ByRef Rep As MinASAReport)
    Dim i As Long
    Dim i_ As Long
    ReDim X(0# To State.N - 1#)
    For i_ = 0# To State.N - 1# Step 1
        X(i_) = State.X(i_)
    Next i_
    Rep.IterationsCount = State.RepIterationsCount
    Rep.NFEV = State.RepNFEV
    Rep.TerminationType = State.RepTerminationType
    Rep.ActiveConstraints = 0#
    For i = 0# To State.N - 1# Step 1
        If State.AK(i) = 0# Then
            Rep.ActiveConstraints = Rep.ActiveConstraints + 1#
        End If
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''bound' value: map X to [B1,B2]
'
'  -- ALGLIB --
'     Copyright 20.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function ASABoundVal(ByVal X As Double, _
         ByVal b1 As Double, _
         ByVal b2 As Double) As Double
    Dim Result As Double
    If X <= b1 Then
        Result = b1
        ASABoundVal = Result
        Exit Function
    End If
    If X >= b2 Then
        Result = b2
        ASABoundVal = Result
        Exit Function
    End If
    Result = X
    ASABoundVal = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Returns norm of bounded anti-gradient.
'
'Bounded antigradient is a vector obtained from  anti-gradient  by  zeroing
'components which point outwards:
'    result = norm(v)
'    v[i]=0     if ((-g[i]<0)and(x[i]=bndl[i])) or
'                  ((-g[i]>0)and(x[i]=bndu[i]))
'    v[i]=-g[i] otherwise
'
'This function may be used to check a stopping criterion.
'
'  -- ALGLIB --
'     Copyright 20.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function ASABoundedAntiGradNorm(ByRef State As MinASAState) As Double
    Dim Result As Double
    Dim i As Long
    Dim V As Double
    Result = 0#
    For i = 0# To State.N - 1# Step 1
        V = -State.G(i)
        If State.X(i) = State.BndL(i) And -State.G(i) < 0# Then
            V = 0#
        End If
        If State.X(i) = State.BndU(i) And -State.G(i) > 0# Then
            V = 0#
        End If
        Result = Result + Square(V)
    Next i
    Result = Sqr(Result)
    ASABoundedAntiGradNorm = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Returns norm of GI(x).
'
'GI(x) is  a  gradient  vector  whose  components  associated  with  active
'constraints are zeroed. It  differs  from  bounded  anti-gradient  because
'components  of   GI(x)   are   zeroed  independently  of  sign(g[i]),  and
'anti-gradient's components are zeroed with respect to both constraint  and
'sign.
'
'  -- ALGLIB --
'     Copyright 20.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function ASAGINorm(ByRef State As MinASAState) As Double
    Dim Result As Double
    Dim i As Long
    Dim V As Double
    Result = 0#
    For i = 0# To State.N - 1# Step 1
        If State.X(i) <> State.BndL(i) And State.X(i) <> State.BndU(i) Then
            Result = Result + Square(State.G(i))
        End If
    Next i
    Result = Sqr(Result)
    ASAGINorm = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Returns norm(D1(State.X))
'
'For a meaning of D1 see 'NEW ACTIVE SET ALGORITHM FOR BOX CONSTRAINED
'OPTIMIZATION' by WILLIAM W. HAGER AND HONGCHAO ZHANG.
'
'  -- ALGLIB --
'     Copyright 20.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function ASAD1Norm(ByRef State As MinASAState) As Double
    Dim Result As Double
    Dim i As Long
    Result = 0#
    For i = 0# To State.N - 1# Step 1
        Result = Result + Square(ASABoundVal(State.X(i) - State.G(i), State.BndL(i), State.BndU(i)) - State.X(i))
    Next i
    Result = Sqr(Result)
    ASAD1Norm = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Returns True, if U set is empty.
'
'* State.X is used as point,
'* State.G - as gradient,
'* D is calculated within function (because State.D may have different
'  meaning depending on current optimization algorithm)
'
'For a meaning of U see 'NEW ACTIVE SET ALGORITHM FOR BOX CONSTRAINED
'OPTIMIZATION' by WILLIAM W. HAGER AND HONGCHAO ZHANG.
'
'  -- ALGLIB --
'     Copyright 20.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function ASAUIsEmpty(ByRef State As MinASAState) As Boolean
    Dim Result As Boolean
    Dim i As Long
    Dim D As Double
    Dim D2 As Double
    Dim D32 As Double
    D = ASAD1Norm(State)
    D2 = Sqr(D)
    D32 = D * D2
    Result = True
    For i = 0# To State.N - 1# Step 1
        If Abs(State.G(i)) >= D2 And MinReal(State.X(i) - State.BndL(i), State.BndU(i) - State.X(i)) >= D32 Then
            Result = False
            ASAUIsEmpty = Result
            Exit Function
        End If
    Next i
    ASAUIsEmpty = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Returns True, if optimizer "want  to  unstick"  from  one  of  the  active
'constraints, i.e. there is such active constraint with index I that either
'lower bound is active and g[i]<0, or upper bound is active and g[i]>0.
'
'State.X is used as current point, State.X - as gradient.
'  -- ALGLIB --
'     Copyright 20.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function ASAWantToUnstick(ByRef State As MinASAState) As Boolean
    Dim Result As Boolean
    Dim i As Long
    Result = False
    For i = 0# To State.N - 1# Step 1
        If State.X(i) = State.BndL(i) And State.G(i) < 0# Then
            Result = True
        End If
        If State.X(i) = State.BndU(i) And State.G(i) > 0# Then
            Result = True
        End If
        If Result Then
            ASAWantToUnstick = Result
            Exit Function
        End If
    Next i
    ASAWantToUnstick = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Clears request fileds (to be sure that we don't forgot to clear something)
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub ClearRequestFields(ByRef State As MinASAState)
    State.NeedFG = False
    State.XUpdated = False
End Sub

