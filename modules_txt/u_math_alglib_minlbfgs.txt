''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2007-2008, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Data types
Public Type MinLBFGSState
    N As Long
    M As Long
    EpsG As Double
    EpsF As Double
    EpsX As Double
    MaxIts As Long
    Flags As Long
    XRep As Boolean
    STPMAX As Double
    NFEV As Long
    MCStage As Long
    K As Long
    Q As Long
    P As Long
    Rho() As Double
    Y() As Double
    S() As Double
    THETA() As Double
    D() As Double
    STP As Double
    WORK() As Double
    FOld As Double
    GammaK As Double
    X() As Double
    F As Double
    G() As Double
    NeedFG As Boolean
    XUpdated As Boolean
    RState As RCommState
    RepIterationsCount As Long
    RepNFEV As Long
    RepTerminationType As Long
    LState As LINMINState
End Type
Public Type MinLBFGSReport
    IterationsCount As Long
    NFEV As Long
    TerminationType As Long
End Type
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'        LIMITED MEMORY BFGS METHOD FOR LARGE SCALE OPTIMIZATION
'
'The subroutine minimizes function F(x) of N arguments by  using  a  quasi-
'Newton method (LBFGS scheme) which is optimized to use  a  minimum  amount
'of memory.
'
'The subroutine generates the approximation of an inverse Hessian matrix by
'using information about the last M steps of the algorithm  (instead of N).
'It lessens a required amount of memory from a value  of  order  N^2  to  a
'value of order 2*N*M.
'
'INPUT PARAMETERS:
'    N       -   problem dimension. N>0
'    M       -   number of corrections in the BFGS scheme of Hessian
'                approximation update. Recommended value:  3<=M<=7. The smaller
'                value causes worse convergence, the bigger will  not  cause  a
'                considerably better convergence, but will cause a fall in  the
'                performance. M<=N.
'    X       -   initial solution approximation, array[0..N-1].
'
'OUTPUT PARAMETERS:
'    State   -   structure used for reverse communication.
'
'This function  initializes  State   structure  with  default  optimization
'parameters (stopping conditions, step size, etc.). Use MinLBFGSSet??????()
'functions to tune optimization parameters.
'
'After   all   optimization   parameters   are   tuned,   you   should  use
'MinLBFGSIteration() function to advance algorithm iterations.
'
'NOTES:
'
'1. you may tune stopping conditions with MinLBFGSSetCond() function
'2. if target function contains exp() or other fast growing functions,  and
'   optimization algorithm makes too large steps which leads  to  overflow,
'   use MinLBFGSSetStpMax() function to bound algorithm's  steps.  However,
'   L-BFGS rarely needs such a tuning.
'
'
'  -- ALGLIB --
'     Copyright 02.04.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinLBFGSCreate(ByVal N As Long, _
         ByVal M As Long, _
         ByRef X() As Double, _
         ByRef State As MinLBFGSState)
    Call MinLBFGSCreateX(N, M, X, 0#, State)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function sets stopping conditions for L-BFGS optimization algorithm.
'
'INPUT PARAMETERS:
'    State   -   structure which stores algorithm state between calls and
'                which is used for reverse communication. Must be initialized
'                with MinLBFGSCreate()
'    EpsG    -   >=0
'                The  subroutine  finishes  its  work   if   the  condition
'                ||G||<EpsG is satisfied, where ||.|| means Euclidian norm,
'                G - gradient.
'    EpsF    -   >=0
'                The  subroutine  finishes  its work if on k+1-th iteration
'                the  condition  |F(k+1)-F(k)|<=EpsF*max{|F(k)|,|F(k+1)|,1}
'                is satisfied.
'    EpsX    -   >=0
'                The subroutine finishes its work if  on  k+1-th  iteration
'                the condition |X(k+1)-X(k)| <= EpsX is fulfilled.
'    MaxIts  -   maximum number of iterations. If MaxIts=0, the  number  of
'                iterations is unlimited.
'
'Passing EpsG=0, EpsF=0, EpsX=0 and MaxIts=0 (simultaneously) will lead to
'automatic stopping criterion selection (small EpsX).
'
'  -- ALGLIB --
'     Copyright 02.04.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinLBFGSSetCond(ByRef State As MinLBFGSState, _
         ByVal EpsG As Double, _
         ByVal EpsF As Double, _
         ByVal EpsX As Double, _
         ByVal MaxIts As Long)
    If EpsG = 0# And EpsF = 0# And EpsX = 0# And MaxIts = 0# Then
        EpsX = 0.000001
    End If
    State.EpsG = EpsG
    State.EpsF = EpsF
    State.EpsX = EpsX
    State.MaxIts = MaxIts
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function turns on/off reporting.
'
'INPUT PARAMETERS:
'    State   -   structure which stores algorithm state between calls and
'                which is used for reverse communication. Must be
'                initialized with MinLBFGSCreate()
'    NeedXRep-   whether iteration reports are needed or not
'
'Usually algorithm returns  from  MinLBFGSIteration()  only when  it  needs
'function/gradient/ (which is indicated by NeedFG field. However, with this
'function we can let it  stop  after  each  iteration  (one  iteration  may
'include more than one function evaluation), which is indicated by XUpdated
'field.
'
'
'  -- ALGLIB --
'     Copyright 02.04.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinLBFGSSetXRep(ByRef State As MinLBFGSState, _
         ByVal NeedXRep As Boolean)
    State.XRep = NeedXRep
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function sets maximum step length
'
'INPUT PARAMETERS:
'    State   -   structure which stores algorithm state between calls and
'                which is used for reverse communication. Must be
'                initialized with MinLBFGSCreate()
'    StpMax  -   maximum step length, >=0. Set StpMax to 0.0,  if you don't
'                want to limit step length.
'
'Use this subroutine when you optimize target function which contains exp()
'or  other  fast  growing  functions,  and optimization algorithm makes too
'large  steps  which  leads  to overflow. This function allows us to reject
'steps  that  are  too  large  (and  therefore  expose  us  to the possible
'overflow) without actually calculating function value at the x+stp*d.
'
'  -- ALGLIB --
'     Copyright 02.04.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinLBFGSSetStpMax(ByRef State As MinLBFGSState, _
         ByVal STPMAX As Double)
    State.STPMAX = STPMAX
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Extended subroutine for internal use only.
'
'Accepts additional parameters:
'
'    Flags - additional settings:
'            * Flags = 0     means no additional settings
'            * Flags = 1     "do not allocate memory". used when solving
'                            a many subsequent tasks with  same N/M  values.
'                            First  call MUST  be without this flag bit set,
'                            subsequent  calls   of   MinLBFGS   with   same
'                            MinLBFGSState structure can set Flags to 1.
'
'  -- ALGLIB --
'     Copyright 02.04.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinLBFGSCreateX(ByVal N As Long, _
         ByVal M As Long, _
         ByRef X() As Double, _
         ByVal Flags As Long, _
         ByRef State As MinLBFGSState)
    Dim AllocateMem As Boolean
    Dim i_ As Long
    
    '
    ' Initialize
    '
    State.N = N
    State.M = M
    State.Flags = Flags
    AllocateMem = Flags Mod 2# = 0#
    Flags = Flags \ 2#
    If AllocateMem Then
        ReDim State.Rho(0# To M - 1#)
        ReDim State.THETA(0# To M - 1#)
        ReDim State.Y(0# To M - 1#, 0# To N - 1#)
        ReDim State.S(0# To M - 1#, 0# To N - 1#)
        ReDim State.D(0# To N - 1#)
        ReDim State.X(0# To N - 1#)
        ReDim State.G(0# To N - 1#)
        ReDim State.WORK(0# To N - 1#)
    End If
    Call MinLBFGSSetCond(State, 0#, 0#, 0#, 0#)
    Call MinLBFGSSetXRep(State, False)
    Call MinLBFGSSetStpMax(State, 0#)
    
    '
    ' Prepare first run
    '
    State.K = 0#
    For i_ = 0# To N - 1# Step 1
        State.X(i_) = X(i_)
    Next i_
    ReDim State.RState.IA(0# To 6#)
    ReDim State.RState.RA(0# To 4#)
    State.RState.Stage = -1#
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'L-BFGS iterations
'
'Called after initialization with MinLBFGSCreate() function.
'
'INPUT PARAMETERS:
'    State   -   structure which stores algorithm state between calls and
'                which is used for reverse communication. Must be initialized
'                with MinLBFGSCreate()
'
'RESULT:
'* if function returned False, iterative proces has converged.
'  Use MinLBFGSResults() to obtain optimization results.
'* if subroutine returned True, then, depending on structure fields, we
'  have one of the following situations
'
'
'=== FUNC/GRAD REQUEST ===
'State.NeedFG is True => function value/gradient are needed.
'Caller should calculate function value State.F and gradient
'State.G[0..N-1] at State.X[0..N-1] and call MinLBFGSIteration() again.
'
'=== NEW INTERATION IS REPORTED ===
'State.XUpdated is True => one more iteration was made.
'State.X contains current position, State.F contains function value at X.
'You can read info from these fields, but never modify  them  because  they
'contain the only copy of optimization algorithm state.
'
'
'One and only one of these fields (NeedFG, XUpdated) is true on return. New
'iterations are reported only when reports  are  explicitly  turned  on  by
'MinLBFGSSetXRep() function, so if you never called it, you can expect that
'NeedFG is always True.
'
'
'  -- ALGLIB --
'     Copyright 20.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function MinLBFGSIteration(ByRef State As MinLBFGSState) As Boolean
    Dim Result As Boolean
    Dim N As Long
    Dim M As Long
    Dim MaxIts As Long
    Dim EpsF As Double
    Dim EpsG As Double
    Dim EpsX As Double
    Dim I As Long
    Dim J As Long
    Dim IC As Long
    Dim MCINFO As Long
    Dim V As Double
    Dim VV As Double
    Dim i_ As Long
    
    '
    ' Reverse communication preparations
    ' I know it looks ugly, but it works the same way
    ' anywhere from C++ to Python.
    '
    ' This code initializes locals by:
    ' * random values determined during code
    '   generation - on first subroutine call
    ' * values from previous call - on subsequent calls
    '
    If State.RState.Stage >= 0# Then
        N = State.RState.IA(0#)
        M = State.RState.IA(1#)
        MaxIts = State.RState.IA(2#)
        I = State.RState.IA(3#)
        J = State.RState.IA(4#)
        IC = State.RState.IA(5#)
        MCINFO = State.RState.IA(6#)
        EpsF = State.RState.RA(0#)
        EpsG = State.RState.RA(1#)
        EpsX = State.RState.RA(2#)
        V = State.RState.RA(3#)
        VV = State.RState.RA(4#)
    Else
        N = -983#
        M = -989#
        MaxIts = -834#
        I = 900#
        J = -287#
        IC = 364#
        MCINFO = 214#
        EpsF = -338#
        EpsG = -686#
        EpsX = 912#
        V = 585#
        VV = 497#
    End If
    If State.RState.Stage = 0# Then
        GoTo lbl_0
    End If
    If State.RState.Stage = 1# Then
        GoTo lbl_1
    End If
    If State.RState.Stage = 2# Then
        GoTo lbl_2
    End If
    If State.RState.Stage = 3# Then
        GoTo lbl_3
    End If
    
    '
    ' Routine body
    '
    
    '
    ' Unload frequently used variables from State structure
    ' (just for typing convinience)
    '
    N = State.N
    M = State.M
    EpsG = State.EpsG
    EpsF = State.EpsF
    EpsX = State.EpsX
    MaxIts = State.MaxIts
    State.RepTerminationType = 0#
    State.RepIterationsCount = 0#
    State.RepNFEV = 0#
    
    '
    ' Calculate F/G at the initial point
    '
    Call ClearRequestFields(State)
    State.NeedFG = True
    State.RState.Stage = 0#
    GoTo lbl_rcomm
lbl_0:
    If Not State.XRep Then
        GoTo lbl_4
    End If
    Call ClearRequestFields(State)
    State.XUpdated = True
    State.RState.Stage = 1#
    GoTo lbl_rcomm
lbl_1:
lbl_4:
    State.RepNFEV = 1#
    State.FOld = State.F
    V = 0#
    For i_ = 0# To N - 1# Step 1
        V = V + State.G(i_) * State.G(i_)
    Next i_
    V = Sqr(V)
    If V <= EpsG Then
        State.RepTerminationType = 4#
        Result = False
        MinLBFGSIteration = Result
        Exit Function
    End If
    
    '
    ' Choose initial step
    '
    If State.STPMAX = 0# Then
        State.STP = MinReal(1# / V, 1#)
    Else
        State.STP = MinReal(1# / V, State.STPMAX)
    End If
    For i_ = 0# To N - 1# Step 1
        State.D(i_) = -State.G(i_)
    Next i_
    
    '
    ' Main cycle
    '
lbl_6:
    If False Then
        GoTo lbl_7
    End If
    
    '
    ' Main cycle: prepare to 1-D line search
    '
    State.P = State.K Mod M
    State.Q = MinInt(State.K, M - 1#)
    
    '
    ' Store X[k], G[k]
    '
    For i_ = 0# To N - 1# Step 1
        State.S(State.P, i_) = -State.X(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        State.Y(State.P, i_) = -State.G(i_)
    Next i_
    
    '
    ' Minimize F(x+alpha*d)
    ' Calculate S[k], Y[k]
    '
    State.MCStage = 0#
    If State.K <> 0# Then
        State.STP = 1#
    End If
    Call LinMinNormalizeD(State.D, State.STP, N)
    Call MCSRCH(N, State.X, State.F, State.G, State.D, State.STP, State.STPMAX, MCINFO, State.NFEV, State.WORK, State.LState, State.MCStage)
lbl_8:
    If State.MCStage = 0# Then
        GoTo lbl_9
    End If
    Call ClearRequestFields(State)
    State.NeedFG = True
    State.RState.Stage = 2#
    GoTo lbl_rcomm
lbl_2:
    Call MCSRCH(N, State.X, State.F, State.G, State.D, State.STP, State.STPMAX, MCINFO, State.NFEV, State.WORK, State.LState, State.MCStage)
    GoTo lbl_8
lbl_9:
    If Not State.XRep Then
        GoTo lbl_10
    End If
    
    '
    ' report
    '
    Call ClearRequestFields(State)
    State.XUpdated = True
    State.RState.Stage = 3#
    GoTo lbl_rcomm
lbl_3:
lbl_10:
    State.RepNFEV = State.RepNFEV + State.NFEV
    State.RepIterationsCount = State.RepIterationsCount + 1#
    For i_ = 0# To N - 1# Step 1
        State.S(State.P, i_) = State.S(State.P, i_) + State.X(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        State.Y(State.P, i_) = State.Y(State.P, i_) + State.G(i_)
    Next i_
    
    '
    ' Stopping conditions
    '
    If State.RepIterationsCount >= MaxIts And MaxIts > 0# Then
        
        '
        ' Too many iterations
        '
        State.RepTerminationType = 5#
        Result = False
        MinLBFGSIteration = Result
        Exit Function
    End If
    V = 0#
    For i_ = 0# To N - 1# Step 1
        V = V + State.G(i_) * State.G(i_)
    Next i_
    If Sqr(V) <= EpsG Then
        
        '
        ' Gradient is small enough
        '
        State.RepTerminationType = 4#
        Result = False
        MinLBFGSIteration = Result
        Exit Function
    End If
    If State.FOld - State.F <= EpsF * MaxReal(Abs(State.FOld), MaxReal(Abs(State.F), 1#)) Then
        
        '
        ' F(k+1)-F(k) is small enough
        '
        State.RepTerminationType = 1#
        Result = False
        MinLBFGSIteration = Result
        Exit Function
    End If
    V = 0#
    For i_ = 0# To N - 1# Step 1
        V = V + State.S(State.P, i_) * State.S(State.P, i_)
    Next i_
    If Sqr(V) <= EpsX Then
        
        '
        ' X(k+1)-X(k) is small enough
        '
        State.RepTerminationType = 2#
        Result = False
        MinLBFGSIteration = Result
        Exit Function
    End If
    
    '
    ' If Wolfe conditions are satisfied, we can update
    ' limited memory model.
    '
    ' However, if conditions are not satisfied (NFEV limit is met,
    ' function is too wild, ...), we'll skip L-BFGS update
    '
    If MCINFO <> 1# Then
        
        '
        ' Skip update.
        '
        ' In such cases we'll initialize search direction by
        ' antigradient vector, because it  leads to more
        ' transparent code with less number of special cases
        '
        State.FOld = State.F
        For i_ = 0# To N - 1# Step 1
            State.D(i_) = -State.G(i_)
        Next i_
    Else
        
        '
        ' Calculate Rho[k], GammaK
        '
        V = 0#
        For i_ = 0# To N - 1# Step 1
            V = V + State.Y(State.P, i_) * State.S(State.P, i_)
        Next i_
        VV = 0#
        For i_ = 0# To N - 1# Step 1
            VV = VV + State.Y(State.P, i_) * State.Y(State.P, i_)
        Next i_
        If V = 0# Or VV = 0# Then
            
            '
            ' Rounding errors make further iterations impossible.
            '
            State.RepTerminationType = -2#
            Result = False
            MinLBFGSIteration = Result
            Exit Function
        End If
        State.Rho(State.P) = 1# / V
        State.GammaK = V / VV
        
        '
        '  Calculate d(k+1) = -H(k+1)*g(k+1)
        '
        '  for I:=K downto K-Q do
        '      V = s(i)^T * work(iteration:I)
        '      theta(i) = V
        '      work(iteration:I+1) = work(iteration:I) - V*Rho(i)*y(i)
        '  work(last iteration) = H0*work(last iteration)
        '  for I:=K-Q to K do
        '      V = y(i)^T*work(iteration:I)
        '      work(iteration:I+1) = work(iteration:I) +(-V+theta(i))*Rho(i)*s(i)
        '
        '  NOW WORK CONTAINS d(k+1)
        '
        For i_ = 0# To N - 1# Step 1
            State.WORK(i_) = State.G(i_)
        Next i_
        For I = State.K To State.K - State.Q Step -1
            IC = I Mod M
            V = 0#
            For i_ = 0# To N - 1# Step 1
                V = V + State.S(IC, i_) * State.WORK(i_)
            Next i_
            State.THETA(IC) = V
            VV = V * State.Rho(IC)
            For i_ = 0# To N - 1# Step 1
                State.WORK(i_) = State.WORK(i_) - VV * State.Y(IC, i_)
            Next i_
        Next I
        V = State.GammaK
        For i_ = 0# To N - 1# Step 1
            State.WORK(i_) = V * State.WORK(i_)
        Next i_
        For I = State.K - State.Q To State.K Step 1
            IC = I Mod M
            V = 0#
            For i_ = 0# To N - 1# Step 1
                V = V + State.Y(IC, i_) * State.WORK(i_)
            Next i_
            VV = State.Rho(IC) * (-V + State.THETA(IC))
            For i_ = 0# To N - 1# Step 1
                State.WORK(i_) = State.WORK(i_) + VV * State.S(IC, i_)
            Next i_
        Next I
        For i_ = 0# To N - 1# Step 1
            State.D(i_) = -State.WORK(i_)
        Next i_
        
        '
        ' Next step
        '
        State.FOld = State.F
        State.K = State.K + 1#
    End If
    GoTo lbl_6
lbl_7:
    Result = False
    MinLBFGSIteration = Result
    Exit Function
    
    '
    ' Saving state
    '
lbl_rcomm:
    Result = True
    State.RState.IA(0#) = N
    State.RState.IA(1#) = M
    State.RState.IA(2#) = MaxIts
    State.RState.IA(3#) = I
    State.RState.IA(4#) = J
    State.RState.IA(5#) = IC
    State.RState.IA(6#) = MCINFO
    State.RState.RA(0#) = EpsF
    State.RState.RA(1#) = EpsG
    State.RState.RA(2#) = EpsX
    State.RState.RA(3#) = V
    State.RState.RA(4#) = VV
    MinLBFGSIteration = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'L-BFGS algorithm results
'
'Called after MinLBFGSIteration() returned False.
'
'INPUT PARAMETERS:
'    State   -   algorithm state (used by MinLBFGSIteration).
'
'OUTPUT PARAMETERS:
'    X       -   array[0..N-1], solution
'    Rep     -   optimization report:
'                * Rep.TerminationType completetion code:
'                    * -2    rounding errors prevent further improvement.
'                            X contains best point found.
'                    * -1    incorrect parameters were specified
'                    *  1    relative function improvement is no more than
'                            EpsF.
'                    *  2    relative step is no more than EpsX.
'                    *  4    gradient norm is no more than EpsG
'                    *  5    MaxIts steps was taken
'                    *  7    stopping conditions are too stringent,
'                            further improvement is impossible
'                * Rep.IterationsCount contains iterations count
'                * NFEV countains number of function calculations
'
'  -- ALGLIB --
'     Copyright 02.04.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinLBFGSResults(ByRef State As MinLBFGSState, _
         ByRef X() As Double, _
         ByRef Rep As MinLBFGSReport)
    Dim i_ As Long
    ReDim X(0# To State.N - 1#)
    For i_ = 0# To State.N - 1# Step 1
        X(i_) = State.X(i_)
    Next i_
    Rep.IterationsCount = State.RepIterationsCount
    Rep.NFEV = State.RepNFEV
    Rep.TerminationType = State.RepTerminationType
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Clears request fileds (to be sure that we don't forgot to clear something)
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub ClearRequestFields(ByRef State As MinLBFGSState)
    State.NeedFG = False
    State.XUpdated = False
End Sub
