''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2008, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'k-means++ clusterization
'
'INPUT PARAMETERS:
'    XY          -   dataset, array [0..NPoints-1,0..NVars-1].
'    NPoints     -   dataset size, NPoints>=K
'    NVars       -   number of variables, NVars>=1
'    K           -   desired number of clusters, K>=1
'    Restarts    -   number of restarts, Restarts>=1
'
'OUTPUT PARAMETERS:
'    Info        -   return code:
'                    * -3, if task is degenerate (number of distinct points is
'                          less than K)
'                    * -1, if incorrect NPoints/NFeatures/K/Restarts was passed
'                    *  1, if subroutine finished successfully
'    C           -   array[0..NVars-1,0..K-1].matrix whose columns store
'                    cluster's centers
'    XYC         -   array which contains number of clusters dataset points
'                    belong to.
'
'  -- ALGLIB --
'     Copyright 21.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub KMeansGenerate(ByRef XY() As Double, _
         ByVal NPoints As Long, _
         ByVal NVars As Long, _
         ByVal K As Long, _
         ByVal Restarts As Long, _
         ByRef Info As Long, _
         ByRef C() As Double, _
         ByRef XYC() As Long)
    Dim i As Long
    Dim j As Long
    Dim CT() As Double
    Dim CTBest() As Double
    Dim XYCBest() As Long
    Dim E As Double
    Dim EBest As Double
    Dim X() As Double
    Dim Tmp() As Double
    Dim D2() As Double
    Dim p() As Double
    Dim CSizes() As Long
    Dim CBusy() As Boolean
    Dim V As Double
    Dim CClosest As Long
    Dim DClosest As Double
    Dim WORK() As Double
    Dim WasChanges As Boolean
    Dim ZeroSizeClusters As Boolean
    Dim Pass As Long
    Dim i_ As Long
    
    '
    ' Test parameters
    '
    If NPoints < K Or NVars < 1# Or K < 1# Or Restarts < 1# Then
        Info = -1#
        Exit Sub
    End If
    
    '
    ' TODO: special case K=1
    ' TODO: special case K=NPoints
    '
    Info = 1#
    
    '
    ' Multiple passes of k-means++ algorithm
    '
    ReDim CT(0 To K - 1, 0 To NVars - 1)
    ReDim CTBest(0 To K - 1, 0 To NVars - 1)
    ReDim XYC(0 To NPoints - 1)
    ReDim XYCBest(0 To NPoints - 1)
    ReDim D2(0 To NPoints - 1)
    ReDim p(0 To NPoints - 1)
    ReDim Tmp(0 To NVars - 1)
    ReDim CSizes(0 To K - 1)
    ReDim CBusy(0 To K - 1)
    EBest = MaxRealNumber
    For Pass = 1# To Restarts Step 1
        
        '
        ' Select initial centers  using k-means++ algorithm
        ' 1. Choose first center at random
        ' 2. Choose next centers using their distance from centers already chosen
        '
        ' Note that for performance reasons centers are stored in ROWS of CT, not
        ' in columns. We'll transpose CT in the end and store it in the C.
        '
        i = RandomInteger(NPoints)
        For i_ = 0# To NVars - 1# Step 1
            CT(0#, i_) = XY(i, i_)
        Next i_
        CBusy(0#) = True
        For i = 1# To K - 1# Step 1
            CBusy(i) = False
        Next i
        If Not SelectCenterPP(XY, NPoints, NVars, CT, CBusy, K, D2, p, Tmp) Then
            Info = -3#
            Exit Sub
        End If
        
        '
        ' Update centers:
        ' 2. update center positions
        '
        Do While True
            
            '
            ' fill XYC with center numbers
            '
            WasChanges = False
            For i = 0# To NPoints - 1# Step 1
                CClosest = -1#
                DClosest = MaxRealNumber
                For j = 0# To K - 1# Step 1
                    For i_ = 0# To NVars - 1# Step 1
                        Tmp(i_) = XY(i, i_)
                    Next i_
                    For i_ = 0# To NVars - 1# Step 1
                        Tmp(i_) = Tmp(i_) - CT(j, i_)
                    Next i_
                    V = 0#
                    For i_ = 0# To NVars - 1# Step 1
                        V = V + Tmp(i_) * Tmp(i_)
                    Next i_
                    If V < DClosest Then
                        CClosest = j
                        DClosest = V
                    End If
                Next j
                If XYC(i) <> CClosest Then
                    WasChanges = True
                End If
                XYC(i) = CClosest
            Next i
            
            '
            ' Update centers
            '
            For j = 0# To K - 1# Step 1
                CSizes(j) = 0#
            Next j
            For i = 0# To K - 1# Step 1
                For j = 0# To NVars - 1# Step 1
                    CT(i, j) = 0#
                Next j
            Next i
            For i = 0# To NPoints - 1# Step 1
                CSizes(XYC(i)) = CSizes(XYC(i)) + 1#
                For i_ = 0# To NVars - 1# Step 1
                    CT(XYC(i), i_) = CT(XYC(i), i_) + XY(i, i_)
                Next i_
            Next i
            ZeroSizeClusters = False
            For i = 0# To K - 1# Step 1
                CBusy(i) = CSizes(i) <> 0#
                ZeroSizeClusters = ZeroSizeClusters Or CSizes(i) = 0#
            Next i
            If ZeroSizeClusters Then
                
                '
                ' Some clusters have zero size - rare, but possible.
                ' We'll choose new centers for such clusters using k-means++ rule
                ' and restart algorithm
                '
                If Not SelectCenterPP(XY, NPoints, NVars, CT, CBusy, K, D2, p, Tmp) Then
                    Info = -3#
                    Exit Sub
                End If
                GoTo Cont_3
            End If
            For j = 0# To K - 1# Step 1
                V = 1# / CSizes(j)
                For i_ = 0# To NVars - 1# Step 1
                    CT(j, i_) = V * CT(j, i_)
                Next i_
            Next j
            
            '
            ' if nothing has changed during iteration
            '
            If Not WasChanges Then
                Exit Do
            End If
Cont_3:
        Loop
        
        '
        ' 3. Calculate E, compare with best centers found so far
        '
        E = 0#
        For i = 0# To NPoints - 1# Step 1
            For i_ = 0# To NVars - 1# Step 1
                Tmp(i_) = XY(i, i_)
            Next i_
            For i_ = 0# To NVars - 1# Step 1
                Tmp(i_) = Tmp(i_) - CT(XYC(i), i_)
            Next i_
            V = 0#
            For i_ = 0# To NVars - 1# Step 1
                V = V + Tmp(i_) * Tmp(i_)
            Next i_
            E = E + V
        Next i
        If E < EBest Then
            
            '
            ' store partition.
            '
            EBest = E
            Call CopyMatrix(CT, 0#, K - 1#, 0#, NVars - 1#, CTBest, 0#, K - 1#, 0#, NVars - 1#)
            For i = 0# To NPoints - 1# Step 1
                XYCBest(i) = XYC(i)
            Next i
        End If
    Next Pass
    
    '
    ' Copy and transpose
    '
    ReDim C(0# To NVars - 1#, 0# To K - 1#)
    Call CopyAndTranspose(CTBest, 0#, K - 1#, 0#, NVars - 1#, C, 0#, NVars - 1#, 0#, K - 1#)
    For i = 0# To NPoints - 1# Step 1
        XYC(i) = XYCBest(i)
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Select center for a new cluster using k-means++ rule
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function SelectCenterPP(ByRef XY() As Double, _
         ByVal NPoints As Long, _
         ByVal NVars As Long, _
         ByRef Centers() As Double, _
         ByRef BusyCenters_() As Boolean, _
         ByVal CCnt As Long, _
         ByRef D2() As Double, _
         ByRef p() As Double, _
         ByRef Tmp() As Double) As Boolean
    Dim Result As Boolean
    Dim BusyCenters() As Boolean
    Dim i As Long
    Dim j As Long
    Dim CC As Long
    Dim V As Double
    Dim S As Double
    Dim i_ As Long
    BusyCenters = BusyCenters_
    Result = True
    For CC = 0# To CCnt - 1# Step 1
        If Not BusyCenters(CC) Then
            
            '
            ' fill D2
            '
            For i = 0# To NPoints - 1# Step 1
                D2(i) = MaxRealNumber
                For j = 0# To CCnt - 1# Step 1
                    If BusyCenters(j) Then
                        For i_ = 0# To NVars - 1# Step 1
                            Tmp(i_) = XY(i, i_)
                        Next i_
                        For i_ = 0# To NVars - 1# Step 1
                            Tmp(i_) = Tmp(i_) - Centers(j, i_)
                        Next i_
                        V = 0#
                        For i_ = 0# To NVars - 1# Step 1
                            V = V + Tmp(i_) * Tmp(i_)
                        Next i_
                        If V < D2(i) Then
                            D2(i) = V
                        End If
                    End If
                Next j
            Next i
            
            '
            ' calculate P (non-cumulative)
            '
            S = 0#
            For i = 0# To NPoints - 1# Step 1
                S = S + D2(i)
            Next i
            If S = 0# Then
                Result = False
                SelectCenterPP = Result
                Exit Function
            End If
            S = 1# / S
            For i_ = 0# To NPoints - 1# Step 1
                p(i_) = S * D2(i_)
            Next i_
            
            '
            ' choose one of points with probability P
            ' random number within (0,1) is generated and
            ' inverse empirical CDF is used to randomly choose a point.
            '
            S = 0#
            V = Rnd()
            For i = 0# To NPoints - 1# Step 1
                S = S + p(i)
                If V <= S Or i = NPoints - 1# Then
                    For i_ = 0# To NVars - 1# Step 1
                        Centers(CC, i_) = XY(i, i_)
                    Next i_
                    BusyCenters(CC) = True
                    Exit For
                End If
            Next i
        End If
    Next CC
    SelectCenterPP = Result
End Function

