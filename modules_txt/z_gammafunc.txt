''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Cephes Math Library Release 2.8:  June, 2000
'Copyright by Stephen L. Moshier
'
'Contributors:
'    * Sergey Bochkanov (ALGLIB project). Translation from C to
'      pseudocode.
'
'See subroutines comments for additional copyrights.
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Gamma function
'
'Input parameters:
'    X   -   argument
'
'Domain:
'    0 < X < 171.6
'    -170 < X < 0, X is not an integer.
'
'Relative error:
' arithmetic   domain     # trials      peak         rms
'    IEEE    -170,-33      20000       2.3e-15     3.3e-16
'    IEEE     -33,  33     20000       9.4e-16     2.2e-16
'    IEEE      33, 171.6   20000       2.3e-15     3.2e-16
'
'Cephes Math Library Release 2.8:  June, 2000
'Original copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
'Translated to AlgoPascal by Bochkanov Sergey (2005, 2006, 2007).
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function Gamma(ByVal X As Double) As Double
    Dim Result As Double
    Dim P As Double
    Dim PP As Double
    Dim q As Double
    Dim QQ As Double
    Dim z As Double
    Dim i As Long
    Dim SgnGam As Double
    SgnGam = 1#
    q = Abs(X)
    If q > 33# Then
        If X < 0# Then
            P = Int(q)
            i = Round(P)
            If i Mod 2# = 0# Then
                SgnGam = -1#
            End If
            z = q - P
            If z > 0.5 Then
                P = P + 1#
                z = q - P
            End If
            z = q * Sin(Pi() * z)
            z = Abs(z)
            z = Pi() / (z * GammaStirF(q))
        Else
            z = GammaStirF(X)
        End If
        Result = SgnGam * z
        Gamma = Result
        Exit Function
    End If
    z = 1#
    Do While X >= 3#
        X = X - 1#
        z = z * X
    Loop
    Do While X < 0#
        If X > -0.000000001 Then
            Result = z / ((1# + 0.577215664901533 * X) * X)
            Gamma = Result
            Exit Function
        End If
        z = z / X
        X = X + 1#
    Loop
    Do While X < 2#
        If X < 0.000000001 Then
            Result = z / ((1# + 0.577215664901533 * X) * X)
            Gamma = Result
            Exit Function
        End If
        z = z / X
        X = X + 1#
    Loop
    If X = 2# Then
        Result = z
        Gamma = Result
        Exit Function
    End If
    X = X - 2#
    PP = 1.60119522476752E-04
    PP = 1.19135147006586E-03 + X * PP
    PP = 1.04213797561762E-02 + X * PP
    PP = 4.76367800457137E-02 + X * PP
    PP = 0.207448227648436 + X * PP
    PP = 0.494214826801497 + X * PP
    PP = 1# + X * PP
    QQ = -2.3158187332412E-05
    QQ = 5.39605580493303E-04 + X * QQ
    QQ = -4.45641913851797E-03 + X * QQ
    QQ = 0.011813978522206 + X * QQ
    QQ = 3.58236398605499E-02 + X * QQ
    QQ = -0.234591795718243 + X * QQ
    QQ = 7.14304917030273E-02 + X * QQ
    QQ = 1# + X * QQ
    Result = z * PP / QQ
    Gamma = Result
    Exit Function
    Gamma = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Natural logarithm of gamma function
'
'Input parameters:
'    X       -   argument
'
'Result:
'    logarithm of the absolute value of the Gamma(X).
'
'Output parameters:
'    SgnGam  -   sign(Gamma(X))
'
'Domain:
'    0 < X < 2.55e305
'    -2.55e305 < X < 0, X is not an integer.
'
'ACCURACY:
'arithmetic      domain        # trials     peak         rms
'   IEEE    0, 3                 28000     5.4e-16     1.1e-16
'   IEEE    2.718, 2.556e305     40000     3.5e-16     8.3e-17
'The error criterion was relative when the function magnitude
'was greater than one but absolute when it was less than one.
'
'The following test used the relative error criterion, though
'at certain points the relative error could be much higher than
'indicated.
'   IEEE    -200, -4             10000     4.8e-16     1.3e-16
'
'Cephes Math Library Release 2.8:  June, 2000
'Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
'Translated to AlgoPascal by Bochkanov Sergey (2005, 2006, 2007).
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function LnGamma(ByVal X As Double, ByRef SgnGam As Double) As Double
    Dim Result As Double
    Dim A As Double
    Dim B As Double
    Dim C As Double
    Dim P As Double
    Dim q As Double
    Dim U As Double
    Dim W As Double
    Dim z As Double
    Dim i As Long
    Dim LogPi As Double
    Dim LS2PI As Double
    Dim Tmp As Double
    SgnGam = 1#
    LogPi = 1.1447298858494
    LS2PI = 0.918938533204673
    If X < -34# Then
        q = -X
        W = LnGamma(q, Tmp)
        P = Int(q)
        i = Round(P)
        If i Mod 2# = 0# Then
            SgnGam = -1#
        Else
            SgnGam = 1#
        End If
        z = q - P
        If z > 0.5 Then
            P = P + 1#
            z = P - q
        End If
        z = q * Sin(Pi() * z)
        Result = LogPi - Log(z) - W
        LnGamma = Result
        Exit Function
    End If
    If X < 13# Then
        z = 1#
        P = 0#
        U = X
        Do While U >= 3#
            P = P - 1#
            U = X + P
            z = z * U
        Loop
        Do While U < 2#
            z = z / U
            P = P + 1#
            U = X + P
        Loop
        If z < 0# Then
            SgnGam = -1#
            z = -z
        Else
            SgnGam = 1#
        End If
        If U = 2# Then
            Result = Log(z)
            LnGamma = Result
            Exit Function
        End If
        P = P - 2#
        X = X + P
        B = -1378.25152569121
        B = -38801.6315134638 + X * B
        B = -331612.992738871 + X * B
        B = -1162370.97492762 + X * B
        B = -1721737.0082084 + X * B
        B = -853555.664245765 + X * B
        C = 1#
        C = -351.815701436523 + X * C
        C = -17064.2106651881 + X * C
        C = -220528.590553854 + X * C
        C = -1139334.44367983 + X * C
        C = -2532523.07177583 + X * C
        C = -2018891.41433533 + X * C
        P = X * B / C
        Result = Log(z) + P
        LnGamma = Result
        Exit Function
    End If
    q = (X - 0.5) * Log(X) - X + LS2PI
    If X > 100000000# Then
        Result = q
        LnGamma = Result
        Exit Function
    End If
    P = 1# / (X * X)
    If X >= 1000# Then
        q = q + ((7.93650793650794 * 0.0001 * P - 2.77777777777778 * 0.001) * P + 8.33333333333333E-02) / X
    Else
        A = 8.11614167470508 * 0.0001
        A = -(5.95061904284301 * 0.0001) + P * A
        A = 7.93650340457717 * 0.0001 + P * A
        A = -(2.777777777301 * 0.001) + P * A
        A = 8.33333333333332 * 0.01 + P * A
        q = q + A / X
    End If
    Result = q
    LnGamma = Result
End Function
Private Function GammaStirF(ByVal X As Double) As Double
    Dim Result As Double
    Dim Y As Double
    Dim W As Double
    Dim V As Double
    Dim Stir As Double
    W = 1# / X
    Stir = 7.87311395793094E-04
    Stir = -2.29549961613378E-04 + W * Stir
    Stir = -2.68132617805781E-03 + W * Stir
    Stir = 3.47222221605459E-03 + W * Stir
    Stir = 8.33333333333482E-02 + W * Stir
    W = 1# + W * Stir
    Y = Exp(X)
    If X > 143.01608 Then
        V = Power(X, 0.5 * X - 0.25)
        Y = V * (V / Y)
    Else
        Y = Power(X, X - 0.5) / Y
    End If
    Result = 2.506628274631 * Y * W
    GammaStirF = Result
End Function
