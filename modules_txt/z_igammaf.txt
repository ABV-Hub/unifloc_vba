''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Cephes Math Library Release 2.8:  June, 2000
'Copyright by Stephen L. Moshier
'
'Contributors:
'    * Sergey Bochkanov (ALGLIB project). Translation from C to
'      pseudocode.
'
'See subroutines comments for additional copyrights.
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Incomplete gamma integral
'
'The function is defined by
'
'                          x
'                           -
'                  1       | |  -t  a-1
' igam(a,x)  =   -----     |   e   t   dt.
'                 -      | |
'                | (a)    -
'                          0
'
'
'In this implementation both arguments must be positive.
'The integral is evaluated by either a power series or
'continued fraction expansion, depending on the relative
'values of a and x.
'
'ACCURACY:
'
'                     Relative error:
'arithmetic   domain     # trials      peak         rms
'   IEEE      0,30       200000       3.6e-14     2.9e-15
'   IEEE      0,100      300000       9.9e-14     1.5e-14
'
'Cephes Math Library Release 2.8:  June, 2000
'Copyright 1985, 1987, 2000 by Stephen L. Moshier
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function IncompleteGamma(ByVal A As Double, ByVal X As Double) As Double
    Dim Result As Double
    Dim IGammaEpsilon As Double
    Dim ans As Double
    Dim AX As Double
    Dim C As Double
    Dim R As Double
    Dim Tmp As Double
    IGammaEpsilon = 0.000000000000001
    If X <= 0# Or A <= 0# Then
        Result = 0#
        IncompleteGamma = Result
        Exit Function
    End If
    If X > 1# And X > A Then
        Result = 1# - IncompleteGammaC(A, X)
        IncompleteGamma = Result
        Exit Function
    End If
    AX = A * Log(X) - X - LnGamma(A, Tmp)
    If AX < -709.782712893384 Then
        Result = 0#
        IncompleteGamma = Result
        Exit Function
    End If
    AX = Exp(AX)
    R = A
    C = 1#
    ans = 1#
    Do
        R = R + 1#
        C = C * X / R
        ans = ans + C
    Loop Until C / ans <= IGammaEpsilon
    Result = ans * AX / A
    IncompleteGamma = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Complemented incomplete gamma integral
'
'The function is defined by
'
'
' igamc(a,x)   =   1 - igam(a,x)
'
'                           inf.
'                             -
'                    1       | |  -t  a-1
'              =   -----     |   e   t   dt.
'                   -      | |
'                  | (a)    -
'                            x
'
'
'In this implementation both arguments must be positive.
'The integral is evaluated by either a power series or
'continued fraction expansion, depending on the relative
'values of a and x.
'
'ACCURACY:
'
'Tested at random a, x.
'               a         x                      Relative error:
'arithmetic   domain   domain     # trials      peak         rms
'   IEEE     0.5,100   0,100      200000       1.9e-14     1.7e-15
'   IEEE     0.01,0.5  0,100      200000       1.4e-13     1.6e-15
'
'Cephes Math Library Release 2.8:  June, 2000
'Copyright 1985, 1987, 2000 by Stephen L. Moshier
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function IncompleteGammaC(ByVal A As Double, _
         ByVal X As Double) As Double
    Dim Result As Double
    Dim IGammaEpsilon As Double
    Dim IGammaBigNumber As Double
    Dim IGammaBigNumberInv As Double
    Dim ans As Double
    Dim AX As Double
    Dim C As Double
    Dim YC As Double
    Dim R As Double
    Dim T As Double
    Dim y As Double
    Dim z As Double
    Dim pk As Double
    Dim pkm1 As Double
    Dim pkm2 As Double
    Dim qk As Double
    Dim qkm1 As Double
    Dim qkm2 As Double
    Dim Tmp As Double
    IGammaEpsilon = 0.000000000000001
    IGammaBigNumber = 4.5035996273705E+15
    IGammaBigNumberInv = 2.22044604925031 * 1E-16
    If X <= 0# Or A <= 0# Then
        Result = 1#
        IncompleteGammaC = Result
        Exit Function
    End If
    If X < 1# Or X < A Then
        Result = 1# - IncompleteGamma(A, X)
        IncompleteGammaC = Result
        Exit Function
    End If
    AX = A * Log(X) - X - LnGamma(A, Tmp)
    If AX < -709.782712893384 Then
        Result = 0#
        IncompleteGammaC = Result
        Exit Function
    End If
    AX = Exp(AX)
    y = 1# - A
    z = X + y + 1#
    C = 0#
    pkm2 = 1#
    qkm2 = X
    pkm1 = X + 1#
    qkm1 = z * X
    ans = pkm1 / qkm1
    Do
        C = C + 1#
        y = y + 1#
        z = z + 2#
        YC = y * C
        pk = pkm1 * z - pkm2 * YC
        qk = qkm1 * z - qkm2 * YC
        If qk <> 0# Then
            R = pk / qk
            T = Abs((ans - R) / R)
            ans = R
        Else
            T = 1#
        End If
        pkm2 = pkm1
        pkm1 = pk
        qkm2 = qkm1
        qkm1 = qk
        If Abs(pk) > IGammaBigNumber Then
            pkm2 = pkm2 * IGammaBigNumberInv
            pkm1 = pkm1 * IGammaBigNumberInv
            qkm2 = qkm2 * IGammaBigNumberInv
            qkm1 = qkm1 * IGammaBigNumberInv
        End If
    Loop Until T <= IGammaEpsilon
    Result = ans * AX
    IncompleteGammaC = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Inverse of complemented imcomplete gamma integral
'
'Given p, the function finds x such that
'
' igamc( a, x ) = p.
'
'Starting with the approximate value
'
'        3
' x = a t
'
' where
'
' t = 1 - d - ndtri(p) sqrt(d)
'
'and
'
' d = 1/9a,
'
'the routine performs up to 10 Newton iterations to find the
'root of igamc(a,x) - p = 0.
'
'ACCURACY:
'
'Tested at random a, p in the intervals indicated.
'
'               a        p                      Relative error:
'arithmetic   domain   domain     # trials      peak         rms
'   IEEE     0.5,100   0,0.5       100000       1.0e-14     1.7e-15
'   IEEE     0.01,0.5  0,0.5       100000       9.0e-14     3.4e-15
'   IEEE    0.5,10000  0,0.5        20000       2.3e-13     3.8e-14
'
'Cephes Math Library Release 2.8:  June, 2000
'Copyright 1984, 1987, 1995, 2000 by Stephen L. Moshier
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function InvIncompleteGammaC(ByVal A As Double, _
         ByVal y0 As Double) As Double
    Dim Result As Double
    Dim IGammaEpsilon As Double
    Dim IInvGammaBigNumber As Double
    Dim X0 As Double
    Dim X1 As Double
    Dim X As Double
    Dim yl As Double
    Dim yh As Double
    Dim y As Double
    Dim D As Double
    Dim lgm As Double
    Dim dithresh As Double
    Dim i As Long
    Dim dir As Long
    Dim Tmp As Double
    IGammaEpsilon = 0.000000000000001
    IInvGammaBigNumber = 4.5035996273705E+15
    X0 = IInvGammaBigNumber
    yl = 0#
    X1 = 0#
    yh = 1#
    dithresh = 5# * IGammaEpsilon
    D = 1# / (9# * A)
    y = 1# - D - InvNormalDistribution(y0) * Sqr(D)
    X = A * y * y * y
    lgm = LnGamma(A, Tmp)
    i = 0#
    Do While i < 10#
        If X > X0 Or X < X1 Then
            D = 0.0625
            Exit Do
        End If
        y = IncompleteGammaC(A, X)
        If y < yl Or y > yh Then
            D = 0.0625
            Exit Do
        End If
        If y < y0 Then
            X0 = X
            yl = y
        Else
            X1 = X
            yh = y
        End If
        D = (A - 1#) * Log(X) - X - lgm
        If D < -709.782712893384 Then
            D = 0.0625
            Exit Do
        End If
        D = -Exp(D)
        D = (y - y0) / D
        If Abs(D / X) < IGammaEpsilon Then
            Result = X
            InvIncompleteGammaC = Result
            Exit Function
        End If
        X = X - D
        i = i + 1#
    Loop
    If X0 = IInvGammaBigNumber Then
        If X <= 0# Then
            X = 1#
        End If
        Do While X0 = IInvGammaBigNumber
            X = (1# + D) * X
            y = IncompleteGammaC(A, X)
            If y < y0 Then
                X0 = X
                yl = y
                Exit Do
            End If
            D = D + D
        Loop
    End If
    D = 0.5
    dir = 0#
    i = 0#
    Do While i < 400#
        X = X1 + D * (X0 - X1)
        y = IncompleteGammaC(A, X)
        lgm = (X0 - X1) / (X1 + X0)
        If Abs(lgm) < dithresh Then
            Exit Do
        End If
        lgm = (y - y0) / y0
        If Abs(lgm) < dithresh Then
            Exit Do
        End If
        If X <= 0# Then
            Exit Do
        End If
        If y >= y0 Then
            X1 = X
            yh = y
            If dir < 0# Then
                dir = 0#
                D = 0.5
            Else
                If dir > 1# Then
                    D = 0.5 * D + 0.5
                Else
                    D = (y0 - yl) / (yh - yl)
                End If
            End If
            dir = dir + 1#
        Else
            X0 = X
            yl = y
            If dir > 0# Then
                dir = 0#
                D = 0.5
            Else
                If dir < -1# Then
                    D = 0.5 * D
                Else
                    D = (y0 - yl) / (yh - yl)
                End If
            End If
            dir = dir - 1#
        End If
        i = i + 1#
    Loop
    Result = X
    InvIncompleteGammaC = Result
End Function

