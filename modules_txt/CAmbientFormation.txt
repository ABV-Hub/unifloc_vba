'=======================================================================================
'Unifloc 7.10  Apodemus agrarius                                           khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2019
'
'=======================================================================================
'
Option Explicit
' класс для описания свойств пород окружающих скважину на всем протяжении скважины
' задает геотермальный градиент в скважине  (в том числе с учетом зависимости от глубины и например наличия вечной мерзлоты)
' позволяет рассчитать общие коэффициент теплопроводности для различных условий
' необходим для корректного расчета распределения температуры в скважине
'
'
' пока положим эти параметры не зависящими от глубины, хотя потом можно будет поменять
Private Ke_JsecmC_ As Double      ' теплопроводность породы Дж/сек/м/С
Private Ce_JkgC_ As Double        ' теплоемкость породы
Private Rhoe_kgm3_ As Double       ' плотность породы вокруг скважины
' termal conductivity теплопроводность
Private Kcem_JsecmC_  As Double          ' теплопроводность цемента вокруг скважины
Private Ktub_JsecmC_  As Double          ' теплопроводность металла НКТ
Private Kcas_JsecmC_  As Double          ' теплопроводность металла эксплуатационной колонны
' convective heat transfer coeficients
Private Hc_Jm2secC_ As Double       ' конвективная теплопередача через затруб с жидкостью  Дж/м2/сек/С
Private Hr_Jm2secC_ As Double       ' теплопередача через затруб с газом (радиационная)
Private Hf_Jm2secC_ As Double       ' теплопередача конвективная в потоке жидкости
' радиусы для проведения расчета по температуре
' хотя это больше относится к конструкции скважины, но тут удобнее это разместить, тем более что значительного влияния на расчет нет
' в перспективе можно будет перевести в массивы и формировать снаружи
Private rti_m_ As Double           ' НКТ внутренний
Private rto_m_ As Double           ' НКТ наружный
Private rci_m_ As Double           ' Эксп колонна внутренний
Private rco_m_ As Double           ' Эксп колонна наружный
Private rcem_m_ As Double          ' Радиус цементного кольца вокруг скважины
Private td_hr_ As Double               ' время на которое вычисляется распределение давления
Private td_d_ As Double                ' безразмерное время расчета
Private TD_ As Double                  ' безразмерное температура
Private amb_temp_curve_ As CInterpolation
Private TGeoGrad_C100m_ As Double
Public h_vert_data_m As Double
Public amb_temp_data_C As Double
Public h_dyn_m As Double
Public h_pump_m As Double
' градиент давления от температуры
Public Function amb_temp_grad_Cm(h_vert_m As Double) As Double
 If amb_temp_curve_ Is Nothing Then
     amb_temp_grad_Cm = TGeoGrad_C100m_ / 100
 Else
     amb_temp_grad_Cm = (amb_temp_curve_.getPoint(h_vert_m + 1) - amb_temp_curve_.getPoint(h_vert_m)) / 1
 End If
End Function
Public Property Get amb_temp_curve() As CInterpolation
    Set amb_temp_curve = amb_temp_curve_
    
End Property
Public Property Set amb_temp_curve(crv As CInterpolation)
    Set amb_temp_curve_ = crv
    
End Property
' температура на глубине
Public Function amb_temp_C(h_vert_m As Double) As Double
    If amb_temp_curve_ Is Nothing Then
        amb_temp_C = amb_temp_data_C + (h_vert_m - h_vert_data_m) * amb_temp_grad_Cm(h_vert_m)
    Else
        amb_temp_C = amb_temp_curve_.getPoint(h_vert_m)
    End If
End Function
Public Function Uto_Jm2secC(h_vert_m As Double) As Double
End Function
Private Sub Class_Initialize()
     Ke_JsecmC_ = 2.4252    ' теплопроводность породы Дж/сек/м/С
     Ce_JkgC_ = 200        ' теплоемкость породы
     Rhoe_kgm3_ = 4000       ' плотность породы вокруг скважины
     
     Kcem_JsecmC_ = 6.965   ' теплопроводность цемента вокруг скважины
     Ktub_JsecmC_ = 32          ' теплопроводность металла НКТ
     Kcas_JsecmC_ = 32          ' теплопроводность металла эксплуатационной колонны
    ' convective heat transfer coeficients
     Hc_Jm2secC_ = 200       ' конвективная теплопередача через затруб с жидкостью  Дж/м2/сек/С
     Hr_Jm2secC_ = 10        ' теплопередача через затруб с газом (радиационная)
     Hf_Jm2secC_ = 200       ' теплопередача конвективная в потоке жидкости
     ' радиусы для проведения расчета
     rti_m_ = 0.06           ' НКТ внутренний
     rto_m_ = rti_m_ + 0.01 ' НКТ наружный
     rci_m_ = 0.124          ' Эксп колонна внутренний
     rco_m_ = rci_m_ + 0.01 ' Эксп колонна наружный
     rcem_m_ = 0.3           ' Радиус цементного кольца вокруг скважины
    
     ' исходные данные по умолчанию, чтобы все считало
     h_vert_data_m = 2500
     amb_temp_data_C = 95
     td_hr_ = 10 * 24   ' задаем по умолчанию время расчета распределения температуры через 10 дней
     h_dyn_m = -1
     h_pump_m = -1
     
     TGeoGrad_C100m_ = const_TGeoGrad_C100m
     
     Set amb_temp_curve_ = Nothing
End Sub
 Private Property Get td_d() As Double
   
        td_d_ = Ke_JsecmC * td_hr_ * const_convert_hr_sec / Rhoe_kgm3 / Ce_JkgC / (rwb_m ^ 2)
        td_d = td_d_
    
 End Property
 Private Property Get TD() As Double
    TD = Log(Exp(-0.2 * td_d) + (1.5 - 0.3719 * Exp(-td_d)) * (td_d ^ 0.5))
 End Property
 Private Function Lr_1m(wt_kgsec As Double, Uto_Jm2secC As Double, Cp_JkgC As Double) As Double
    If wt_kgsec <> 0 Then
        Lr_1m = 2 * const_Pi / (Cp_JkgC * wt_kgsec) * (Uto_Jm2secC * Ke_JsecmC / (Ke_JsecmC + Uto_Jm2secC * TD))
    Else
        Lr_1m = 10000
    End If
 End Function
 
' 'расчет перепада температуры для  заданных параметров
' Function calc_Tf_C(Hmes1_m As Double, Hmes2_m As Double, sinTheta_deg As Double, T1_C As Double, _
'                    W_kgsec As Double, Cp_JkgC As Double)
'    Dim Lr As Double
'    Dim Uto As Double
'    Dim h As Double
'    h = Hmes2_m ' (Hmes1_m + Hmes2_m) / 2
'
'    ' если потока нет, то берем температуру извне
'    If W_kgsec = 0 Then
'        calc_Tf_C = amb_temp_C(Hmes2_m)
'        Exit Function
'    End If
'
'    If Hmes1_m > h_pump_m Then
'            Uto = Uto_cas_Jm2secC
'    ElseIf Hmes1_m > h_dyn_m Then
'            Uto = Uto_tub_liqcas_Jm2secC
'    Else
'            Uto = Uto_tub_gascas_Jm2secC
'    End If
'
'    Lr = Lr_1m(W_kgsec, Uto, Cp_JkgC)
'
'
'    calc_Tf_C = amb_temp_C(Hmes1_m) + _
'                (1 - Exp((Hmes1_m - Hmes2_m) * Lr)) / Lr * _
'                (amb_temp_grad_Cm(h) * sinTheta_deg - const_g * sinTheta_deg / Cp_JkgC) + _
'                Exp((Hmes1_m - Hmes2_m) * Lr) * (T1_C - amb_temp_C(Hmes2_m))  ' пока так
'
'   ' надо будет еще тут Джоуля Томсона поправку добавить
'
' End Function
 
 ' функция расчета градиента температуры
 Function calc_dtdl_Cm(h_vert_m As Double, _
                        sinTheta_deg As Double, _
                        T1_C As Double, _
                        w_kgsec As Double, _
                        Cp_JkgC As Double, _
                        Optional dPdL_atmm As Double = 0, _
                        Optional v_ms As Double = 0, _
                        Optional dvdL_msm As Double = 0, _
                        Optional Cj_Catm As Double = 0, _
                        Optional flowUp As Boolean = True)
 '
 ' h_vert_m -  vertical depth where calculation take place
 ' sinTheta_deg - angle sin
 ' T1_C - fluid temp at depth gien
 ' W_kgsec - mass rate of fluid
 ' Cp_JkgC - heat capasity
 ' dPdL_atmm - pressure gradient at depth given (needed to account Joule Tompson effect)
 ' v_ms - velocity of fluid mixture
 ' dvdL_msm - acceleration of fluid mixture. acount inetria force influence (should be small but ..)
 ' Cj_Catm - коэффициент Джоуля Томсона Joule Thomson coeficient
 ' flowUp - flow direction
 
 
    
    Dim Lr As Double
    Dim Uto As Double
    Dim H As Double
    Dim sign As Integer
    
    ' если потока нет, то берем температуру извне
    ' if mass flow rate is zero - take ambient temp gradient
    If w_kgsec = 0 Then
        calc_dtdl_Cm = amb_temp_grad_Cm(h_vert_m)
        Exit Function
    End If
    
    ' set Uto - temperature emission depents on well condition
    If h_vert_m > h_pump_m Then
            Uto = Uto_cas_Jm2secC
    ElseIf h_vert_m > h_dyn_m Then
            Uto = Uto_tub_liqcas_Jm2secC
    Else
            Uto = Uto_tub_gascas_Jm2secC
    End If
    
    If flowUp Then
        sign = 1
    Else
        sign = -1
    End If
    
    Lr = Lr_1m(w_kgsec, Uto, Cp_JkgC)
    calc_dtdl_Cm = sign * (T1_C - amb_temp_C(h_vert_m)) * Lr
    calc_dtdl_Cm = calc_dtdl_Cm - (const_g * sinTheta_deg / Cp_JkgC + v_ms / Cp_JkgC * dvdL_msm - Cj_Catm * dPdL_atmm)
   
 End Function
 Public Property Get Ke_JsecmC() As Double
    Ke_JsecmC = Ke_JsecmC_
 End Property
 Public Property Get Ce_JkgC() As Double       ' теплоемкость породы
     Ce_JkgC = Ce_JkgC_
 End Property
 Public Property Get Rhoe_kgm3() As Double
    Rhoe_kgm3 = Rhoe_kgm3_
 End Property
 Public Property Get Kcem_JsecmC() As Double
    Kcem_JsecmC = Kcem_JsecmC_
 End Property
 
 Public Property Get Kcas_JsecmC() As Double
    Kcas_JsecmC = Kcas_JsecmC_
 End Property
 
 Public Property Get Ktub_JsecmC() As Double
    Ktub_JsecmC = Ktub_JsecmC_
 End Property
 
 Public Property Get Hf_Jm2secC() As Double
    Hf_Jm2secC = Hf_Jm2secC_
 End Property
 
 Public Property Get Hr_Jm2secC() As Double
    Hr_Jm2secC = Hr_Jm2secC_
 End Property
 
 Public Property Get Hc_Jm2secC() As Double
    Hc_Jm2secC = Hc_Jm2secC_
 End Property
 Public Property Get rti_m() As Double
    rti_m = rti_m_
 End Property
 
 Public Property Get rto_m() As Double
    rto_m = rto_m_
 End Property
 Public Property Get rci_m() As Double
    rci_m = rci_m_
 End Property
 Public Property Get rco_m() As Double
    rco_m = rco_m_
 End Property
 Public Property Get rwb_m() As Double
    rwb_m = rcem_m_
 End Property
 Public Property Get Uto_cas_Jm2secC() As Double
    
    Uto_cas_Jm2secC = 1 / ( _
                                 Log(rwb_m / rco_m) / Kcem_JsecmC + _
                                 Log(rco_m / rci_m) / Kcas_JsecmC + _
                                 1 / rci_m / Hf_Jm2secC _
                            )
    
 End Property
 
 Public Property Get Uto_tub_liqcas_Jm2secC() As Double
    
    Uto_tub_liqcas_Jm2secC = 1 / ( _
                                1 * Log(rwb_m / rco_m) / Kcem_JsecmC + _
                                1 * Log(rco_m / rci_m) / Kcas_JsecmC + _
                                1 / rto_m / (Hr_Jm2secC + Hc_Jm2secC) + _
                                1 * Log(rto_m / rti_m) / Ktub_JsecmC + _
                                1 / rti_m / Hf_Jm2secC _
                            )
    
 End Property
  Public Property Get Uto_tub_gascas_Jm2secC() As Double
    
    Uto_tub_gascas_Jm2secC = 1 / ( _
                                1 * Log(rwb_m / rco_m) / Kcem_JsecmC + _
                                1 * Log(rco_m / rci_m) / Kcas_JsecmC + _
                                1 / rto_m / (Hr_Jm2secC) + _
                                1 * Log(rto_m / rti_m) / Ktub_JsecmC + _
                                1 / rti_m / Hf_Jm2secC _
                            )
    
 End Property
