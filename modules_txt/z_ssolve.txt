''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 1992-2007 The University of Tennessee.  All rights reserved.
'
'Contributors:
'    * Sergey Bochkanov (ALGLIB project). Translation from FORTRAN to
'      pseudocode.
'
'See subroutines comments for additional copyrights.
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Solving  a system  of linear equations  with a system matrix  given by its
'LDLT decomposition
'
'The algorithm solves systems with a square matrix only.
'
'Input parameters:
'    A       -   LDLT decomposition of the matrix (the result of the
'                SMatrixLDLT subroutine).
'    Pivots  -   row permutation table (the result of the SMatrixLDLT subroutine).
'    B       -   right side of a system.
'                Array whose index ranges within [0..N-1].
'    N       -   size of matrix A.
'    IsUpper -   points to the triangle of matrix A in which the LDLT
'                decomposition is stored.
'                If IsUpper=True, the decomposition has the form of U*D*U',
'                matrix U is stored in the upper triangle of  matrix A  (in
'                that case, the lower triangle isn't used and isn't changed
'                by the subroutine).
'                Similarly, if IsUpper=False, the decomposition has the form
'                of L*D*L' and the lower triangle stores matrix L.
'
'Output parameters:
'    X       -   solution of a system.
'                Array whose index ranges within [0..N-1].
'
'Result:
'    True, if the matrix is not singular. X contains the solution.
'    False, if the matrix is singular (the determinant of matrix D is equal
'to 0). In this case, X doesn't contain a solution.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function SMatrixLDLTSolve(ByRef A() As Double, _
         ByRef Pivots() As Long, _
         ByRef B_() As Double, _
         ByVal N As Long, _
         ByVal IsUpper As Boolean, _
         ByRef X() As Double) As Boolean
    Dim Result As Boolean
    Dim B() As Double
    Dim i As Long
    Dim K As Long
    Dim KP As Long
    Dim AK As Double
    Dim AKM1 As Double
    Dim AKM1K As Double
    Dim BK As Double
    Dim BKM1 As Double
    Dim DENOM As Double
    Dim V As Double
    Dim i_ As Long
    B = B_
    
    '
    ' Quick return if possible
    '
    Result = True
    If N = 0# Then
        SMatrixLDLTSolve = Result
        Exit Function
    End If
    
    '
    ' Check that the diagonal matrix D is nonsingular
    '
    If IsUpper Then
        
        '
        ' Upper triangular storage: examine D from bottom to top
        '
        For i = N - 1# To 0# Step -1
            If Pivots(i) >= 0# And A(i, i) = 0# Then
                Result = False
                SMatrixLDLTSolve = Result
                Exit Function
            End If
        Next i
    Else
        
        '
        ' Lower triangular storage: examine D from top to bottom.
        '
        For i = 0# To N - 1# Step 1
            If Pivots(i) >= 0# And A(i, i) = 0# Then
                Result = False
                SMatrixLDLTSolve = Result
                Exit Function
            End If
        Next i
    End If
    
    '
    ' Solve Ax = b
    '
    If IsUpper Then
        
        '
        ' Solve A*X = B, where A = U*D*U'.
        '
        ' First solve U*D*X = B, overwriting B with X.
        '
        ' K+1 is the main loop index, decreasing from N to 1 in steps of
        ' 1 or 2, depending on the size of the diagonal blocks.
        '
        K = N - 1#
        Do While K >= 0#
            If Pivots(K) >= 0# Then
                
                '
                ' 1 x 1 diagonal block
                '
                ' Interchange rows K+1 and IPIV(K+1).
                '
                KP = Pivots(K)
                If KP <> K Then
                    V = B(K)
                    B(K) = B(KP)
                    B(KP) = V
                End If
                
                '
                ' Multiply by inv(U(K+1)), where U(K+1) is the transformation
                ' stored in column K+1 of A.
                '
                V = B(K)
                For i_ = 0# To K - 1# Step 1
                    B(i_) = B(i_) - V * A(i_, K)
                Next i_
                
                '
                ' Multiply by the inverse of the diagonal block.
                '
                B(K) = B(K) / A(K, K)
                K = K - 1#
            Else
                
                '
                ' 2 x 2 diagonal block
                '
                ' Interchange rows K+1-1 and -IPIV(K+1).
                '
                KP = Pivots(K) + N
                If KP <> K - 1# Then
                    V = B(K - 1#)
                    B(K - 1#) = B(KP)
                    B(KP) = V
                End If
                
                '
                ' Multiply by inv(U(K+1)), where U(K+1) is the transformation
                ' stored in columns K+1-1 and K+1 of A.
                '
                V = B(K)
                For i_ = 0# To K - 2# Step 1
                    B(i_) = B(i_) - V * A(i_, K)
                Next i_
                V = B(K - 1#)
                For i_ = 0# To K - 2# Step 1
                    B(i_) = B(i_) - V * A(i_, K - 1#)
                Next i_
                
                '
                ' Multiply by the inverse of the diagonal block.
                '
                AKM1K = A(K - 1#, K)
                AKM1 = A(K - 1#, K - 1#) / AKM1K
                AK = A(K, K) / AKM1K
                DENOM = AKM1 * AK - 1#
                BKM1 = B(K - 1#) / AKM1K
                BK = B(K) / AKM1K
                B(K - 1#) = (AK * BKM1 - BK) / DENOM
                B(K) = (AKM1 * BK - BKM1) / DENOM
                K = K - 2#
            End If
        Loop
        
        '
        ' Next solve U'*X = B, overwriting B with X.
        '
        ' K+1 is the main loop index, increasing from 1 to N in steps of
        ' 1 or 2, depending on the size of the diagonal blocks.
        '
        K = 0#
        Do While K <= N - 1#
            If Pivots(K) >= 0# Then
                
                '
                ' 1 x 1 diagonal block
                '
                ' Multiply by inv(U'(K+1)), where U(K+1) is the transformation
                ' stored in column K+1 of A.
                '
                V = 0#
                For i_ = 0# To K - 1# Step 1
                    V = V + B(i_) * A(i_, K)
                Next i_
                B(K) = B(K) - V
                
                '
                ' Interchange rows K+1 and IPIV(K+1).
                '
                KP = Pivots(K)
                If KP <> K Then
                    V = B(K)
                    B(K) = B(KP)
                    B(KP) = V
                End If
                K = K + 1#
            Else
                
                '
                ' 2 x 2 diagonal block
                '
                ' Multiply by inv(U'(K+1+1)), where U(K+1+1) is the transformation
                ' stored in columns K+1 and K+1+1 of A.
                '
                V = 0#
                For i_ = 0# To K - 1# Step 1
                    V = V + B(i_) * A(i_, K)
                Next i_
                B(K) = B(K) - V
                V = 0#
                For i_ = 0# To K - 1# Step 1
                    V = V + B(i_) * A(i_, K + 1#)
                Next i_
                B(K + 1#) = B(K + 1#) - V
                
                '
                ' Interchange rows K+1 and -IPIV(K+1).
                '
                KP = Pivots(K) + N
                If KP <> K Then
                    V = B(K)
                    B(K) = B(KP)
                    B(KP) = V
                End If
                K = K + 2#
            End If
        Loop
    Else
        
        '
        ' Solve A*X = B, where A = L*D*L'.
        '
        ' First solve L*D*X = B, overwriting B with X.
        '
        ' K+1 is the main loop index, increasing from 1 to N in steps of
        ' 1 or 2, depending on the size of the diagonal blocks.
        '
        K = 0#
        Do While K <= N - 1#
            If Pivots(K) >= 0# Then
                
                '
                ' 1 x 1 diagonal block
                '
                ' Interchange rows K+1 and IPIV(K+1).
                '
                KP = Pivots(K)
                If KP <> K Then
                    V = B(K)
                    B(K) = B(KP)
                    B(KP) = V
                End If
                
                '
                ' Multiply by inv(L(K+1)), where L(K+1) is the transformation
                ' stored in column K+1 of A.
                '
                If K + 1# < N Then
                    V = B(K)
                    For i_ = K + 1# To N - 1# Step 1
                        B(i_) = B(i_) - V * A(i_, K)
                    Next i_
                End If
                
                '
                ' Multiply by the inverse of the diagonal block.
                '
                B(K) = B(K) / A(K, K)
                K = K + 1#
            Else
                
                '
                ' 2 x 2 diagonal block
                '
                ' Interchange rows K+1+1 and -IPIV(K+1).
                '
                KP = Pivots(K) + N
                If KP <> K + 1# Then
                    V = B(K + 1#)
                    B(K + 1#) = B(KP)
                    B(KP) = V
                End If
                
                '
                ' Multiply by inv(L(K+1)), where L(K+1) is the transformation
                ' stored in columns K+1 and K+1+1 of A.
                '
                If K + 1# < N - 1# Then
                    V = B(K)
                    For i_ = K + 2# To N - 1# Step 1
                        B(i_) = B(i_) - V * A(i_, K)
                    Next i_
                    V = B(K + 1#)
                    For i_ = K + 2# To N - 1# Step 1
                        B(i_) = B(i_) - V * A(i_, K + 1#)
                    Next i_
                End If
                
                '
                ' Multiply by the inverse of the diagonal block.
                '
                AKM1K = A(K + 1#, K)
                AKM1 = A(K, K) / AKM1K
                AK = A(K + 1#, K + 1#) / AKM1K
                DENOM = AKM1 * AK - 1#
                BKM1 = B(K) / AKM1K
                BK = B(K + 1#) / AKM1K
                B(K) = (AK * BKM1 - BK) / DENOM
                B(K + 1#) = (AKM1 * BK - BKM1) / DENOM
                K = K + 2#
            End If
        Loop
        
        '
        ' Next solve L'*X = B, overwriting B with X.
        '
        ' K+1 is the main loop index, decreasing from N to 1 in steps of
        ' 1 or 2, depending on the size of the diagonal blocks.
        '
        K = N - 1#
        Do While K >= 0#
            If Pivots(K) >= 0# Then
                
                '
                ' 1 x 1 diagonal block
                '
                ' Multiply by inv(L'(K+1)), where L(K+1) is the transformation
                ' stored in column K+1 of A.
                '
                If K + 1# < N Then
                    V = 0#
                    For i_ = K + 1# To N - 1# Step 1
                        V = V + B(i_) * A(i_, K)
                    Next i_
                    B(K) = B(K) - V
                End If
                
                '
                ' Interchange rows K+1 and IPIV(K+1).
                '
                KP = Pivots(K)
                If KP <> K Then
                    V = B(K)
                    B(K) = B(KP)
                    B(KP) = V
                End If
                K = K - 1#
            Else
                
                '
                ' 2 x 2 diagonal block
                '
                ' Multiply by inv(L'(K+1-1)), where L(K+1-1) is the transformation
                ' stored in columns K+1-1 and K+1 of A.
                '
                If K + 1# < N Then
                    V = 0#
                    For i_ = K + 1# To N - 1# Step 1
                        V = V + B(i_) * A(i_, K)
                    Next i_
                    B(K) = B(K) - V
                    V = 0#
                    For i_ = K + 1# To N - 1# Step 1
                        V = V + B(i_) * A(i_, K - 1#)
                    Next i_
                    B(K - 1#) = B(K - 1#) - V
                End If
                
                '
                ' Interchange rows K+1 and -IPIV(K+1).
                '
                KP = Pivots(K) + N
                If KP <> K Then
                    V = B(K)
                    B(K) = B(KP)
                    B(KP) = V
                End If
                K = K - 2#
            End If
        Loop
    End If
    ReDim X(0# To N - 1#)
    For i_ = 0# To N - 1# Step 1
        X(i_) = B(i_)
    Next i_
    SMatrixLDLTSolve = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Solving a system of linear equations with a symmetric system matrix
'
'Input parameters:
'    A       -   system matrix (upper or lower triangle).
'                Array whose indexes range within [0..N-1, 0..N-1].
'    B       -   right side of a system.
'                Array whose index ranges within [0..N-1].
'    N       -   size of matrix A.
'    IsUpper -   If IsUpper = True, A contains the upper triangle,
'                otherwise A contains the lower triangle.
'
'Output parameters:
'    X       -   solution of a system.
'                Array whose index ranges within [0..N-1].
'
'Result:
'    True, if the matrix is not singular. X contains the solution.
'    False, if the matrix is singular (the determinant of the matrix is equal
'to 0). In this case, X doesn't contain a solution.
'
'  -- ALGLIB --
'     Copyright 2005 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function SMatrixSolve(ByRef A_() As Double, _
         ByRef B() As Double, _
         ByVal N As Long, _
         ByVal IsUpper As Boolean, _
         ByRef X() As Double) As Boolean
    Dim Result As Boolean
    Dim A() As Double
    Dim Pivots() As Long
    A = A_
    Call SMatrixLDLT(A, N, IsUpper, Pivots)
    Result = SMatrixLDLTSolve(A, Pivots, B, N, IsUpper, X)
    SMatrixSolve = Result
End Function
Public Function SolveSystemLDLT(ByRef A() As Double, _
         ByRef Pivots() As Long, _
         ByRef B_() As Double, _
         ByVal N As Long, _
         ByVal IsUpper As Boolean, _
         ByRef X() As Double) As Boolean
    Dim Result As Boolean
    Dim B() As Double
    Dim i As Long
    Dim K As Long
    Dim KP As Long
    Dim KM1 As Long
    Dim KM2 As Long
    Dim KP1 As Long
    Dim KP2 As Long
    Dim AK As Double
    Dim AKM1 As Double
    Dim AKM1K As Double
    Dim BK As Double
    Dim BKM1 As Double
    Dim DENOM As Double
    Dim V As Double
    Dim i_ As Long
    B = B_
    
    '
    ' Quick return if possible
    '
    Result = True
    If N = 0# Then
        SolveSystemLDLT = Result
        Exit Function
    End If
    
    '
    ' Check that the diagonal matrix D is nonsingular
    '
    If IsUpper Then
        
        '
        ' Upper triangular storage: examine D from bottom to top
        '
        For i = N To 1# Step -1
            If Pivots(i) > 0# And A(i, i) = 0# Then
                Result = False
                SolveSystemLDLT = Result
                Exit Function
            End If
        Next i
    Else
        
        '
        ' Lower triangular storage: examine D from top to bottom.
        '
        For i = 1# To N Step 1
            If Pivots(i) > 0# And A(i, i) = 0# Then
                Result = False
                SolveSystemLDLT = Result
                Exit Function
            End If
        Next i
    End If
    
    '
    ' Solve Ax = b
    '
    If IsUpper Then
        
        '
        ' Solve A*X = B, where A = U*D*U'.
        '
        ' First solve U*D*X = B, overwriting B with X.
        '
        ' K is the main loop index, decreasing from N to 1 in steps of
        ' 1 or 2, depending on the size of the diagonal blocks.
        '
        K = N
        Do While K >= 1#
            If Pivots(K) > 0# Then
                
                '
                ' 1 x 1 diagonal block
                '
                ' Interchange rows K and IPIV(K).
                '
                KP = Pivots(K)
                If KP <> K Then
                    V = B(K)
                    B(K) = B(KP)
                    B(KP) = V
                End If
                
                '
                ' Multiply by inv(U(K)), where U(K) is the transformation
                ' stored in column K of A.
                '
                KM1 = K - 1#
                V = B(K)
                For i_ = 1# To KM1 Step 1
                    B(i_) = B(i_) - V * A(i_, K)
                Next i_
                
                '
                ' Multiply by the inverse of the diagonal block.
                '
                B(K) = B(K) / A(K, K)
                K = K - 1#
            Else
                
                '
                ' 2 x 2 diagonal block
                '
                ' Interchange rows K-1 and -IPIV(K).
                '
                KP = -Pivots(K)
                If KP <> K - 1# Then
                    V = B(K - 1#)
                    B(K - 1#) = B(KP)
                    B(KP) = V
                End If
                
                '
                ' Multiply by inv(U(K)), where U(K) is the transformation
                ' stored in columns K-1 and K of A.
                '
                KM2 = K - 2#
                KM1 = K - 1#
                V = B(K)
                For i_ = 1# To KM2 Step 1
                    B(i_) = B(i_) - V * A(i_, K)
                Next i_
                V = B(K - 1#)
                For i_ = 1# To KM2 Step 1
                    B(i_) = B(i_) - V * A(i_, KM1)
                Next i_
                
                '
                ' Multiply by the inverse of the diagonal block.
                '
                AKM1K = A(K - 1#, K)
                AKM1 = A(K - 1#, K - 1#) / AKM1K
                AK = A(K, K) / AKM1K
                DENOM = AKM1 * AK - 1#
                BKM1 = B(K - 1#) / AKM1K
                BK = B(K) / AKM1K
                B(K - 1#) = (AK * BKM1 - BK) / DENOM
                B(K) = (AKM1 * BK - BKM1) / DENOM
                K = K - 2#
            End If
        Loop
        
        '
        ' Next solve U'*X = B, overwriting B with X.
        '
        ' K is the main loop index, increasing from 1 to N in steps of
        ' 1 or 2, depending on the size of the diagonal blocks.
        '
        K = 1#
        Do While K <= N
            If Pivots(K) > 0# Then
                
                '
                ' 1 x 1 diagonal block
                '
                ' Multiply by inv(U'(K)), where U(K) is the transformation
                ' stored in column K of A.
                '
                KM1 = K - 1#
                V = 0#
                For i_ = 1# To KM1 Step 1
                    V = V + B(i_) * A(i_, K)
                Next i_
                B(K) = B(K) - V
                
                '
                ' Interchange rows K and IPIV(K).
                '
                KP = Pivots(K)
                If KP <> K Then
                    V = B(K)
                    B(K) = B(KP)
                    B(KP) = V
                End If
                K = K + 1#
            Else
                
                '
                ' 2 x 2 diagonal block
                '
                ' Multiply by inv(U'(K+1)), where U(K+1) is the transformation
                ' stored in columns K and K+1 of A.
                '
                KM1 = K - 1#
                KP1 = K + 1#
                V = 0#
                For i_ = 1# To KM1 Step 1
                    V = V + B(i_) * A(i_, K)
                Next i_
                B(K) = B(K) - V
                V = 0#
                For i_ = 1# To KM1 Step 1
                    V = V + B(i_) * A(i_, KP1)
                Next i_
                B(K + 1#) = B(K + 1#) - V
                
                '
                ' Interchange rows K and -IPIV(K).
                '
                KP = -Pivots(K)
                If KP <> K Then
                    V = B(K)
                    B(K) = B(KP)
                    B(KP) = V
                End If
                K = K + 2#
            End If
        Loop
    Else
        
        '
        ' Solve A*X = B, where A = L*D*L'.
        '
        ' First solve L*D*X = B, overwriting B with X.
        '
        ' K is the main loop index, increasing from 1 to N in steps of
        ' 1 or 2, depending on the size of the diagonal blocks.
        '
        K = 1#
        Do While K <= N
            If Pivots(K) > 0# Then
                
                '
                ' 1 x 1 diagonal block
                '
                ' Interchange rows K and IPIV(K).
                '
                KP = Pivots(K)
                If KP <> K Then
                    V = B(K)
                    B(K) = B(KP)
                    B(KP) = V
                End If
                
                '
                ' Multiply by inv(L(K)), where L(K) is the transformation
                ' stored in column K of A.
                '
                If K < N Then
                    KP1 = K + 1#
                    V = B(K)
                    For i_ = KP1 To N Step 1
                        B(i_) = B(i_) - V * A(i_, K)
                    Next i_
                End If
                
                '
                ' Multiply by the inverse of the diagonal block.
                '
                B(K) = B(K) / A(K, K)
                K = K + 1#
            Else
                
                '
                ' 2 x 2 diagonal block
                '
                ' Interchange rows K+1 and -IPIV(K).
                '
                KP = -Pivots(K)
                If KP <> K + 1# Then
                    V = B(K + 1#)
                    B(K + 1#) = B(KP)
                    B(KP) = V
                End If
                
                '
                ' Multiply by inv(L(K)), where L(K) is the transformation
                ' stored in columns K and K+1 of A.
                '
                If K < N - 1# Then
                    KP1 = K + 1#
                    KP2 = K + 2#
                    V = B(K)
                    For i_ = KP2 To N Step 1
                        B(i_) = B(i_) - V * A(i_, K)
                    Next i_
                    V = B(K + 1#)
                    For i_ = KP2 To N Step 1
                        B(i_) = B(i_) - V * A(i_, KP1)
                    Next i_
                End If
                
                '
                ' Multiply by the inverse of the diagonal block.
                '
                AKM1K = A(K + 1#, K)
                AKM1 = A(K, K) / AKM1K
                AK = A(K + 1#, K + 1#) / AKM1K
                DENOM = AKM1 * AK - 1#
                BKM1 = B(K) / AKM1K
                BK = B(K + 1#) / AKM1K
                B(K) = (AK * BKM1 - BK) / DENOM
                B(K + 1#) = (AKM1 * BK - BKM1) / DENOM
                K = K + 2#
            End If
        Loop
        
        '
        ' Next solve L'*X = B, overwriting B with X.
        '
        ' K is the main loop index, decreasing from N to 1 in steps of
        ' 1 or 2, depending on the size of the diagonal blocks.
        '
        K = N
        Do While K >= 1#
            If Pivots(K) > 0# Then
                
                '
                ' 1 x 1 diagonal block
                '
                ' Multiply by inv(L'(K)), where L(K) is the transformation
                ' stored in column K of A.
                '
                If K < N Then
                    KP1 = K + 1#
                    V = 0#
                    For i_ = KP1 To N Step 1
                        V = V + B(i_) * A(i_, K)
                    Next i_
                    B(K) = B(K) - V
                End If
                
                '
                ' Interchange rows K and IPIV(K).
                '
                KP = Pivots(K)
                If KP <> K Then
                    V = B(K)
                    B(K) = B(KP)
                    B(KP) = V
                End If
                K = K - 1#
            Else
                
                '
                ' 2 x 2 diagonal block
                '
                ' Multiply by inv(L'(K-1)), where L(K-1) is the transformation
                ' stored in columns K-1 and K of A.
                '
                If K < N Then
                    KP1 = K + 1#
                    KM1 = K - 1#
                    V = 0#
                    For i_ = KP1 To N Step 1
                        V = V + B(i_) * A(i_, K)
                    Next i_
                    B(K) = B(K) - V
                    V = 0#
                    For i_ = KP1 To N Step 1
                        V = V + B(i_) * A(i_, KM1)
                    Next i_
                    B(K - 1#) = B(K - 1#) - V
                End If
                
                '
                ' Interchange rows K and -IPIV(K).
                '
                KP = -Pivots(K)
                If KP <> K Then
                    V = B(K)
                    B(K) = B(KP)
                    B(KP) = V
                End If
                K = K - 2#
            End If
        Loop
    End If
    ReDim X(1# To N)
    For i_ = 1# To N Step 1
        X(i_) = B(i_)
    Next i_
    SolveSystemLDLT = Result
End Function
Public Function SolveSymmetricSystem(ByRef A_() As Double, _
         ByRef B_() As Double, _
         ByVal N As Long, _
         ByVal IsUpper As Boolean, _
         ByRef X() As Double) As Boolean
    Dim Result As Boolean
    Dim A() As Double
    Dim B() As Double
    Dim Pivots() As Long
    A = A_
    B = B_
    Call LDLTDecomposition(A, N, IsUpper, Pivots)
    Result = SolveSystemLDLT(A, Pivots, B, N, IsUpper, X)
    SolveSymmetricSystem = Result
End Function
