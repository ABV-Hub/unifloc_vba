'=======================================================================================
'Unifloc 7.17  Test                                          khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2019
'
'=======================================================================================
' набор функций для решения ДУ и уравнений для различных классов и процедур
Option Explicit
' функция градиента давления для одномерной задачи расчета
' распределения давления в трубопроводе
Public Function calc_grad_1d(l_m As Double, _
                              y() As Double, _
                              pipe As CPipe) As Double()
    Dim out(0 To 0) As Double
    Dim res As PIPE_FLOW_PARAMS
    With pipe
        res = pipe.calc_grad(l_m, y(0), pipe.t_h_mes_C(l_m), calc_dtdl:=False)
    End With
    out(0) = res.dp_dl
    calc_grad_1d = out
End Function
' функция градиента давления для двухмерной задачи расчета
' распределения давления в трубопроводе
Public Function calc_grad_2d(l_m As Double, _
                             y() As Double, _
                             pipe As CPipe) As Double()
    Dim out(0 To 1) As Double
    Dim res As PIPE_FLOW_PARAMS
    With pipe
        res = pipe.calc_grad(l_m, y(0), y(1))
    End With
    out(0) = res.dp_dl
    out(1) = res.dt_dl
    calc_grad_2d = out
End Function
' расчет параметров трубы
' функция расчета ошибки в оценке давления для трубы
' в зависимости от поправки на гравитационную составляющую градиента
Public Function calc_pipe_dp_error_calibr_grav_atm(ByVal c_calibr_grav As Double, _
                                   coeffA As Variant) As Double
    Dim pt As PTtype
    Dim pipe As CPipe
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    ' read coeffA - parameters
    Set pipe = coeffA(0)
    p_in_atma = coeffA(1)
    p_out_atma = coeffA(2)
    
    With pipe
        .c_calibr_grav = c_calibr_grav
        pt = .calc_dPipe(p_in_atma)
        calc_pipe_dp_error_calibr_grav_atm = (pt.p_atma - p_out_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для трубы
' в зависимости от поправки на составляющую градиента по трению
Public Function calc_pipe_dp_error_calibr_fric_atm(ByVal c_calibr_fric As Double, _
                                   coeffA As Variant) As Double
    Dim pt As PTtype
    Dim pipe As CPipe
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    ' read coeffA - parameters
    Set pipe = coeffA(0)
    p_in_atma = coeffA(1)
    p_out_atma = coeffA(2)
    
    With pipe
        .c_calibr_fric = c_calibr_fric
        pt = .calc_dPipe(p_in_atma)
        calc_pipe_dp_error_calibr_fric_atm = (pt.p_atma - p_out_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для трубы
' в зависимости от газового фактора
Public Function calc_pipe_dp_error_rp_atm(ByVal rp As Double, _
                                   coeffA As Variant) As Double
    Dim pt As PTtype
    Dim pipe As CPipe
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    ' read coeffA - parameters
    Set pipe = coeffA(0)
    p_in_atma = coeffA(1)
    p_out_atma = coeffA(2)
    
    With pipe
        .fluid.rp_m3m3 = rp
        pt = .calc_dPipe(p_in_atma)
        calc_pipe_dp_error_rp_atm = (pt.p_atma - p_out_atma)
    End With
    
End Function
' функция расчета ошибки в оценке давления для трубы
' в зависимости от обводненности
Public Function calc_pipe_dp_error_fw_atm(ByVal fw As Double, _
                                   coeffA As Variant) As Double
    Dim pt As PTtype
    Dim pipe As CPipe
    Dim p_in_atma As Double
    Dim p_out_atma As Double
    ' read coeffA - parameters
    Set pipe = coeffA(0)
    p_in_atma = coeffA(1)
    p_out_atma = coeffA(2)
    
    With pipe
        .fluid.fw_fr = fw
        pt = .calc_dPipe(p_in_atma)
        calc_pipe_dp_error_fw_atm = (pt.p_atma - p_out_atma)
    End With
    
End Function
Function calc_pipe_val(xa() As Double, coeffA() As Double, RtnType As Long) As Variant
    Dim a As Double, b As Double, c As Double, D As Double, E As Double, F As Double, Slopea As Variant, X1 As Double, X2 As Double
    Dim Th As Double, t As Double
'    A = CoeffA(0)
'    B = CoeffA(1)
'    C = CoeffA(2)
'    D = CoeffA(3)
'
'    Th = XA(0)
'    T = XA(1)
'
'    Select Case RtnType
'    Case 1
'        CreepFD1 = A * Log(B * T) - C * T - D * Th
'    Case 2
'        CreepFD1 = GradientA("CreepFD1", CoeffA, XA, 4, 2)
'    End Select
End Function
' примеры функций для подгонки
Function ExpFunc1(xa() As Double, coeffA() As Double, RtnType As Long) As Variant
    Dim a As Double, b As Double, c As Double, Slopea(0 To 2) As Double, x As Double
    a = coeffA(0)
    b = coeffA(1)
    c = coeffA(2)
    x = xa(0)
    Select Case RtnType
    Case 1
        ExpFunc1 = a + c * Exp(-b * x)
    Case 2
        Slopea(0) = 1
        Slopea(1) = -c * x * Exp(-b * x)
        Slopea(2) = Exp(-b * x)
        ExpFunc1 = Slopea
    End Select
End Function
Function ExpFunc2(xa() As Double, coeffA() As Double, RtnType As Long) As Variant
    Dim a As Double, b As Double, c As Double, Slopea(0 To 2) As Double, X1 As Double, X2 As Double
    a = coeffA(0)
    b = coeffA(1)
    c = coeffA(2)
    X1 = xa(0)
    X2 = xa(1)
    Select Case RtnType
    Case 1
        ExpFunc2 = a * X2 + c * Exp(-b * X1)
    Case 2
        Slopea(0) = X2
        Slopea(1) = -c * X1 * Exp(-b * X1)
        Slopea(2) = Exp(-b * X1)
        ExpFunc2 = Slopea
    End Select
End Function
Function ExpFuncFD(xa() As Double, coeffA() As Double, RtnType As Long) As Variant
    Dim a As Double, b As Double, c As Double, Slopea As Variant, X1 As Double, X2 As Double
    a = coeffA(0)
    b = coeffA(1)
    c = coeffA(2)
    X1 = xa(0)
    X2 = xa(1)
    Select Case RtnType
    Case 1
        ExpFuncFD = a * X2 + c * Exp(-b * X1)
    Case 2
        ExpFuncFD = GradientA("ExpFuncFD", coeffA, xa, 3, 3)
    End Select
End Function
Function ExpFunc2H(xa() As Double, coeffA() As Double, RtnType As Long) As Variant
    Dim a As Double, b As Double, c As Double, Slopea(0 To 2) As Double, X1 As Double, X2 As Double
    Dim HessA(0 To 2, 0 To 2) As Double
    a = coeffA(0)
    b = coeffA(1)
    c = coeffA(2)
    X1 = xa(0)
    X2 = xa(1)
    Select Case RtnType
    Case 1
        ExpFunc2H = a * X2 + c * Exp(-b * X1)
    Case 2
        Slopea(0) = X2
        Slopea(1) = -c * X1 * Exp(-b * X1)
        Slopea(2) = Exp(-b * X1)
        ExpFunc2H = Slopea
    Case 3
        HessA(0, 0) = 0
        HessA(0, 1) = 0
        HessA(0, 2) = 0
        HessA(1, 0) = 0
        HessA(1, 1) = c * X1 ^ 2 * Exp(-b * X1)
        HessA(1, 2) = -X1 * Exp(-b * X1)
        HessA(2, 0) = 0
        HessA(2, 1) = -X1 * Exp(-b * X1)
        HessA(2, 2) = 0
        ExpFunc2H = HessA
    End Select
End Function
Function PolyFunc(xa() As Double, coeffA() As Double, RtnType As Long) As Variant
    Dim a As Double, b As Double, c As Double, Slopea(0 To 2) As Double, x As Double
    a = coeffA(0)
    b = coeffA(1)
    ' C = CoeffA(2)
    x = xa(0)
    ' X2 = XA(1)
    Select Case RtnType
    Case 1
        PolyFunc = a * x ^ 4 + b * x ^ 3 + a * x ^ 2 + b * x
    Case 2
        Slopea(0) = x ^ 4
        Slopea(1) = x ^ 3
        ' Slopea(2) = Exp(-B * X1)
        PolyFunc = Slopea
    End Select
End Function
Function CreepFD1(xa() As Double, coeffA() As Double, RtnType As Long) As Variant
    Dim a As Double, b As Double, c As Double, D As Double, E As Double, F As Double, Slopea As Variant, X1 As Double, X2 As Double
    Dim Th As Double, t As Double
    a = coeffA(0)
    b = coeffA(1)
    c = coeffA(2)
    D = coeffA(3)
    
    Th = xa(0)
    t = xa(1)
    Select Case RtnType
    Case 1
        CreepFD1 = a * Log(b * t) - c * t - D * Th
    Case 2
        CreepFD1 = GradientA("CreepFD1", coeffA, xa, 4, 2)
    End Select
End Function
Function CreepFD2(xa() As Double, coeffA() As Double, RtnType As Long) As Variant
    Dim a As Double, b As Double, c As Double, D As Double, E As Double, F As Double, Slopea As Variant, X1 As Double, X2 As Double
    Dim Th As Double, t As Double
    a = coeffA(0)
    b = coeffA(1)
    c = coeffA(2)
    D = coeffA(3)
    E = coeffA(4)
    F = coeffA(5)
    Th = xa(0)
    t = xa(1)
    Select Case RtnType
    Case 1
        CreepFD2 = (a + b * Exp(c * Th)) * t ^ D / (t ^ E + F * Th)
    Case 2
        CreepFD2 = GradientA("CreepFD2", coeffA, xa, 6, 2)
    End Select
End Function
' функция для поиска решения по расчету давления в клапане
Public Function calc_dq_gas_pu_valve(Pu As Double, coeffA)
   Dim q_gas As Double, d_mm As Double, pd As Double, GG As Double, t As Double
   Dim c_calibr As Double
   q_gas = coeffA(0)
   d_mm = coeffA(1)
   pd = coeffA(2)
   GG = coeffA(3)
   t = coeffA(4)
   c_calibr = coeffA(5)
   
   calc_dq_gas_pu_valve = q_gas - GLV_q_gas_sm3day(d_mm, Pu, pd, GG, t, c_calibr)(0)(0)
End Function
Public Function calc_dq_gas_pd_valve(pd As Double, coeffA)
   Dim q_gas As Double, d_mm As Double, Pu As Double, GG As Double, t As Double
   Dim c_calibr As Double
   q_gas = coeffA(0)
   d_mm = coeffA(1)
   Pu = coeffA(2)
   GG = coeffA(3)
   t = coeffA(4)
   c_calibr = coeffA(5)
   
   calc_dq_gas_pd_valve = q_gas - GLV_q_gas_sm3day(d_mm, Pu, pd, GG, t, c_calibr)(0)(0)
End Function
' функция расчета ошибки в расходе газа при произвольном давлении внутри клапана
Public Function calc_dq_gas_pv_vkr_valve(Pv As Double, coeffA)
   Dim q_gas As Double, d_mm As Double, Pu As Double, pd As Double, GG As Double, t As Double
   Dim d_vkr As Double
   Dim c_calibr As Double
   
   d_mm = coeffA(0)
   d_vkr = coeffA(1)
   Pu = coeffA(2)
   pd = coeffA(3)
   GG = coeffA(4)
   t = coeffA(5)
   c_calibr = coeffA(5)
   
   calc_dq_gas_pv_vkr_valve = GLV_q_gas_sm3day(d_mm, Pu, Pv, GG, t, c_calibr)(0)(0) - GLV_q_gas_sm3day(d_vkr, Pv, pd, GG, t, c_calibr)(0)(0)
End Function

