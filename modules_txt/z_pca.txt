''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2008, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Principal components analysis
'
'Subroutine  builds  orthogonal  basis  where  first  axis  corresponds  to
'direction with maximum variance, second axis maximizes variance in subspace
'orthogonal to first axis and so on.
'
'It should be noted that, unlike LDA, PCA does not use class labels.
'
'INPUT PARAMETERS:
'    X           -   dataset, array[0..NPoints-1,0..NVars-1].
'                    matrix contains ONLY INDEPENDENT VARIABLES.
'    NPoints     -   dataset size, NPoints>=0
'    NVars       -   number of independent variables, NVars>=1
'
'¬€’ŒƒÕ€≈ œ¿–¿Ã≈“–€:
'    Info        -   return code:
'                    * -4, if SVD subroutine haven't converged
'                    * -1, if wrong parameters has been passed (NPoints<0,
'                          NVars<1)
'                    *  1, if task is solved
'    S2          -   array[0..NVars-1]. variance values corresponding
'                    to basis vectors.
'    V           -   array[0..NVars-1,0..NVars-1]
'                    matrix, whose columns store basis vectors.
'
'  -- ALGLIB --
'     Copyright 25.08.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PCABuildBasis(ByRef X() As Double, _
         ByVal NPoints As Long, _
         ByVal NVars As Long, _
         ByRef Info As Long, _
         ByRef S2() As Double, _
         ByRef V() As Double)
    Dim A() As Double
    Dim U() As Double
    Dim VT() As Double
    Dim M() As Double
    Dim T() As Double
    Dim i As Long
    Dim j As Long
    Dim Mean As Double
    Dim Variance As Double
    Dim Skewness As Double
    Dim Kurtosis As Double
    Dim i_ As Long
    
    '
    ' Check input data
    '
    If NPoints < 0# Or NVars < 1# Then
        Info = -1#
        Exit Sub
    End If
    Info = 1#
    
    '
    ' Special case: NPoints=0
    '
    If NPoints = 0# Then
        ReDim S2(0# To NVars - 1#)
        ReDim V(0# To NVars - 1#, 0# To NVars - 1#)
        For i = 0# To NVars - 1# Step 1
            S2(i) = 0#
        Next i
        For i = 0# To NVars - 1# Step 1
            For j = 0# To NVars - 1# Step 1
                If i = j Then
                    V(i, j) = 1#
                Else
                    V(i, j) = 0#
                End If
            Next j
        Next i
        Exit Sub
    End If
    
    '
    ' Calculate means
    '
    ReDim M(0# To NVars - 1#)
    ReDim T(0# To NPoints - 1#)
    For j = 0# To NVars - 1# Step 1
        For i_ = 0# To NPoints - 1# Step 1
            T(i_) = X(i_, j)
        Next i_
        Call CalculateMoments(T, NPoints, Mean, Variance, Skewness, Kurtosis)
        M(j) = Mean
    Next j
    
    '
    ' Center, apply SVD, prepare output
    '
    ReDim A(0# To MaxInt(NPoints, NVars) - 1#, 0# To NVars - 1#)
    For i = 0# To NPoints - 1# Step 1
        For i_ = 0# To NVars - 1# Step 1
            A(i, i_) = X(i, i_)
        Next i_
        For i_ = 0# To NVars - 1# Step 1
            A(i, i_) = A(i, i_) - M(i_)
        Next i_
    Next i
    For i = NPoints To NVars - 1# Step 1
        For j = 0# To NVars - 1# Step 1
            A(i, j) = 0#
        Next j
    Next i
    If Not RMatrixSVD(A, MaxInt(NPoints, NVars), NVars, 0#, 1#, 2#, S2, U, VT) Then
        Info = -4#
        Exit Sub
    End If
    If NPoints <> 1# Then
        For i = 0# To NVars - 1# Step 1
            S2(i) = Square(S2(i)) / (NPoints - 1#)
        Next i
    End If
    ReDim V(0# To NVars - 1#, 0# To NVars - 1#)
    Call CopyAndTranspose(VT, 0#, NVars - 1#, 0#, NVars - 1#, V, 0#, NVars - 1#, 0#, NVars - 1#)
End Sub

