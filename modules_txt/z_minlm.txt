''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2009, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Data types
Public Type MinLMState
    WrongParams As Boolean
    N As Long
    M As Long
    EpsG As Double
    EpsF As Double
    EpsX As Double
    MaxIts As Long
    XRep As Boolean
    StpMax As Double
    Flags As Long
    UserMode As Long
    X() As Double
    F As Double
    FI() As Double
    j() As Double
    H() As Double
    G() As Double
    NeedF As Boolean
    NeedFG As Boolean
    NeedFGH As Boolean
    NeedFiJ As Boolean
    XUpdated As Boolean
    InternalState As MinLBFGSState
    InternalRep As MinLBFGSReport
    XPrec() As Double
    XBase() As Double
    XDir() As Double
    GBase() As Double
    XPrev() As Double
    FPrev As Double
    RawModel() As Double
    Model() As Double
    WORK() As Double
    RState As RCommState
    RepIterationsCount As Long
    RepTerminationType As Long
    RepNFunc As Long
    RepNJac As Long
    RepNGrad As Long
    RepNHess As Long
    RepNCholesky As Long
    SolverInfo As Long
    SolverRep As DenseSolverReport
    InvInfo As Long
    InvRep As MatInvReport
End Type
Public Type MinLMReport
    IterationsCount As Long
    TerminationType As Long
    NFunc As Long
    NJac As Long
    NGrad As Long
    NHess As Long
    NCholesky As Long
End Type
'Global constants
Private Const LMModeFJ As Long = 0#
Private Const LMModeFGJ As Long = 1#
Private Const LMModeFGH As Long = 2#
Private Const LMFlagNoPreLBFGS As Long = 1#
Private Const LMFlagNoIntLBFGS As Long = 2#
Private Const LMPreLBFGSM As Long = 5#
Private Const LMIntLBFGSIts As Long = 5#
Private Const LBFGSNoRealloc As Long = 1#
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'    LEVENBERG-MARQUARDT-LIKE METHOD FOR NON-LINEAR OPTIMIZATION
'
'Optimization using function gradient and Hessian.  Algorithm -  Levenberg-
'Marquardt   modification   with   L-BFGS   pre-optimization  and  internal
'pre-conditioned L-BFGS optimization after each Levenberg-Marquardt step.
'
'Function F has general form (not "sum-of-squares"):
'
'    F = F(x[0], ..., x[n-1])
'
'EXAMPLE
'
'See HTML-documentation.
'
'INPUT PARAMETERS:
'    N       -   dimension, N>1
'    X       -   initial solution, array[0..N-1]
'
'OUTPUT PARAMETERS:
'    State   -   structure which stores algorithm state between subsequent
'                calls of MinLMIteration. Used for reverse communication.
'                This structure should be passed to MinLMIteration subroutine.
'
'See also MinLMIteration, MinLMResults.
'
'NOTES:
'
'1. you may tune stopping conditions with MinLMSetCond() function
'2. if target function contains exp() or other fast growing functions,  and
'   optimization algorithm makes too large steps which leads  to  overflow,
'   use MinLMSetStpMax() function to bound algorithm's steps.
'
'  -- ALGLIB --
'     Copyright 30.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinLMCreateFGH(ByRef N As Long, _
         ByRef X() As Double, _
         ByRef State As MinLMState)
    Dim i_ As Long
    
    '
    ' Prepare RComm
    '
    ReDim State.RState.IA(0# To 3#)
    ReDim State.RState.BA(0# To 0#)
    ReDim State.RState.RA(0# To 7#)
    State.RState.Stage = -1#
    
    '
    ' prepare internal structures
    '
    Call LMPrepare(N, 0#, True, State)
    
    '
    ' initialize, check parameters
    '
    Call MinLMSetCond(State, 0#, 0#, 0#, 0#)
    Call MinLMSetXRep(State, False)
    Call MinLMSetStpMax(State, 0#)
    State.N = N
    State.M = 0#
    State.Flags = 0#
    State.UserMode = LMModeFGH
    State.WrongParams = False
    If N < 1# Then
        State.WrongParams = True
        Exit Sub
    End If
    For i_ = 0# To N - 1# Step 1
        State.X(i_) = X(i_)
    Next i_
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'    LEVENBERG-MARQUARDT-LIKE METHOD FOR NON-LINEAR OPTIMIZATION
'
'Optimization using function gradient and Jacobian.  Algorithm -  Levenberg-
'Marquardt   modification   with   L-BFGS   pre-optimization  and  internal
'pre-conditioned L-BFGS optimization after each Levenberg-Marquardt step.
'
'Function F is represented as sum of squares:
'
'    F = f[0]^2(x[0],...,x[n-1]) + ... + f[m-1]^2(x[0],...,x[n-1])
'
'EXAMPLE
'
'See HTML-documentation.
'
'INPUT PARAMETERS:
'    N       -   dimension, N>1
'    M       -   number of functions f[i]
'    X       -   initial solution, array[0..N-1]
'
'OUTPUT PARAMETERS:
'    State   -   structure which stores algorithm state between subsequent
'                calls of MinLMIteration. Used for reverse communication.
'                This structure should be passed to MinLMIteration subroutine.
'
'See also MinLMIteration, MinLMResults.
'
'NOTES:
'
'1. you may tune stopping conditions with MinLMSetCond() function
'2. if target function contains exp() or other fast growing functions,  and
'   optimization algorithm makes too large steps which leads  to  overflow,
'   use MinLMSetStpMax() function to bound algorithm's steps.
'
'  -- ALGLIB --
'     Copyright 30.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinLMCreateFGJ(ByRef N As Long, _
         ByRef M As Long, _
         ByRef X() As Double, _
         ByRef State As MinLMState)
    Dim i_ As Long
    
    '
    ' Prepare RComm
    '
    ReDim State.RState.IA(0# To 3#)
    ReDim State.RState.BA(0# To 0#)
    ReDim State.RState.RA(0# To 7#)
    State.RState.Stage = -1#
    
    '
    ' prepare internal structures
    '
    Call LMPrepare(N, M, True, State)
    
    '
    ' initialize, check parameters
    '
    Call MinLMSetCond(State, 0#, 0#, 0#, 0#)
    Call MinLMSetXRep(State, False)
    Call MinLMSetStpMax(State, 0#)
    State.N = N
    State.M = M
    State.Flags = 0#
    State.UserMode = LMModeFGJ
    State.WrongParams = False
    If N < 1# Then
        State.WrongParams = True
        Exit Sub
    End If
    For i_ = 0# To N - 1# Step 1
        State.X(i_) = X(i_)
    Next i_
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'    CLASSIC LEVENBERG-MARQUARDT METHOD FOR NON-LINEAR OPTIMIZATION
'
'Optimization using Jacobi matrix. Algorithm  -  classic Levenberg-Marquardt
'method.
'
'Function F is represented as sum of squares:
'
'    F = f[0]^2(x[0],...,x[n-1]) + ... + f[m-1]^2(x[0],...,x[n-1])
'
'EXAMPLE
'
'See HTML-documentation.
'
'INPUT PARAMETERS:
'    N       -   dimension, N>1
'    M       -   number of functions f[i]
'    X       -   initial solution, array[0..N-1]
'
'OUTPUT PARAMETERS:
'    State   -   structure which stores algorithm state between subsequent
'                calls of MinLMIteration. Used for reverse communication.
'                This structure should be passed to MinLMIteration subroutine.
'
'See also MinLMIteration, MinLMResults.
'
'NOTES:
'
'1. you may tune stopping conditions with MinLMSetCond() function
'2. if target function contains exp() or other fast growing functions,  and
'   optimization algorithm makes too large steps which leads  to  overflow,
'   use MinLMSetStpMax() function to bound algorithm's steps.
'
'  -- ALGLIB --
'     Copyright 30.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinLMCreateFJ(ByRef N As Long, _
         ByRef M As Long, _
         ByRef X() As Double, _
         ByRef State As MinLMState)
    Dim i_ As Long
    
    '
    ' Prepare RComm
    '
    ReDim State.RState.IA(0# To 3#)
    ReDim State.RState.BA(0# To 0#)
    ReDim State.RState.RA(0# To 7#)
    State.RState.Stage = -1#
    
    '
    ' prepare internal structures
    '
    Call LMPrepare(N, M, True, State)
    
    '
    ' initialize, check parameters
    '
    Call MinLMSetCond(State, 0#, 0#, 0#, 0#)
    Call MinLMSetXRep(State, False)
    Call MinLMSetStpMax(State, 0#)
    State.N = N
    State.M = M
    State.Flags = 0#
    State.UserMode = LMModeFJ
    State.WrongParams = False
    If N < 1# Then
        State.WrongParams = True
        Exit Sub
    End If
    For i_ = 0# To N - 1# Step 1
        State.X(i_) = X(i_)
    Next i_
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function sets stopping conditions for Levenberg-Marquardt optimization
'algorithm.
'
'INPUT PARAMETERS:
'    State   -   structure which stores algorithm state between calls and
'                which is used for reverse communication. Must be initialized
'                with MinLMCreate???()
'    EpsG    -   >=0
'                The  subroutine  finishes  its  work   if   the  condition
'                ||G||<EpsG is satisfied, where ||.|| means Euclidian norm,
'                G - gradient.
'    EpsF    -   >=0
'                The  subroutine  finishes  its work if on k+1-th iteration
'                the  condition  |F(k+1)-F(k)|<=EpsF*max{|F(k)|,|F(k+1)|,1}
'                is satisfied.
'    EpsX    -   >=0
'                The subroutine finishes its work if  on  k+1-th  iteration
'                the condition |X(k+1)-X(k)| <= EpsX is fulfilled.
'    MaxIts  -   maximum number of iterations. If MaxIts=0, the  number  of
'                iterations   is    unlimited.   Only   Levenberg-Marquardt
'                iterations  are  counted  (L-BFGS/CG  iterations  are  NOT
'                counted  because their cost is very low copared to that of
'                LM).
'
'Passing EpsG=0, EpsF=0, EpsX=0 and MaxIts=0 (simultaneously) will lead to
'automatic stopping criterion selection (small EpsX).
'
'  -- ALGLIB --
'     Copyright 02.04.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinLMSetCond(ByRef State As MinLMState, _
         ByVal EpsG As Double, _
         ByVal EpsF As Double, _
         ByVal EpsX As Double, _
         ByVal MaxIts As Long)
    If EpsG = 0# And EpsF = 0# And EpsX = 0# And MaxIts = 0# Then
        EpsX = 0.000001
    End If
    State.EpsG = EpsG
    State.EpsF = EpsF
    State.EpsX = EpsX
    State.MaxIts = MaxIts
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function turns on/off reporting.
'
'INPUT PARAMETERS:
'    State   -   structure which stores algorithm state between calls and
'                which is used for reverse communication. Must be
'                initialized with MinLMCreate???()
'    NeedXRep-   whether iteration reports are needed or not
'
'Usually  algorithm  returns  from  MinLMIteration()  only  when  it  needs
'function/gradient/Hessian. However, with this function we can let it  stop
'after  each  iteration  (one iteration may include  more than one function
'evaluation), which is indicated by XUpdated field.
'
'Both Levenberg-Marquardt and L-BFGS iterations are reported.
'
'
'  -- ALGLIB --
'     Copyright 02.04.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinLMSetXRep(ByRef State As MinLMState, ByVal NeedXRep As Boolean)
    State.XRep = NeedXRep
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function sets maximum step length
'
'INPUT PARAMETERS:
'    State   -   structure which stores algorithm state between calls and
'                which is used for reverse communication. Must be
'                initialized with MinCGCreate???()
'    StpMax  -   maximum step length, >=0. Set StpMax to 0.0,  if you don't
'                want to limit step length.
'
'Use this subroutine when you optimize target function which contains exp()
'or  other  fast  growing  functions,  and optimization algorithm makes too
'large  steps  which  leads  to overflow. This function allows us to reject
'steps  that  are  too  large  (and  therefore  expose  us  to the possible
'overflow) without actually calculating function value at the x+stp*d.
'
'NOTE: non-zero StpMax leads to moderate  performance  degradation  because
'intermediate  step  of  preconditioned L-BFGS optimization is incompatible
'with limits on step size.
'
'  -- ALGLIB --
'     Copyright 02.04.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinLMSetStpMax(ByRef State As MinLMState, ByVal StpMax As Double)
    State.StpMax = StpMax
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'One Levenberg-Marquardt iteration.
'
'Called after inialization of State structure with MinLMXXX subroutine.
'See HTML docs for examples.
'
'Input parameters:
'    State   -   structure which stores algorithm state between subsequent
'                calls and which is used for reverse communication. Must be
'                initialized with MinLMXXX call first.
'
'If subroutine returned False, iterative algorithm has converged.
'
'If subroutine returned True, then:
'* if State.NeedF=True,      -   function value F at State.X[0..N-1]
'                                is required
'* if State.NeedFG=True      -   function value F and gradient G
'                                are required
'* if State.NeedFiJ=True     -   function vector f[i] and Jacobi matrix J
'                                are required
'* if State.NeedFGH=True     -   function value F, gradient G and Hesian H
'                                are required
'* if State.XUpdated=True    -   algorithm reports about new iteration,
'                                State.X contains current point,
'                                State.F contains function value.
'
'One and only one of this fields can be set at time.
'
'Results are stored:
'* function value            -   in MinLMState.F
'* gradient                  -   in MinLMState.G[0..N-1]
'* Jacobi matrix             -   in MinLMState.J[0..M-1,0..N-1]
'* Hessian                   -   in MinLMState.H[0..N-1,0..N-1]
'
'  -- ALGLIB --
'     Copyright 10.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function MinLMIteration(ByRef State As MinLMState) As Boolean
    Dim Result As Boolean
    Dim N As Long
    Dim M As Long
    Dim i As Long
    Dim StepNorm As Double
    Dim SPD As Boolean
    Dim FBase As Double
    Dim FNew As Double
    Dim Lambda As Double
    Dim Nu As Double
    Dim LambdaUp As Double
    Dim LambdaDown As Double
    Dim LBFGSFlags As Long
    Dim V As Double
    Dim i_ As Long
    
    '
    ' Reverse communication preparations
    ' I know it looks ugly, but it works the same way
    ' anywhere from C++ to Python.
    '
    ' This code initializes locals by:
    ' * random values determined during code
    '   generation - on first subroutine call
    ' * values from previous call - on subsequent calls
    '
    If State.RState.Stage >= 0# Then
        N = State.RState.IA(0#)
        M = State.RState.IA(1#)
        i = State.RState.IA(2#)
        LBFGSFlags = State.RState.IA(3#)
        SPD = State.RState.BA(0#)
        StepNorm = State.RState.RA(0#)
        FBase = State.RState.RA(1#)
        FNew = State.RState.RA(2#)
        Lambda = State.RState.RA(3#)
        Nu = State.RState.RA(4#)
        LambdaUp = State.RState.RA(5#)
        LambdaDown = State.RState.RA(6#)
        V = State.RState.RA(7#)
    Else
        N = -983#
        M = -989#
        i = -834#
        LBFGSFlags = 900#
        SPD = True
        StepNorm = 364#
        FBase = 214#
        FNew = -338#
        Lambda = -686#
        Nu = 912#
        LambdaUp = 585#
        LambdaDown = 497#
        V = -271#
    End If
    If State.RState.Stage = 0# Then
        GoTo lbl_0
    End If
    If State.RState.Stage = 1# Then
        GoTo lbl_1
    End If
    If State.RState.Stage = 2# Then
        GoTo lbl_2
    End If
    If State.RState.Stage = 3# Then
        GoTo lbl_3
    End If
    If State.RState.Stage = 4# Then
        GoTo lbl_4
    End If
    If State.RState.Stage = 5# Then
        GoTo lbl_5
    End If
    If State.RState.Stage = 6# Then
        GoTo lbl_6
    End If
    If State.RState.Stage = 7# Then
        GoTo lbl_7
    End If
    If State.RState.Stage = 8# Then
        GoTo lbl_8
    End If
    If State.RState.Stage = 9# Then
        GoTo lbl_9
    End If
    If State.RState.Stage = 10# Then
        GoTo lbl_10
    End If
    If State.RState.Stage = 11# Then
        GoTo lbl_11
    End If
    If State.RState.Stage = 12# Then
        GoTo lbl_12
    End If
    If State.RState.Stage = 13# Then
        GoTo lbl_13
    End If
    If State.RState.Stage = 14# Then
        GoTo lbl_14
    End If
    If State.RState.Stage = 15# Then
        GoTo lbl_15
    End If
    
    '
    ' Routine body
    '
    If State.WrongParams Then
        State.RepTerminationType = -1#
        Result = False
        MinLMIteration = Result
        Exit Function
    End If
    
    '
    ' prepare params
    '
    N = State.N
    M = State.M
    LambdaUp = 20#
    LambdaDown = 0.5
    Nu = 1#
    LBFGSFlags = 0#
    
    '
    ' if we have F and G
    '
    If Not ((State.UserMode = LMModeFGJ Or State.UserMode = LMModeFGH) And State.Flags \ LMFlagNoPreLBFGS Mod 2# = 0#) Then
        GoTo lbl_16
    End If
    
    '
    ' First stage of the hybrid algorithm: LBFGS
    '
    Call MinLBFGSCreate(N, MinInt(N, LMPreLBFGSM), State.X, State.InternalState)
    Call MinLBFGSSetCond(State.InternalState, 0#, 0#, 0#, MaxInt(5#, N))
    Call MinLBFGSSetXRep(State.InternalState, State.XRep)
    Call MinLBFGSSetStpMax(State.InternalState, State.StpMax)
lbl_18:
    If Not MinLBFGSIteration(State.InternalState) Then
        GoTo lbl_19
    End If
    If Not State.InternalState.NeedFG Then
        GoTo lbl_20
    End If
    
    '
    ' RComm
    '
    For i_ = 0# To N - 1# Step 1
        State.X(i_) = State.InternalState.X(i_)
    Next i_
    Call LMClearRequestFields(State)
    State.NeedFG = True
    State.RState.Stage = 0#
    GoTo lbl_rcomm
lbl_0:
    State.RepNFunc = State.RepNFunc + 1#
    State.RepNGrad = State.RepNGrad + 1#
    
    '
    ' Call LBFGS
    '
    State.InternalState.F = State.F
    For i_ = 0# To N - 1# Step 1
        State.InternalState.G(i_) = State.G(i_)
    Next i_
lbl_20:
    If Not (State.InternalState.XUpdated And State.XRep) Then
        GoTo lbl_22
    End If
    Call LMClearRequestFields(State)
    State.F = State.InternalState.F
    For i_ = 0# To N - 1# Step 1
        State.X(i_) = State.InternalState.X(i_)
    Next i_
    State.XUpdated = True
    State.RState.Stage = 1#
    GoTo lbl_rcomm
lbl_1:
lbl_22:
    GoTo lbl_18
lbl_19:
    Call MinLBFGSResults(State.InternalState, State.X, State.InternalRep)
    GoTo lbl_17
lbl_16:
    
    '
    ' No first stage.
    ' However, we may need to report initial point
    '
    If Not State.XRep Then
        GoTo lbl_24
    End If
    Call LMClearRequestFields(State)
    State.NeedF = True
    State.RState.Stage = 2#
    GoTo lbl_rcomm
lbl_2:
    Call LMClearRequestFields(State)
    State.XUpdated = True
    State.RState.Stage = 3#
    GoTo lbl_rcomm
lbl_3:
lbl_24:
lbl_17:
    
    '
    ' Second stage of the hybrid algorithm: LM
    ' Initialize quadratic model.
    '
    If State.UserMode <> LMModeFGH Then
        GoTo lbl_26
    End If
    
    '
    ' RComm
    '
    Call LMClearRequestFields(State)
    State.NeedFGH = True
    State.RState.Stage = 4#
    GoTo lbl_rcomm
lbl_4:
    State.RepNFunc = State.RepNFunc + 1#
    State.RepNGrad = State.RepNGrad + 1#
    State.RepNHess = State.RepNHess + 1#
    
    '
    ' generate raw quadratic model
    '
    Call RMatrixCopy(N, N, State.H, 0#, 0#, State.RawModel, 0#, 0#)
    For i_ = 0# To N - 1# Step 1
        State.GBase(i_) = State.G(i_)
    Next i_
    FBase = State.F
lbl_26:
    If Not (State.UserMode = LMModeFGJ Or State.UserMode = LMModeFJ) Then
        GoTo lbl_28
    End If
    
    '
    ' RComm
    '
    Call LMClearRequestFields(State)
    State.NeedFiJ = True
    State.RState.Stage = 5#
    GoTo lbl_rcomm
lbl_5:
    State.RepNFunc = State.RepNFunc + 1#
    State.RepNJac = State.RepNJac + 1#
    
    '
    ' generate raw quadratic model
    '
    Call RMatrixGEMM(N, N, M, 2#, State.j, 0#, 0#, 1#, State.j, 0#, 0#, 0#, 0#, State.RawModel, 0#, 0#)
    Call RMatrixMV(N, M, State.j, 0#, 0#, 1#, State.FI, 0#, State.GBase, 0#)
    For i_ = 0# To N - 1# Step 1
        State.GBase(i_) = 2 * State.GBase(i_)
    Next i_
    FBase = 0#
    For i_ = 0# To M - 1# Step 1
        FBase = FBase + State.FI(i_) * State.FI(i_)
    Next i_
lbl_28:
    Lambda = 0.001
lbl_30:
    If False Then
        GoTo lbl_31
    End If
    
    '
    ' 1. Model = RawModel+lambda*I
    ' 2. Try to solve (RawModel+Lambda*I)*dx = -g.
    '    Increase lambda if left part is not positive definite.
    '
    For i = 0# To N - 1# Step 1
        For i_ = 0# To N - 1# Step 1
            State.Model(i, i_) = State.RawModel(i, i_)
        Next i_
        State.Model(i, i) = State.Model(i, i) + Lambda
    Next i
    SPD = SPDMatrixCholesky(State.Model, N, True)
    State.RepNCholesky = State.RepNCholesky + 1#
    If SPD Then
        GoTo lbl_32
    End If
    If Not IncreaseLambda(Lambda, Nu, LambdaUp) Then
        GoTo lbl_34
    End If
    GoTo lbl_30
    GoTo lbl_35
lbl_34:
    State.RepTerminationType = 7#
    Call LMClearRequestFields(State)
    State.NeedF = True
    State.RState.Stage = 6#
    GoTo lbl_rcomm
lbl_6:
    GoTo lbl_31
lbl_35:
lbl_32:
    Call SPDMatrixCholeskySolve(State.Model, N, True, State.GBase, State.SolverInfo, State.SolverRep, State.XDir)
    If State.SolverInfo >= 0# Then
        GoTo lbl_36
    End If
    If Not IncreaseLambda(Lambda, Nu, LambdaUp) Then
        GoTo lbl_38
    End If
    GoTo lbl_30
    GoTo lbl_39
lbl_38:
    State.RepTerminationType = 7#
    Call LMClearRequestFields(State)
    State.NeedF = True
    State.RState.Stage = 7#
    GoTo lbl_rcomm
lbl_7:
    GoTo lbl_31
lbl_39:
lbl_36:
    For i_ = 0# To N - 1# Step 1
        State.XDir(i_) = -1 * State.XDir(i_)
    Next i_
    
    '
    ' Candidate lambda is found.
    ' 1. Save old w in WBase
    ' 1. Test some stopping criterions
    ' 2. If error(w+wdir)>error(w), increase lambda
    '
    For i_ = 0# To N - 1# Step 1
        State.XPrev(i_) = State.X(i_)
    Next i_
    State.FPrev = State.F
    For i_ = 0# To N - 1# Step 1
        State.XBase(i_) = State.X(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        State.X(i_) = State.X(i_) + State.XDir(i_)
    Next i_
    StepNorm = 0#
    For i_ = 0# To N - 1# Step 1
        StepNorm = StepNorm + State.XDir(i_) * State.XDir(i_)
    Next i_
    StepNorm = Sqr(StepNorm)
    If Not (State.StpMax > 0# And StepNorm > State.StpMax) Then
        GoTo lbl_40
    End If
    
    '
    ' Step is larger than the limit,
    ' larger lambda is needed
    '
    For i_ = 0# To N - 1# Step 1
        State.X(i_) = State.XBase(i_)
    Next i_
    If Not IncreaseLambda(Lambda, Nu, LambdaUp) Then
        GoTo lbl_42
    End If
    GoTo lbl_30
    GoTo lbl_43
lbl_42:
    State.RepTerminationType = 7#
    For i_ = 0# To N - 1# Step 1
        State.X(i_) = State.XPrev(i_)
    Next i_
    Call LMClearRequestFields(State)
    State.NeedF = True
    State.RState.Stage = 8#
    GoTo lbl_rcomm
lbl_8:
    GoTo lbl_31
lbl_43:
lbl_40:
    Call LMClearRequestFields(State)
    State.NeedF = True
    State.RState.Stage = 9#
    GoTo lbl_rcomm
lbl_9:
    State.RepNFunc = State.RepNFunc + 1#
    FNew = State.F
    If FNew <= FBase Then
        GoTo lbl_44
    End If
    
    '
    ' restore state and continue search for lambda
    '
    For i_ = 0# To N - 1# Step 1
        State.X(i_) = State.XBase(i_)
    Next i_
    If Not IncreaseLambda(Lambda, Nu, LambdaUp) Then
        GoTo lbl_46
    End If
    GoTo lbl_30
    GoTo lbl_47
lbl_46:
    State.RepTerminationType = 7#
    For i_ = 0# To N - 1# Step 1
        State.X(i_) = State.XPrev(i_)
    Next i_
    Call LMClearRequestFields(State)
    State.NeedF = True
    State.RState.Stage = 10#
    GoTo lbl_rcomm
lbl_10:
    GoTo lbl_31
lbl_47:
lbl_44:
    If Not (State.StpMax = 0# And (State.UserMode = LMModeFGJ Or State.UserMode = LMModeFGH) And State.Flags \ LMFlagNoIntLBFGS Mod 2# = 0#) Then
        GoTo lbl_48
    End If
    
    '
    ' Optimize using LBFGS, with inv(cholesky(H)) as preconditioner.
    '
    ' It is possible only when StpMax=0, because we can't guarantee
    ' that step remains bounded when preconditioner is used (we need
    ' SVD decomposition to do that, which is too slow).
    '
    Call RMatrixTRInverse(State.Model, N, True, False, State.InvInfo, State.InvRep)
    If State.InvInfo <= 0# Then
        GoTo lbl_50
    End If
    
    '
    ' if matrix can be inverted, use it.
    ' just silently move to next iteration otherwise.
    ' (will be very, very rare, mostly for specially
    ' designed near-degenerate tasks)
    '
    For i_ = 0# To N - 1# Step 1
        State.XBase(i_) = State.X(i_)
    Next i_
    For i = 0# To N - 1# Step 1
        State.XPrec(i) = 0#
    Next i
    Call MinLBFGSCreateX(N, MinInt(N, LMIntLBFGSIts), State.XPrec, LBFGSFlags, State.InternalState)
    Call MinLBFGSSetCond(State.InternalState, 0#, 0#, 0#, LMIntLBFGSIts)
lbl_52:
    If Not MinLBFGSIteration(State.InternalState) Then
        GoTo lbl_53
    End If
    
    '
    ' convert XPrec to unpreconditioned form, then call RComm.
    '
    For i = 0# To N - 1# Step 1
        V = 0#
        For i_ = i To N - 1# Step 1
            V = V + State.InternalState.X(i_) * State.Model(i, i_)
        Next i_
        State.X(i) = State.XBase(i) + V
    Next i
    Call LMClearRequestFields(State)
    State.NeedFG = True
    State.RState.Stage = 11#
    GoTo lbl_rcomm
lbl_11:
    State.RepNFunc = State.RepNFunc + 1#
    State.RepNGrad = State.RepNGrad + 1#
    
    '
    ' 1. pass State.F to State.InternalState.F
    ' 2. convert gradient back to preconditioned form
    '
    State.InternalState.F = State.F
    For i = 0# To N - 1# Step 1
        State.InternalState.G(i) = 0#
    Next i
    For i = 0# To N - 1# Step 1
        V = State.G(i)
        For i_ = i To N - 1# Step 1
            State.InternalState.G(i_) = State.InternalState.G(i_) + V * State.Model(i, i_)
        Next i_
    Next i
    
    '
    ' next iteration
    '
    GoTo lbl_52
lbl_53:
    
    '
    ' change LBFGS flags to NoRealloc.
    ' L-BFGS subroutine will use memory allocated from previous run.
    ' it is possible since all subsequent calls will be with same N/M.
    '
    LBFGSFlags = LBFGSNoRealloc
    
    '
    ' back to unpreconditioned X
    '
    Call MinLBFGSResults(State.InternalState, State.XPrec, State.InternalRep)
    For i = 0# To N - 1# Step 1
        V = 0#
        For i_ = i To N - 1# Step 1
            V = V + State.XPrec(i_) * State.Model(i, i_)
        Next i_
        State.X(i) = State.XBase(i) + V
    Next i
lbl_50:
lbl_48:
    
    '
    ' Composite iteration is almost over:
    ' * accept new position.
    ' * rebuild quadratic model
    '
    State.RepIterationsCount = State.RepIterationsCount + 1#
    If State.UserMode <> LMModeFGH Then
        GoTo lbl_54
    End If
    Call LMClearRequestFields(State)
    State.NeedFGH = True
    State.RState.Stage = 12#
    GoTo lbl_rcomm
lbl_12:
    State.RepNFunc = State.RepNFunc + 1#
    State.RepNGrad = State.RepNGrad + 1#
    State.RepNHess = State.RepNHess + 1#
    Call RMatrixCopy(N, N, State.H, 0#, 0#, State.RawModel, 0#, 0#)
    For i_ = 0# To N - 1# Step 1
        State.GBase(i_) = State.G(i_)
    Next i_
    FNew = State.F
lbl_54:
    If Not (State.UserMode = LMModeFGJ Or State.UserMode = LMModeFJ) Then
        GoTo lbl_56
    End If
    Call LMClearRequestFields(State)
    State.NeedFiJ = True
    State.RState.Stage = 13#
    GoTo lbl_rcomm
lbl_13:
    State.RepNFunc = State.RepNFunc + 1#
    State.RepNJac = State.RepNJac + 1#
    Call RMatrixGEMM(N, N, M, 2#, State.j, 0#, 0#, 1#, State.j, 0#, 0#, 0#, 0#, State.RawModel, 0#, 0#)
    Call RMatrixMV(N, M, State.j, 0#, 0#, 1#, State.FI, 0#, State.GBase, 0#)
    For i_ = 0# To N - 1# Step 1
        State.GBase(i_) = 2 * State.GBase(i_)
    Next i_
    FNew = 0#
    For i_ = 0# To M - 1# Step 1
        FNew = FNew + State.FI(i_) * State.FI(i_)
    Next i_
lbl_56:
    
    '
    ' Stopping conditions
    '
    For i_ = 0# To N - 1# Step 1
        State.WORK(i_) = State.XPrev(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        State.WORK(i_) = State.WORK(i_) - State.X(i_)
    Next i_
    StepNorm = 0#
    For i_ = 0# To N - 1# Step 1
        StepNorm = StepNorm + State.WORK(i_) * State.WORK(i_)
    Next i_
    StepNorm = Sqr(StepNorm)
    If StepNorm <= State.EpsX Then
        State.RepTerminationType = 2#
        GoTo lbl_31
    End If
    If State.RepIterationsCount >= State.MaxIts And State.MaxIts > 0# Then
        State.RepTerminationType = 5#
        GoTo lbl_31
    End If
    V = 0#
    For i_ = 0# To N - 1# Step 1
        V = V + State.GBase(i_) * State.GBase(i_)
    Next i_
    V = Sqr(V)
    If V <= State.EpsG Then
        State.RepTerminationType = 4#
        GoTo lbl_31
    End If
    If Abs(FNew - FBase) <= State.EpsF * MaxReal(1#, MaxReal(Abs(FNew), Abs(FBase))) Then
        State.RepTerminationType = 1#
        GoTo lbl_31
    End If
    
    '
    ' Now, iteration is finally over:
    ' * update FBase
    ' * decrease lambda
    ' * report new iteration
    '
    If Not State.XRep Then
        GoTo lbl_58
    End If
    Call LMClearRequestFields(State)
    State.XUpdated = True
    State.F = FNew
    State.RState.Stage = 14#
    GoTo lbl_rcomm
lbl_14:
lbl_58:
    FBase = FNew
    Call DecreaseLambda(Lambda, Nu, LambdaDown)
    GoTo lbl_30
lbl_31:
    
    '
    ' final point is reported
    '
    If Not State.XRep Then
        GoTo lbl_60
    End If
    Call LMClearRequestFields(State)
    State.XUpdated = True
    State.F = FNew
    State.RState.Stage = 15#
    GoTo lbl_rcomm
lbl_15:
lbl_60:
    Result = False
    MinLMIteration = Result
    Exit Function
    
    '
    ' Saving state
    '
lbl_rcomm:
    Result = True
    State.RState.IA(0#) = N
    State.RState.IA(1#) = M
    State.RState.IA(2#) = i
    State.RState.IA(3#) = LBFGSFlags
    State.RState.BA(0#) = SPD
    State.RState.RA(0#) = StepNorm
    State.RState.RA(1#) = FBase
    State.RState.RA(2#) = FNew
    State.RState.RA(3#) = Lambda
    State.RState.RA(4#) = Nu
    State.RState.RA(5#) = LambdaUp
    State.RState.RA(6#) = LambdaDown
    State.RState.RA(7#) = V
    MinLMIteration = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Levenberg-Marquardt algorithm results
'
'Called after MinLMIteration returned False.
'
'Input parameters:
'    State   -   algorithm state (used by MinLMIteration).
'
'Output parameters:
'    X       -   array[0..N-1], solution
'    Rep     -   optimization report:
'                * Rep.TerminationType completetion code:
'                    * -1    incorrect parameters were specified
'                    *  1    relative function improvement is no more than
'                            EpsF.
'                    *  2    relative step is no more than EpsX.
'                    *  4    gradient is no more than EpsG.
'                    *  5    MaxIts steps was taken
'                    *  7    stopping conditions are too stringent,
'                            further improvement is impossible
'                * Rep.IterationsCount contains iterations count
'                * Rep.NFunc     - number of function calculations
'                * Rep.NJac      - number of Jacobi matrix calculations
'                * Rep.NGrad     - number of gradient calculations
'                * Rep.NHess     - number of Hessian calculations
'                * Rep.NCholesky - number of Cholesky decomposition calculations
'
'  -- ALGLIB --
'     Copyright 10.03.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub MinLMResults(ByRef State As MinLMState, _
         ByRef X() As Double, _
         ByRef Rep As MinLMReport)
    Dim i_ As Long
    ReDim X(0# To State.N - 1#)
    For i_ = 0# To State.N - 1# Step 1
        X(i_) = State.X(i_)
    Next i_
    Rep.IterationsCount = State.RepIterationsCount
    Rep.TerminationType = State.RepTerminationType
    Rep.NFunc = State.RepNFunc
    Rep.NJac = State.RepNJac
    Rep.NGrad = State.RepNGrad
    Rep.NHess = State.RepNHess
    Rep.NCholesky = State.RepNCholesky
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Prepare internal structures (except for RComm).
'
'Note: M must be zero for FGH mode, non-zero for FJ/FGJ mode.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub LMPrepare(ByVal N As Long, _
         ByVal M As Long, _
         ByVal HaveGrad As Boolean, _
         ByRef State As MinLMState)
    State.RepIterationsCount = 0#
    State.RepTerminationType = 0#
    State.RepNFunc = 0#
    State.RepNJac = 0#
    State.RepNGrad = 0#
    State.RepNHess = 0#
    State.RepNCholesky = 0#
    If N <= 0# Or M < 0# Then
        Exit Sub
    End If
    If HaveGrad Then
        ReDim State.G(0# To N - 1#)
    End If
    If M <> 0# Then
        ReDim State.j(0# To M - 1#, 0# To N - 1#)
        ReDim State.FI(0# To M - 1#)
        ReDim State.H(0# To 0#, 0# To 0#)
    Else
        ReDim State.j(0# To 0#, 0# To 0#)
        ReDim State.FI(0# To 0#)
        ReDim State.H(0# To N - 1#, 0# To N - 1#)
    End If
    ReDim State.X(0# To N - 1#)
    ReDim State.RawModel(0# To N - 1#, 0# To N - 1#)
    ReDim State.Model(0# To N - 1#, 0# To N - 1#)
    ReDim State.XBase(0# To N - 1#)
    ReDim State.XPrec(0# To N - 1#)
    ReDim State.GBase(0# To N - 1#)
    ReDim State.XDir(0# To N - 1#)
    ReDim State.XPrev(0# To N - 1#)
    ReDim State.WORK(0# To MaxInt(N, M))
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Clears request fileds (to be sure that we don't forgot to clear something)
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub LMClearRequestFields(ByRef State As MinLMState)
    State.NeedF = False
    State.NeedFG = False
    State.NeedFGH = False
    State.NeedFiJ = False
    State.XUpdated = False
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Increases lambda, returns False when there is a danger of overflow
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function IncreaseLambda(ByRef Lambda As Double, _
         ByRef Nu As Double, _
         ByVal LambdaUp As Double) As Boolean
    Dim Result As Boolean
    Dim LnLambda As Double
    Dim LnNu As Double
    Dim LnLambdaUp As Double
    Dim LnMax As Double
    Result = False
    LnLambda = Log(Lambda)
    LnLambdaUp = Log(LambdaUp)
    LnNu = Log(Nu)
    LnMax = Log(MaxRealNumber)
    If LnLambda + LnLambdaUp + LnNu > LnMax Then
        IncreaseLambda = Result
        Exit Function
    End If
    If LnNu + Log(2#) > LnMax Then
        IncreaseLambda = Result
        Exit Function
    End If
    Lambda = Lambda * LambdaUp * Nu
    Nu = Nu * 2#
    Result = True
    IncreaseLambda = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Decreases lambda, but leaves it unchanged when there is danger of underflow.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub DecreaseLambda(ByRef Lambda As Double, _
         ByRef Nu As Double, _
         ByVal LambdaDown As Double)
    Nu = 1#
    If Log(Lambda) + Log(LambdaDown) < Log(MinRealNumber) Then
        Lambda = MinRealNumber
    Else
        Lambda = Lambda * LambdaDown
    End If
End Sub

