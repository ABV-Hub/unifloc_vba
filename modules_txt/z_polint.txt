''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2006-2009, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Data types
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Polynomial fitting report:
'    TaskRCond       reciprocal of task's condition number
'    RMSError        RMS error
'    AvgError        average error
'    AvgRelError     average relative error (for non-zero Y[I])
'    MaxError        maximum error
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Type PolynomialFitReport
    TaskRCond As Double
    RMSError As Double
    AvgError As Double
    AvgRelError As Double
    MaxError As Double
End Type
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Lagrange intepolant: generation of the model on the general grid.
'This function has O(N^2) complexity.
'
'INPUT PARAMETERS:
'    X   -   abscissas, array[0..N-1]
'    Y   -   function values, array[0..N-1]
'    N   -   number of points, N>=1
'
'OIYTPUT PARAMETERS
'    P   -   barycentric model which represents Lagrange interpolant
'            (see ratint unit info and BarycentricCalc() description for
'            more information).
'
'  -- ALGLIB --
'     Copyright 02.12.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PolynomialBuild(ByRef X() As Double, _
         ByRef y() As Double, _
         ByVal N As Long, _
         ByRef p As BarycentricInterpolant)
    Dim j As Long
    Dim K As Long
    Dim w() As Double
    Dim B As Double
    Dim A As Double
    Dim V As Double
    Dim MX As Double
    Dim i_ As Long
    
    '
    ' calculate W[j]
    ' multi-pass algorithm is used to avoid overflow
    '
    ReDim w(0 To N - 1)
    A = X(0#)
    B = X(0#)
    For j = 0# To N - 1# Step 1
        w(j) = 1#
        A = MinReal(A, X(j))
        B = MaxReal(B, X(j))
    Next j
    For K = 0# To N - 1# Step 1
        
        '
        ' W[K] is used instead of 0.0 because
        ' cycle on J does not touch K-th element
        ' and we MUST get maximum from ALL elements
        '
        MX = Abs(w(K))
        For j = 0# To N - 1# Step 1
            If j <> K Then
                V = (B - A) / (X(j) - X(K))
                w(j) = w(j) * V
                MX = MaxReal(MX, Abs(w(j)))
            End If
        Next j
        If K Mod 5# = 0# Then
            
            '
            ' every 5-th run we renormalize W[]
            '
            V = 1# / MX
            For i_ = 0# To N - 1# Step 1
                w(i_) = V * w(i_)
            Next i_
        End If
    Next K
    Call BarycentricBuildXYW(X, y, w, N, p)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Lagrange intepolant: generation of the model on equidistant grid.
'This function has O(N) complexity.
'
'INPUT PARAMETERS:
'    A   -   left boundary of [A,B]
'    B   -   right boundary of [A,B]
'    Y   -   function values at the nodes, array[0..N-1]
'    N   -   number of points, N>=1
'            for N=1 a constant model is constructed.
'
'OIYTPUT PARAMETERS
'    P   -   barycentric model which represents Lagrange interpolant
'            (see ratint unit info and BarycentricCalc() description for
'            more information).
'
'  -- ALGLIB --
'     Copyright 03.12.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PolynomialBuildEqDist(ByVal A As Double, _
         ByVal B As Double, _
         ByRef y() As Double, _
         ByVal N As Long, _
         ByRef p As BarycentricInterpolant)
    Dim i As Long
    Dim w() As Double
    Dim X() As Double
    Dim V As Double
    
    '
    ' Special case: N=1
    '
    If N = 1# Then
        ReDim X(0 To 1# - 1)
        ReDim w(0 To 1# - 1)
        X(0#) = 0.5 * (B + A)
        w(0#) = 1#
        Call BarycentricBuildXYW(X, y, w, 1#, p)
        Exit Sub
    End If
    
    '
    ' general case
    '
    ReDim X(0 To N - 1)
    ReDim w(0 To N - 1)
    V = 1#
    For i = 0# To N - 1# Step 1
        w(i) = V
        X(i) = A + (B - A) * i / (N - 1#)
        V = -(V * (N - 1# - i))
        V = V / (i + 1#)
    Next i
    Call BarycentricBuildXYW(X, y, w, N, p)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Lagrange intepolant on Chebyshev grid (first kind).
'This function has O(N) complexity.
'
'INPUT PARAMETERS:
'    A   -   left boundary of [A,B]
'    B   -   right boundary of [A,B]
'    Y   -   function values at the nodes, array[0..N-1],
'            Y[I] = Y(0.5*(B+A) + 0.5*(B-A)*Cos(PI*(2*i+1)/(2*n)))
'    N   -   number of points, N>=1
'            for N=1 a constant model is constructed.
'
'OIYTPUT PARAMETERS
'    P   -   barycentric model which represents Lagrange interpolant
'            (see ratint unit info and BarycentricCalc() description for
'            more information).
'
'  -- ALGLIB --
'     Copyright 03.12.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PolynomialBuildCheb1(ByVal A As Double, _
         ByVal B As Double, _
         ByRef y() As Double, _
         ByVal N As Long, _
         ByRef p As BarycentricInterpolant)
    Dim i As Long
    Dim w() As Double
    Dim X() As Double
    Dim V As Double
    Dim T As Double
    
    '
    ' Special case: N=1
    '
    If N = 1# Then
        ReDim X(0 To 1# - 1)
        ReDim w(0 To 1# - 1)
        X(0#) = 0.5 * (B + A)
        w(0#) = 1#
        Call BarycentricBuildXYW(X, y, w, 1#, p)
        Exit Sub
    End If
    
    '
    ' general case
    '
    ReDim X(0 To N - 1)
    ReDim w(0 To N - 1)
    V = 1#
    For i = 0# To N - 1# Step 1
        T = Tan(0.5 * Pi() * (2# * i + 1#) / (2# * N))
        w(i) = 2# * V * T / (1# + Square(T))
        X(i) = 0.5 * (B + A) + 0.5 * (B - A) * (1# - Square(T)) / (1# + Square(T))
        V = -V
    Next i
    Call BarycentricBuildXYW(X, y, w, N, p)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Lagrange intepolant on Chebyshev grid (second kind).
'This function has O(N) complexity.
'
'INPUT PARAMETERS:
'    A   -   left boundary of [A,B]
'    B   -   right boundary of [A,B]
'    Y   -   function values at the nodes, array[0..N-1],
'            Y[I] = Y(0.5*(B+A) + 0.5*(B-A)*Cos(PI*i/(n-1)))
'    N   -   number of points, N>=1
'            for N=1 a constant model is constructed.
'
'OIYTPUT PARAMETERS
'    P   -   barycentric model which represents Lagrange interpolant
'            (see ratint unit info and BarycentricCalc() description for
'            more information).
'
'  -- ALGLIB --
'     Copyright 03.12.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PolynomialBuildCheb2(ByVal A As Double, _
         ByVal B As Double, _
         ByRef y() As Double, _
         ByVal N As Long, _
         ByRef p As BarycentricInterpolant)
    Dim i As Long
    Dim w() As Double
    Dim X() As Double
    Dim V As Double
    
    '
    ' Special case: N=1
    '
    If N = 1# Then
        ReDim X(0 To 1# - 1)
        ReDim w(0 To 1# - 1)
        X(0#) = 0.5 * (B + A)
        w(0#) = 1#
        Call BarycentricBuildXYW(X, y, w, 1#, p)
        Exit Sub
    End If
    
    '
    ' general case
    '
    ReDim X(0 To N - 1)
    ReDim w(0 To N - 1)
    V = 1#
    For i = 0# To N - 1# Step 1
        If i = 0# Or i = N - 1# Then
            w(i) = V * 0.5
        Else
            w(i) = V
        End If
        X(i) = 0.5 * (B + A) + 0.5 * (B - A) * Cos(Pi() * i / (N - 1#))
        V = -V
    Next i
    Call BarycentricBuildXYW(X, y, w, N, p)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Fast equidistant polynomial interpolation function with O(N) complexity
'
'INPUT PARAMETERS:
'    A   -   left boundary of [A,B]
'    B   -   right boundary of [A,B]
'    F   -   function values, array[0..N-1]
'    N   -   number of points on equidistant grid, N>=1
'            for N=1 a constant model is constructed.
'    T   -   position where P(x) is calculated
'
'RESULT
'    value of the Lagrange interpolant at T
'
'IMPORTANT
'    this function provides fast interface which is not overflow-safe
'    nor it is very precise.
'    the best option is to use  PolynomialBuildEqDist()/BarycentricCalc()
'    subroutines unless you are pretty sure that your data will not result
'    in overflow.
'
'  -- ALGLIB --
'     Copyright 02.12.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function PolynomialCalcEqDist(ByVal A As Double, _
         ByVal B As Double, _
         ByRef F() As Double, _
         ByVal N As Long, _
         ByVal T As Double) As Double
    Dim Result As Double
    Dim S1 As Double
    Dim S2 As Double
    Dim V As Double
    Dim Threshold As Double
    Dim S As Double
    Dim H As Double
    Dim i As Long
    Dim j As Long
    Dim w As Double
    Dim X As Double
    Threshold = Sqr(MinRealNumber)
    
    '
    ' Special case: N=1
    '
    If N = 1# Then
        Result = F(0#)
        PolynomialCalcEqDist = Result
        Exit Function
    End If
    
    '
    ' First, decide: should we use "safe" formula (guarded
    ' against overflow) or fast one?
    '
    j = 0#
    S = T - A
    For i = 1# To N - 1# Step 1
        X = A + i / (N - 1#) * (B - A)
        If Abs(T - X) < Abs(S) Then
            S = T - X
            j = i
        End If
    Next i
    If S = 0# Then
        Result = F(j)
        PolynomialCalcEqDist = Result
        Exit Function
    End If
    If Abs(S) > Threshold Then
        
        '
        ' use fast formula
        '
        j = -1#
        S = 1#
    End If
    
    '
    ' Calculate using safe or fast barycentric formula
    '
    S1 = 0#
    S2 = 0#
    w = 1#
    H = (B - A) / (N - 1#)
    For i = 0# To N - 1# Step 1
        If i <> j Then
            V = S * w / (T - (A + i * H))
            S1 = S1 + V * F(i)
            S2 = S2 + V
        Else
            V = w
            S1 = S1 + V * F(i)
            S2 = S2 + V
        End If
        w = -(w * (N - 1# - i))
        w = w / (i + 1#)
    Next i
    Result = S1 / S2
    PolynomialCalcEqDist = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Fast polynomial interpolation function on Chebyshev points (first kind)
'with O(N) complexity.
'
'INPUT PARAMETERS:
'    A   -   left boundary of [A,B]
'    B   -   right boundary of [A,B]
'    F   -   function values, array[0..N-1]
'    N   -   number of points on Chebyshev grid (first kind),
'            X[i] = 0.5*(B+A) + 0.5*(B-A)*Cos(PI*(2*i+1)/(2*n))
'            for N=1 a constant model is constructed.
'    T   -   position where P(x) is calculated
'
'RESULT
'    value of the Lagrange interpolant at T
'
'IMPORTANT
'    this function provides fast interface which is not overflow-safe
'    nor it is very precise.
'    the best option is to use  PolIntBuildCheb1()/BarycentricCalc()
'    subroutines unless you are pretty sure that your data will not result
'    in overflow.
'
'  -- ALGLIB --
'     Copyright 02.12.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function PolynomialCalcCheb1(ByVal A As Double, _
         ByVal B As Double, _
         ByRef F() As Double, _
         ByVal N As Long, _
         ByVal T As Double) As Double
    Dim Result As Double
    Dim S1 As Double
    Dim S2 As Double
    Dim V As Double
    Dim Threshold As Double
    Dim S As Double
    Dim i As Long
    Dim j As Long
    Dim A0 As Double
    Dim Delta As Double
    Dim Alpha As Double
    Dim Beta As Double
    Dim CA As Double
    Dim SA As Double
    Dim TempC As Double
    Dim TempS As Double
    Dim X As Double
    Dim w As Double
    Dim P1 As Double
    Threshold = Sqr(MinRealNumber)
    T = (T - 0.5 * (A + B)) / (0.5 * (B - A))
    
    '
    ' Fast exit
    '
    If N = 1# Then
        Result = F(0#)
        PolynomialCalcCheb1 = Result
        Exit Function
    End If
    
    '
    ' Prepare information for the recurrence formula
    ' used to calculate sin(pi*(2j+1)/(2n+2)) and
    ' cos(pi*(2j+1)/(2n+2)):
    '
    ' A0    = pi/(2n+2)
    ' Delta = pi/(n+1)
    ' Alpha = 2 sin^2 (Delta/2)
    ' Beta  = sin(Delta)
    '
    ' so that sin(..) = sin(A0+j*delta) and cos(..) = cos(A0+j*delta).
    ' Then we use
    '
    ' sin(x+delta) = sin(x) - (alpha*sin(x) - beta*cos(x))
    ' cos(x+delta) = cos(x) - (alpha*cos(x) - beta*sin(x))
    '
    ' to repeatedly calculate sin(..) and cos(..).
    '
    A0 = Pi() / (2# * (N - 1#) + 2#)
    Delta = 2# * Pi() / (2# * (N - 1#) + 2#)
    Alpha = 2# * Square(Sin(Delta / 2#))
    Beta = Sin(Delta)
    
    '
    ' First, decide: should we use "safe" formula (guarded
    ' against overflow) or fast one?
    '
    CA = Cos(A0)
    SA = Sin(A0)
    j = 0#
    X = CA
    S = T - X
    For i = 1# To N - 1# Step 1
        
        '
        ' Next X[i]
        '
        TempS = SA - (Alpha * SA - Beta * CA)
        TempC = CA - (Alpha * CA + Beta * SA)
        SA = TempS
        CA = TempC
        X = CA
        
        '
        ' Use X[i]
        '
        If Abs(T - X) < Abs(S) Then
            S = T - X
            j = i
        End If
    Next i
    If S = 0# Then
        Result = F(j)
        PolynomialCalcCheb1 = Result
        Exit Function
    End If
    If Abs(S) > Threshold Then
        
        '
        ' use fast formula
        '
        j = -1#
        S = 1#
    End If
    
    '
    ' Calculate using safe or fast barycentric formula
    '
    S1 = 0#
    S2 = 0#
    CA = Cos(A0)
    SA = Sin(A0)
    P1 = 1#
    For i = 0# To N - 1# Step 1
        
        '
        ' Calculate X[i], W[i]
        '
        X = CA
        w = P1 * SA
        
        '
        ' Proceed
        '
        If i <> j Then
            V = S * w / (T - X)
            S1 = S1 + V * F(i)
            S2 = S2 + V
        Else
            V = w
            S1 = S1 + V * F(i)
            S2 = S2 + V
        End If
        
        '
        ' Next CA, SA, P1
        '
        TempS = SA - (Alpha * SA - Beta * CA)
        TempC = CA - (Alpha * CA + Beta * SA)
        SA = TempS
        CA = TempC
        P1 = -P1
    Next i
    Result = S1 / S2
    PolynomialCalcCheb1 = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Fast polynomial interpolation function on Chebyshev points (second kind)
'with O(N) complexity.
'
'INPUT PARAMETERS:
'    A   -   left boundary of [A,B]
'    B   -   right boundary of [A,B]
'    F   -   function values, array[0..N-1]
'    N   -   number of points on Chebyshev grid (second kind),
'            X[i] = 0.5*(B+A) + 0.5*(B-A)*Cos(PI*i/(n-1))
'            for N=1 a constant model is constructed.
'    T   -   position where P(x) is calculated
'
'RESULT
'    value of the Lagrange interpolant at T
'
'IMPORTANT
'    this function provides fast interface which is not overflow-safe
'    nor it is very precise.
'    the best option is to use PolIntBuildCheb2()/BarycentricCalc()
'    subroutines unless you are pretty sure that your data will not result
'    in overflow.
'
'  -- ALGLIB --
'     Copyright 02.12.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function PolynomialCalcCheb2(ByVal A As Double, _
         ByVal B As Double, _
         ByRef F() As Double, _
         ByVal N As Long, _
         ByVal T As Double) As Double
    Dim Result As Double
    Dim S1 As Double
    Dim S2 As Double
    Dim V As Double
    Dim Threshold As Double
    Dim S As Double
    Dim i As Long
    Dim j As Long
    Dim A0 As Double
    Dim Delta As Double
    Dim Alpha As Double
    Dim Beta As Double
    Dim CA As Double
    Dim SA As Double
    Dim TempC As Double
    Dim TempS As Double
    Dim X As Double
    Dim w As Double
    Dim P1 As Double
    Threshold = Sqr(MinRealNumber)
    T = (T - 0.5 * (A + B)) / (0.5 * (B - A))
    
    '
    ' Fast exit
    '
    If N = 1# Then
        Result = F(0#)
        PolynomialCalcCheb2 = Result
        Exit Function
    End If
    
    '
    ' Prepare information for the recurrence formula
    ' used to calculate sin(pi*i/n) and
    ' cos(pi*i/n):
    '
    ' A0    = 0
    ' Delta = pi/n
    ' Alpha = 2 sin^2 (Delta/2)
    ' Beta  = sin(Delta)
    '
    ' so that sin(..) = sin(A0+j*delta) and cos(..) = cos(A0+j*delta).
    ' Then we use
    '
    ' sin(x+delta) = sin(x) - (alpha*sin(x) - beta*cos(x))
    ' cos(x+delta) = cos(x) - (alpha*cos(x) - beta*sin(x))
    '
    ' to repeatedly calculate sin(..) and cos(..).
    '
    A0 = 0#
    Delta = Pi() / (N - 1#)
    Alpha = 2# * Square(Sin(Delta / 2#))
    Beta = Sin(Delta)
    
    '
    ' First, decide: should we use "safe" formula (guarded
    ' against overflow) or fast one?
    '
    CA = Cos(A0)
    SA = Sin(A0)
    j = 0#
    X = CA
    S = T - X
    For i = 1# To N - 1# Step 1
        
        '
        ' Next X[i]
        '
        TempS = SA - (Alpha * SA - Beta * CA)
        TempC = CA - (Alpha * CA + Beta * SA)
        SA = TempS
        CA = TempC
        X = CA
        
        '
        ' Use X[i]
        '
        If Abs(T - X) < Abs(S) Then
            S = T - X
            j = i
        End If
    Next i
    If S = 0# Then
        Result = F(j)
        PolynomialCalcCheb2 = Result
        Exit Function
    End If
    If Abs(S) > Threshold Then
        
        '
        ' use fast formula
        '
        j = -1#
        S = 1#
    End If
    
    '
    ' Calculate using safe or fast barycentric formula
    '
    S1 = 0#
    S2 = 0#
    CA = Cos(A0)
    SA = Sin(A0)
    P1 = 1#
    For i = 0# To N - 1# Step 1
        
        '
        ' Calculate X[i], W[i]
        '
        X = CA
        If i = 0# Or i = N - 1# Then
            w = 0.5 * P1
        Else
            w = 1# * P1
        End If
        
        '
        ' Proceed
        '
        If i <> j Then
            V = S * w / (T - X)
            S1 = S1 + V * F(i)
            S2 = S2 + V
        Else
            V = w
            S1 = S1 + V * F(i)
            S2 = S2 + V
        End If
        
        '
        ' Next CA, SA, P1
        '
        TempS = SA - (Alpha * SA - Beta * CA)
        TempC = CA - (Alpha * CA + Beta * SA)
        SA = TempS
        CA = TempC
        P1 = -P1
    Next i
    Result = S1 / S2
    PolynomialCalcCheb2 = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Least squares fitting by polynomial.
'
'This subroutine is "lightweight" alternative for more complex and feature-
'rich PolynomialFitWC().  See  PolynomialFitWC() for more information about
'subroutine parameters (we don't duplicate it here because of length)
'
'  -- ALGLIB PROJECT --
'     Copyright 12.10.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PolynomialFit(ByRef X() As Double, _
         ByRef y() As Double, _
         ByVal N As Long, _
         ByVal M As Long, _
         ByRef Info As Long, _
         ByRef p As BarycentricInterpolant, _
         ByRef Rep As PolynomialFitReport)
    Dim i As Long
    Dim w() As Double
    Dim XC() As Double
    Dim YC() As Double
    Dim DC() As Long
    If N > 0# Then
        ReDim w(0 To N - 1)
        For i = 0# To N - 1# Step 1
            w(i) = 1#
        Next i
    End If
    Call PolynomialFitWC(X, y, w, N, XC, YC, DC, 0#, M, Info, p, Rep)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Weighted  fitting  by  Chebyshev  polynomial  in  barycentric  form,  with
'constraints on function values or first derivatives.
'
'Small regularizing term is used when solving constrained tasks (to improve
'stability).
'
'Task is linear, so linear least squares solver is used. Complexity of this
'computational scheme is O(N*M^2), mostly dominated by least squares solver
'
'SEE ALSO:
'    PolynomialFit()
'
'INPUT PARAMETERS:
'    X   -   points, array[0..N-1].
'    Y   -   function values, array[0..N-1].
'    W   -   weights, array[0..N-1]
'            Each summand in square  sum  of  approximation deviations from
'            given  values  is  multiplied  by  the square of corresponding
'            weight. Fill it by 1's if you don't  want  to  solve  weighted
'            task.
'    N   -   number of points, N>0.
'    XC  -   points where polynomial values/derivatives are constrained,
'            array[0..K-1].
'    YC  -   values of constraints, array[0..K-1]
'    DC  -   array[0..K-1], types of constraints:
'            * DC[i]=0   means that P(XC[i])=YC[i]
'            * DC[i]=1   means that P'(XC[i])=YC[i]
'            SEE BELOW FOR IMPORTANT INFORMATION ON CONSTRAINTS
'    K   -   number of constraints, 0<=K<M.
'            K=0 means no constraints (XC/YC/DC are not used in such cases)
'    M   -   number of basis functions (= polynomial_degree + 1), M>=1
'
'OUTPUT PARAMETERS:
'    Info-   same format as in LSFitLinearW() subroutine:
'            * Info>0    task is solved
'            * Info<=0   an error occured:
'                        -4 means inconvergence of internal SVD
'                        -3 means inconsistent constraints
'                        -1 means another errors in parameters passed
'                           (N<=0, for example)
'    P   -   interpolant in barycentric form.
'    Rep -   report, same format as in LSFitLinearW() subroutine.
'            Following fields are set:
'            * RMSError      rms error on the (X,Y).
'            * AvgError      average error on the (X,Y).
'            * AvgRelError   average relative error on the non-zero Y
'            * MaxError      maximum error
'                            NON-WEIGHTED ERRORS ARE CALCULATED
'
'IMPORTANT:
'    this subroitine doesn't calculate task's condition number for K<>0.
'
'SETTING CONSTRAINTS - DANGERS AND OPPORTUNITIES:
'
'Setting constraints can lead  to undesired  results,  like ill-conditioned
'behavior, or inconsistency being detected. From the other side,  it allows
'us to improve quality of the fit. Here we summarize  our  experience  with
'constrained regression splines:
'* even simple constraints can be inconsistent, see  Wikipedia  article  on
'  this subject: http://en.wikipedia.org/wiki/Birkhoff_interpolation
'* the  greater  is  M (given  fixed  constraints),  the  more chances that
'  constraints will be consistent
'* in the general case, consistency of constraints is NOT GUARANTEED.
'* in the one special cases, however, we can  guarantee  consistency.  This
'  case  is:  M>1  and constraints on the function values (NOT DERIVATIVES)
'
'Our final recommendation is to use constraints  WHEN  AND  ONLY  when  you
'can't solve your task without them. Anything beyond  special  cases  given
'above is not guaranteed and may result in inconsistency.
'
'  -- ALGLIB PROJECT --
'     Copyright 10.12.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PolynomialFitWC(ByRef X_() As Double, _
         ByRef y_() As Double, _
         ByRef w() As Double, _
         ByVal N As Long, _
         ByRef XC_() As Double, _
         ByRef YC_() As Double, _
         ByRef DC() As Long, _
         ByVal K As Long, _
         ByVal M As Long, _
         ByRef Info As Long, _
         ByRef p As BarycentricInterpolant, _
         ByRef Rep As PolynomialFitReport)
    Dim X() As Double
    Dim y() As Double
    Dim XC() As Double
    Dim YC() As Double
    Dim XA As Double
    Dim XB As Double
    Dim SA As Double
    Dim SB As Double
    Dim XOriginal() As Double
    Dim YOriginal() As Double
    Dim Y2() As Double
    Dim W2() As Double
    Dim Tmp() As Double
    Dim Tmp2() As Double
    Dim TmpDiff() As Double
    Dim BX() As Double
    Dim BY() As Double
    Dim BW() As Double
    Dim FMatrix() As Double
    Dim CMatrix() As Double
    Dim i As Long
    Dim j As Long
    Dim MX As Double
    Dim Decay As Double
    Dim U As Double
    Dim V As Double
    Dim S As Double
    Dim RelCnt As Long
    Dim LRep As LSFitReport
    Dim i_ As Long
    X = X_
    y = y_
    XC = XC_
    YC = YC_
    If M < 1# Or N < 1# Or K < 0# Or K >= M Then
        Info = -1#
        Exit Sub
    End If
    For i = 0# To K - 1# Step 1
        Info = 0#
        If DC(i) < 0# Then
            Info = -1#
        End If
        If DC(i) > 1# Then
            Info = -1#
        End If
        If Info < 0# Then
            Exit Sub
        End If
    Next i
    
    '
    ' weight decay for correct handling of task which becomes
    ' degenerate after constraints are applied
    '
    Decay = 10000# * MachineEpsilon
    
    '
    ' Scale X, Y, XC, YC
    '
    Call LSFitScaleXY(X, y, N, XC, YC, DC, K, XA, XB, SA, SB, XOriginal, YOriginal)
    
    '
    ' allocate space, initialize/fill:
    ' * FMatrix-   values of basis functions at X[]
    ' * CMatrix-   values (derivatives) of basis functions at XC[]
    ' * fill constraints matrix
    ' * fill first N rows of design matrix with values
    ' * fill next M rows of design matrix with regularizing term
    ' * append M zeros to Y
    ' * append M elements, mean(abs(W)) each, to W
    '
    ReDim Y2(0 To N + M - 1)
    ReDim W2(0 To N + M - 1)
    ReDim Tmp(0 To M - 1)
    ReDim TmpDiff(0 To M - 1)
    ReDim FMatrix(0 To N + M - 1, 0 To M - 1)
    If K > 0# Then
        ReDim CMatrix(0 To K - 1, 0 To M + 1# - 1)
    End If
    
    '
    ' Fill design matrix, Y2, W2:
    ' * first N rows with basis functions for original points
    ' * next M rows with decay terms
    '
    For i = 0# To N - 1# Step 1
        
        '
        ' prepare Ith row
        ' use Tmp for calculations to avoid multidimensional arrays overhead
        '
        For j = 0# To M - 1# Step 1
            If j = 0# Then
                Tmp(j) = 1#
            Else
                If j = 1# Then
                    Tmp(j) = X(i)
                Else
                    Tmp(j) = 2# * X(i) * Tmp(j - 1#) - Tmp(j - 2#)
                End If
            End If
        Next j
        For i_ = 0# To M - 1# Step 1
            FMatrix(i, i_) = Tmp(i_)
        Next i_
    Next i
    For i = 0# To M - 1# Step 1
        For j = 0# To M - 1# Step 1
            If i = j Then
                FMatrix(N + i, j) = Decay
            Else
                FMatrix(N + i, j) = 0#
            End If
        Next j
    Next i
    For i_ = 0# To N - 1# Step 1
        Y2(i_) = y(i_)
    Next i_
    For i_ = 0# To N - 1# Step 1
        W2(i_) = w(i_)
    Next i_
    MX = 0#
    For i = 0# To N - 1# Step 1
        MX = MX + Abs(w(i))
    Next i
    MX = MX / N
    For i = 0# To M - 1# Step 1
        Y2(N + i) = 0#
        W2(N + i) = MX
    Next i
    
    '
    ' fill constraints matrix
    '
    For i = 0# To K - 1# Step 1
        
        '
        ' prepare Ith row
        ' use Tmp for basis function values,
        ' TmpDiff for basos function derivatives
        '
        For j = 0# To M - 1# Step 1
            If j = 0# Then
                Tmp(j) = 1#
                TmpDiff(j) = 0#
            Else
                If j = 1# Then
                    Tmp(j) = XC(i)
                    TmpDiff(j) = 1#
                Else
                    Tmp(j) = 2# * XC(i) * Tmp(j - 1#) - Tmp(j - 2#)
                    TmpDiff(j) = 2# * (Tmp(j - 1#) + XC(i) * TmpDiff(j - 1#)) - TmpDiff(j - 2#)
                End If
            End If
        Next j
        If DC(i) = 0# Then
            For i_ = 0# To M - 1# Step 1
                CMatrix(i, i_) = Tmp(i_)
            Next i_
        End If
        If DC(i) = 1# Then
            For i_ = 0# To M - 1# Step 1
                CMatrix(i, i_) = TmpDiff(i_)
            Next i_
        End If
        CMatrix(i, M) = YC(i)
    Next i
    
    '
    ' Solve constrained task
    '
    If K > 0# Then
        
        '
        ' solve using regularization
        '
        Call LSFitLinearWC(Y2, W2, FMatrix, CMatrix, N + M, M, K, Info, Tmp, LRep)
    Else
        
        '
        ' no constraints, no regularization needed
        '
        Call LSFitLinearWC(y, w, FMatrix, CMatrix, N, M, 0#, Info, Tmp, LRep)
    End If
    If Info < 0# Then
        Exit Sub
    End If
    
    '
    ' Generate barycentric model and scale it
    ' * BX, BY store barycentric model nodes
    ' * FMatrix is reused (remember - it is at least MxM, what we need)
    '
    ' Model intialization is done in O(M^2). In principle, it can be
    ' done in O(M*log(M)), but before it we solved task with O(N*M^2)
    ' complexity, so it is only a small amount of total time spent.
    '
    ReDim BX(0 To M - 1)
    ReDim BY(0 To M - 1)
    ReDim BW(0 To M - 1)
    ReDim Tmp2(0 To M - 1)
    S = 1#
    For i = 0# To M - 1# Step 1
        If M <> 1# Then
            U = Cos(Pi() * i / (M - 1#))
        Else
            U = 0#
        End If
        V = 0#
        For j = 0# To M - 1# Step 1
            If j = 0# Then
                Tmp2(j) = 1#
            Else
                If j = 1# Then
                    Tmp2(j) = U
                Else
                    Tmp2(j) = 2# * U * Tmp2(j - 1#) - Tmp2(j - 2#)
                End If
            End If
            V = V + Tmp(j) * Tmp2(j)
        Next j
        BX(i) = U
        BY(i) = V
        BW(i) = S
        If i = 0# Or i = M - 1# Then
            BW(i) = 0.5 * BW(i)
        End If
        S = -S
    Next i
    Call BarycentricBuildXYW(BX, BY, BW, M, p)
    Call BarycentricLinTransX(p, 2# / (XB - XA), -((XA + XB) / (XB - XA)))
    Call BarycentricLinTransY(p, SB - SA, SA)
    
    '
    ' Scale absolute errors obtained from LSFitLinearW.
    ' Relative error should be calculated separately
    ' (because of shifting/scaling of the task)
    '
    Rep.TaskRCond = LRep.TaskRCond
    Rep.RMSError = LRep.RMSError * (SB - SA)
    Rep.AvgError = LRep.AvgError * (SB - SA)
    Rep.MaxError = LRep.MaxError * (SB - SA)
    Rep.AvgRelError = 0#
    RelCnt = 0#
    For i = 0# To N - 1# Step 1
        If YOriginal(i) <> 0# Then
            Rep.AvgRelError = Rep.AvgRelError + Abs(BarycentricCalc(p, XOriginal(i)) - YOriginal(i)) / Abs(YOriginal(i))
            RelCnt = RelCnt + 1#
        End If
    Next i
    If RelCnt <> 0# Then
        Rep.AvgRelError = Rep.AvgRelError / RelCnt
    End If
End Sub

