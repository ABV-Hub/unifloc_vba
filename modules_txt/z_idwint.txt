''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2007-2010, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Data types
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'IDW interpolant.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Type IDWInterpolant
    N As Long
    NX As Long
    D As Long
    R As Double
    NW As Long
    Tree As KDTree
    ModelType As Long
    q() As Double
    XBuf() As Double
    TBuf() As Long
    RBuf() As Double
    XYBuf() As Double
    DebugSolverFailures As Long
    DebugWorstRCond As Double
    DebugBestRCond As Double
End Type
'Global constants
Private Const IDWQFactor As Double = 1.5
Private Const IDWKMin As Long = 5#
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'IDW interpolation
'
'INPUT PARAMETERS:
'    Z   -   IDW interpolant built with one of model building
'            subroutines.
'    X   -   array[0..NX-1], interpolation point
'
'Result:
'    IDW interpolant Z(X)
'
'  -- ALGLIB --
'     Copyright 02.03.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function IDWCalc(ByRef z As IDWInterpolant, _
         ByRef X() As Double) As Double
    Dim Result As Double
    Dim NX As Long
    Dim i As Long
    Dim K As Long
    Dim R As Double
    Dim S As Double
    Dim W As Double
    Dim V1 As Double
    Dim V2 As Double
    Dim D0 As Double
    Dim DI As Double
    Dim V As Double
    If z.ModelType = 0# Then
        
        '
        ' NQ/NW-based model
        '
        NX = z.NX
        Call KDTreeQueryKNN(z.Tree, X, z.NW, True)
        Call KDTreeQueryResultsDistances(z.Tree, z.RBuf, K)
        Call KDTreeQueryResultsTags(z.Tree, z.TBuf, K)
    End If
    If z.ModelType = 1# Then
        
        '
        ' R-based model
        '
        NX = z.NX
        Call KDTreeQueryRNN(z.Tree, X, z.R, True)
        Call KDTreeQueryResultsDistances(z.Tree, z.RBuf, K)
        Call KDTreeQueryResultsTags(z.Tree, z.TBuf, K)
        If K < IDWKMin Then
            
            '
            ' we need at least IDWKMin points
            '
            Call KDTreeQueryKNN(z.Tree, X, IDWKMin, True)
            Call KDTreeQueryResultsDistances(z.Tree, z.RBuf, K)
            Call KDTreeQueryResultsTags(z.Tree, z.TBuf, K)
        End If
    End If
    
    '
    ' initialize weights for linear/quadratic members calculation.
    '
    ' NOTE 1: weights are calculated using NORMALIZED modified
    ' Shepard's formula. Original formula gives w(i) = sqr((R-di)/(R*di)),
    ' where di is i-th distance, R is max(di). Modified formula have
    ' following form:
    '     w_mod(i) = 1, if di=d0
    '     w_mod(i) = w(i)/w(0), if di<>d0
    '
    ' NOTE 2: self-match is USED for this query
    '
    ' NOTE 3: last point almost always gain zero weight, but it MUST
    ' be used for fitting because sometimes it will gain NON-ZERO
    ' weight - for example, when all distances are equal.
    '
    R = z.RBuf(K - 1#)
    D0 = z.RBuf(0#)
    Result = 0#
    S = 0#
    For i = 0# To K - 1# Step 1
        DI = z.RBuf(i)
        If DI = D0 Then
            
            '
            ' distance is equal to shortest, set it 1.0
            ' without explicitly calculating (which would give
            ' us same result, but 'll expose us to the risk of
            ' division by zero).
            '
            W = 1#
        Else
            
            '
            ' use normalized formula
            '
            V1 = (R - DI) / (R - D0)
            V2 = D0 / DI
            W = Square(V1 * V2)
        End If
        Result = Result + W * IDWCalcQ(z, X, z.TBuf(i))
        S = S + W
    Next i
    Result = Result / S
    IDWCalc = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'IDW interpolant using modified Shepard method for uniform point
'distributions.
'
'INPUT PARAMETERS:
'    XY  -   X and Y values, array[0..N-1,0..NX].
'            First NX columns contain X-values, last column contain
'            Y-values.
'    N   -   number of nodes, N>0.
'    NX  -   space dimension, NX>=1.
'    D   -   nodal function type, either:
'            * 0     constant  model.  Just  for  demonstration only, worst
'                    model ever.
'            * 1     linear model, least squares fitting. Simpe  model  for
'                    datasets too small for quadratic models
'            * 2     quadratic  model,  least  squares  fitting. Best model
'                    available (if your dataset is large enough).
'            * -1    "fast"  linear  model,  use  with  caution!!!   It  is
'                    significantly  faster than linear/quadratic and better
'                    than constant model. But it is less robust (especially
'                    in the presence of noise).
'    NQ  -   number of points used to calculate  nodal  functions  (ignored
'            for constant models). NQ should be LARGER than:
'            * max(1.5*(1+NX),2^NX+1) for linear model,
'            * max(3/4*(NX+2)*(NX+1),2^NX+1) for quadratic model.
'            Values less than this threshold will be silently increased.
'    NW  -   number of points used to calculate weights and to interpolate.
'            Required: >=2^NX+1, values less than this  threshold  will  be
'            silently increased.
'            Recommended value: about 2*NQ
'
'OUTPUT PARAMETERS:
'    Z   -   IDW interpolant.
'
'NOTES:
'  * best results are obtained with quadratic models, worst - with constant
'    models
'  * when N is large, NQ and NW must be significantly smaller than  N  both
'    to obtain optimal performance and to obtain optimal accuracy. In 2  or
'    3-dimensional tasks NQ=15 and NW=25 are good values to start with.
'  * NQ  and  NW  may  be  greater  than  N.  In  such  cases  they will be
'    automatically decreased.
'  * this subroutine is always succeeds (as long as correct parameters  are
'    passed).
'  * see  'Multivariate  Interpolation  of Large Sets of Scattered Data' by
'    Robert J. Renka for more information on this algorithm.
'  * this subroutine assumes that point distribution is uniform at the small
'    scales.  If  it  isn't  -  for  example,  points are concentrated along
'    "lines", but "lines" distribution is uniform at the larger scale - then
'    you should use IDWBuildModifiedShepardR()
'
'
'  -- ALGLIB PROJECT --
'     Copyright 02.03.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub IDWBuildModifiedShepard(ByRef XY() As Double, _
         ByVal N As Long, _
         ByVal NX As Long, _
         ByVal D As Long, _
         ByVal NQ As Long, _
         ByVal NW As Long, _
         ByRef z As IDWInterpolant)
    Dim i As Long
    Dim J As Long
    Dim K As Long
    Dim J2 As Long
    Dim J3 As Long
    Dim V As Double
    Dim R As Double
    Dim S As Double
    Dim D0 As Double
    Dim DI As Double
    Dim V1 As Double
    Dim V2 As Double
    Dim NC As Long
    Dim Offs As Long
    Dim X() As Double
    Dim QRBuf() As Double
    Dim QXYBuf() As Double
    Dim Y() As Double
    Dim FMatrix() As Double
    Dim W() As Double
    Dim QSol() As Double
    Dim Temp() As Double
    Dim Tags() As Long
    Dim Info As Long
    Dim TaskRCond As Double
    Dim i_ As Long
    
    '
    ' assertions
    '
    
    '
    ' Correct parameters if needed
    '
    If D = 1# Then
        NQ = MaxInt(NQ, Ceil(IDWQFactor * (1# + NX)) + 1#)
        NQ = MaxInt(NQ, Round(Power(2#, NX)) + 1#)
    End If
    If D = 2# Then
        NQ = MaxInt(NQ, Ceil(IDWQFactor * (NX + 2#) * (NX + 1#) / 2#) + 1#)
        NQ = MaxInt(NQ, Round(Power(2#, NX)) + 1#)
    End If
    NW = MaxInt(NW, Round(Power(2#, NX)) + 1#)
    NQ = MinInt(NQ, N)
    NW = MinInt(NW, N)
    
    '
    ' primary initialization of Z
    '
    Call IDWInit1(N, NX, D, NQ, NW, z)
    z.ModelType = 0#
    
    '
    ' Create KD-tree
    '
    ReDim Tags(0 To N - 1)
    For i = 0# To N - 1# Step 1
        Tags(i) = i
    Next i
    Call KDTreeBuildTagged(XY, Tags, N, NX, 1#, 2#, z.Tree)
    
    '
    ' build nodal functions
    '
    ReDim Temp(0 To NQ + 1# - 1)
    ReDim X(0 To NX - 1)
    ReDim QRBuf(0 To NQ - 1)
    ReDim QXYBuf(0 To NQ - 1, 0 To NX + 1# - 1)
    If D = -1# Then
        ReDim W(0 To NQ - 1)
    End If
    If D = 1# Then
        ReDim Y(0 To NQ - 1)
        ReDim W(0 To NQ - 1)
        ReDim QSol(0 To NX - 1)
        
        '
        ' NX for linear members,
        ' 1 for temporary storage
        '
        ReDim FMatrix(0 To NQ - 1, 0 To NX + 1# - 1)
    End If
    If D = 2# Then
        ReDim Y(0 To NQ - 1)
        ReDim W(0 To NQ - 1)
        ReDim QSol(0 To NX + Round(NX * (NX + 1#) * 0.5) - 1)
        
        '
        ' NX for linear members,
        ' Round(NX*(NX+1)*0.5) for quadratic model,
        ' 1 for temporary storage
        '
        ReDim FMatrix(0 To NQ - 1, 0 To NX + Round(NX * (NX + 1#) * 0.5) + 1# - 1)
    End If
    For i = 0# To N - 1# Step 1
        
        '
        ' Initialize center and function value.
        ' If D=0 it is all what we need
        '
        For i_ = 0# To NX Step 1
            z.q(i, i_) = XY(i, i_)
        Next i_
        If D = 0# Then
            GoTo Cont_2
        End If
        
        '
        ' calculate weights for linear/quadratic members calculation.
        '
        ' NOTE 1: weights are calculated using NORMALIZED modified
        ' Shepard's formula. Original formula is w(i) = sqr((R-di)/(R*di)),
        ' where di is i-th distance, R is max(di). Modified formula have
        ' following form:
        '     w_mod(i) = 1, if di=d0
        '     w_mod(i) = w(i)/w(0), if di<>d0
        '
        ' NOTE 2: self-match is NOT used for this query
        '
        ' NOTE 3: last point almost always gain zero weight, but it MUST
        ' be used for fitting because sometimes it will gain NON-ZERO
        ' weight - for example, when all distances are equal.
        '
        For i_ = 0# To NX - 1# Step 1
            X(i_) = XY(i, i_)
        Next i_
        Call KDTreeQueryKNN(z.Tree, X, NQ, False)
        Call KDTreeQueryResultsXY(z.Tree, QXYBuf, K)
        Call KDTreeQueryResultsDistances(z.Tree, QRBuf, K)
        R = QRBuf(K - 1#)
        D0 = QRBuf(0#)
        For J = 0# To K - 1# Step 1
            DI = QRBuf(J)
            If DI = D0 Then
                
                '
                ' distance is equal to shortest, set it 1.0
                ' without explicitly calculating (which would give
                ' us same result, but 'll expose us to the risk of
                ' division by zero).
                '
                W(J) = 1#
            Else
                
                '
                ' use normalized formula
                '
                V1 = (R - DI) / (R - D0)
                V2 = D0 / DI
                W(J) = Square(V1 * V2)
            End If
        Next J
        
        '
        ' calculate linear/quadratic members
        '
        If D = -1# Then
            
            '
            ' "Fast" linear nodal function calculated using
            ' inverse distance weighting
            '
            For J = 0# To NX - 1# Step 1
                X(J) = 0#
            Next J
            S = 0#
            For J = 0# To K - 1# Step 1
                
                '
                ' calculate J-th inverse distance weighted gradient:
                '     grad_k = (y_j-y_k)*(x_j-x_k)/sqr(norm(x_j-x_k))
                '     grad   = sum(wk*grad_k)/sum(w_k)
                '
                V = 0#
                For J2 = 0# To NX - 1# Step 1
                    V = V + Square(QXYBuf(J, J2) - XY(i, J2))
                Next J2
                
                '
                ' Although x_j<>x_k, sqr(norm(x_j-x_k)) may be zero due to
                ' underflow. If it is, we assume than J-th gradient is zero
                ' (i.e. don't add anything)
                '
                If V <> 0# Then
                    For J2 = 0# To NX - 1# Step 1
                        X(J2) = X(J2) + W(J) * (QXYBuf(J, NX) - XY(i, NX)) * (QXYBuf(J, J2) - XY(i, J2)) / V
                    Next J2
                End If
                S = S + W(J)
            Next J
            For J = 0# To NX - 1# Step 1
                z.q(i, NX + 1# + J) = X(J) / S
            Next J
        Else
            
            '
            ' Least squares models: build
            '
            If D = 1# Then
                
                '
                ' Linear nodal function calculated using
                ' least squares fitting to its neighbors
                '
                For J = 0# To K - 1# Step 1
                    For J2 = 0# To NX - 1# Step 1
                        FMatrix(J, J2) = QXYBuf(J, J2) - XY(i, J2)
                    Next J2
                    Y(J) = QXYBuf(J, NX) - XY(i, NX)
                Next J
                NC = NX
            End If
            If D = 2# Then
                
                '
                ' Quadratic nodal function calculated using
                ' least squares fitting to its neighbors
                '
                For J = 0# To K - 1# Step 1
                    Offs = 0#
                    For J2 = 0# To NX - 1# Step 1
                        FMatrix(J, Offs) = QXYBuf(J, J2) - XY(i, J2)
                        Offs = Offs + 1#
                    Next J2
                    For J2 = 0# To NX - 1# Step 1
                        For J3 = J2 To NX - 1# Step 1
                            FMatrix(J, Offs) = (QXYBuf(J, J2) - XY(i, J2)) * (QXYBuf(J, J3) - XY(i, J3))
                            Offs = Offs + 1#
                        Next J3
                    Next J2
                    Y(J) = QXYBuf(J, NX) - XY(i, NX)
                Next J
                NC = NX + Round(NX * (NX + 1#) * 0.5)
            End If
            Call IDWInternalSolver(Y, W, FMatrix, Temp, K, NC, Info, QSol, TaskRCond)
            
            '
            ' Least squares models: copy results
            '
            If Info > 0# Then
                
                '
                ' LLS task is solved, copy results
                '
                z.DebugWorstRCond = MinReal(z.DebugWorstRCond, TaskRCond)
                z.DebugBestRCond = MaxReal(z.DebugBestRCond, TaskRCond)
                For J = 0# To NC - 1# Step 1
                    z.q(i, NX + 1# + J) = QSol(J)
                Next J
            Else
                
                '
                ' Solver failure, very strange, but we will use
                ' zero values to handle it.
                '
                z.DebugSolverFailures = z.DebugSolverFailures + 1#
                For J = 0# To NC - 1# Step 1
                    z.q(i, NX + 1# + J) = 0#
                Next J
            End If
        End If
Cont_2:
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'IDW interpolant using modified Shepard method for non-uniform datasets.
'
'This type of model uses  constant  nodal  functions and interpolates using
'all nodes which are closer than user-specified radius R. It  may  be  used
'when points distribution is non-uniform at the small scale, but it  is  at
'the distances as large as R.
'
'INPUT PARAMETERS:
'    XY  -   X and Y values, array[0..N-1,0..NX].
'            First NX columns contain X-values, last column contain
'            Y-values.
'    N   -   number of nodes, N>0.
'    NX  -   space dimension, NX>=1.
'    R   -   radius, R>0
'
'OUTPUT PARAMETERS:
'    Z   -   IDW interpolant.
'
'NOTES:
'* if there is less than IDWKMin points within  R-ball,  algorithm  selects
'  IDWKMin closest ones, so that continuity properties of  interpolant  are
'  preserved even far from points.
'
'  -- ALGLIB PROJECT --
'     Copyright 11.04.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub IDWBuildModifiedShepardR(ByRef XY() As Double, _
         ByVal N As Long, _
         ByVal NX As Long, _
         ByVal R As Double, _
         ByRef z As IDWInterpolant)
    Dim i As Long
    Dim Tags() As Long
    Dim i_ As Long
    
    '
    ' assertions
    '
    
    '
    ' primary initialization of Z
    '
    Call IDWInit1(N, NX, 0#, 0#, N, z)
    z.ModelType = 1#
    z.R = R
    
    '
    ' Create KD-tree
    '
    ReDim Tags(0 To N - 1)
    For i = 0# To N - 1# Step 1
        Tags(i) = i
    Next i
    Call KDTreeBuildTagged(XY, Tags, N, NX, 1#, 2#, z.Tree)
    
    '
    ' build nodal functions
    '
    For i = 0# To N - 1# Step 1
        For i_ = 0# To NX Step 1
            z.q(i, i_) = XY(i, i_)
        Next i_
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'IDW model for noisy data.
'
'This subroutine may be used to handle noisy data, i.e. data with noise  in
'OUTPUT values.  It differs from IDWBuildModifiedShepard() in the following
'aspects:
'* nodal functions are not constrained to pass through  nodes:  Qi(xi)<>yi,
'  i.e. we have fitting  instead  of  interpolation.
'* weights which are used during least  squares fitting stage are all equal
'  to 1.0 (independently of distance)
'* "fast"-linear or constant nodal functions are not supported (either  not
'  robust enough or too rigid)
'
'This problem require far more complex tuning than interpolation  problems.
'Below you can find some recommendations regarding this problem:
'* focus on tuning NQ; it controls noise reduction. As for NW, you can just
'  make it equal to 2*NQ.
'* you can use cross-validation to determine optimal NQ.
'* optimal NQ is a result of complex tradeoff  between  noise  level  (more
'  noise = larger NQ required) and underlying  function  complexity  (given
'  fixed N, larger NQ means smoothing of compex features in the data).  For
'  example, NQ=N will reduce noise to the minimum level possible,  but  you
'  will end up with just constant/linear/quadratic (depending on  D)  least
'  squares model for the whole dataset.
'
'INPUT PARAMETERS:
'    XY  -   X and Y values, array[0..N-1,0..NX].
'            First NX columns contain X-values, last column contain
'            Y-values.
'    N   -   number of nodes, N>0.
'    NX  -   space dimension, NX>=1.
'    D   -   nodal function degree, either:
'            * 1     linear model, least squares fitting. Simpe  model  for
'                    datasets too small for quadratic models (or  for  very
'                    noisy problems).
'            * 2     quadratic  model,  least  squares  fitting. Best model
'                    available (if your dataset is large enough).
'    NQ  -   number of points used to calculate nodal functions.  NQ should
'            be  significantly   larger   than  1.5  times  the  number  of
'            coefficients in a nodal function to overcome effects of noise:
'            * larger than 1.5*(1+NX) for linear model,
'            * larger than 3/4*(NX+2)*(NX+1) for quadratic model.
'            Values less than this threshold will be silently increased.
'    NW  -   number of points used to calculate weights and to interpolate.
'            Required: >=2^NX+1, values less than this  threshold  will  be
'            silently increased.
'            Recommended value: about 2*NQ or larger
'
'OUTPUT PARAMETERS:
'    Z   -   IDW interpolant.
'
'NOTES:
'  * best results are obtained with quadratic models, linear models are not
'    recommended to use unless you are pretty sure that it is what you want
'  * this subroutine is always succeeds (as long as correct parameters  are
'    passed).
'  * see  'Multivariate  Interpolation  of Large Sets of Scattered Data' by
'    Robert J. Renka for more information on this algorithm.
'
'
'  -- ALGLIB PROJECT --
'     Copyright 02.03.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub IDWBuildNoisy(ByRef XY() As Double, _
         ByVal N As Long, _
         ByVal NX As Long, _
         ByVal D As Long, _
         ByVal NQ As Long, _
         ByVal NW As Long, _
         ByRef z As IDWInterpolant)
    Dim i As Long
    Dim J As Long
    Dim K As Long
    Dim J2 As Long
    Dim J3 As Long
    Dim V As Double
    Dim NC As Long
    Dim Offs As Long
    Dim TaskRCond As Double
    Dim X() As Double
    Dim QRBuf() As Double
    Dim QXYBuf() As Double
    Dim Y() As Double
    Dim W() As Double
    Dim FMatrix() As Double
    Dim QSol() As Double
    Dim Tags() As Long
    Dim Temp() As Double
    Dim Info As Long
    Dim i_ As Long
    
    '
    ' assertions
    '
    
    '
    ' Correct parameters if needed
    '
    If D = 1# Then
        NQ = MaxInt(NQ, Ceil(IDWQFactor * (1# + NX)) + 1#)
    End If
    If D = 2# Then
        NQ = MaxInt(NQ, Ceil(IDWQFactor * (NX + 2#) * (NX + 1#) / 2#) + 1#)
    End If
    NW = MaxInt(NW, Round(Power(2#, NX)) + 1#)
    NQ = MinInt(NQ, N)
    NW = MinInt(NW, N)
    
    '
    ' primary initialization of Z
    '
    Call IDWInit1(N, NX, D, NQ, NW, z)
    z.ModelType = 0#
    
    '
    ' Create KD-tree
    '
    ReDim Tags(0 To N - 1)
    For i = 0# To N - 1# Step 1
        Tags(i) = i
    Next i
    Call KDTreeBuildTagged(XY, Tags, N, NX, 1#, 2#, z.Tree)
    
    '
    ' build nodal functions
    ' (special algorithm for noisy data is used)
    '
    ReDim Temp(0 To NQ + 1# - 1)
    ReDim X(0 To NX - 1)
    ReDim QRBuf(0 To NQ - 1)
    ReDim QXYBuf(0 To NQ - 1, 0 To NX + 1# - 1)
    If D = 1# Then
        ReDim Y(0 To NQ - 1)
        ReDim W(0 To NQ - 1)
        ReDim QSol(0 To 1# + NX - 1)
        
        '
        ' 1 for constant member,
        ' NX for linear members,
        ' 1 for temporary storage
        '
        ReDim FMatrix(0 To NQ - 1, 0 To 1# + NX + 1# - 1)
    End If
    If D = 2# Then
        ReDim Y(0 To NQ - 1)
        ReDim W(0 To NQ - 1)
        ReDim QSol(0 To 1# + NX + Round(NX * (NX + 1#) * 0.5) - 1)
        
        '
        ' 1 for constant member,
        ' NX for linear members,
        ' Round(NX*(NX+1)*0.5) for quadratic model,
        ' 1 for temporary storage
        '
        ReDim FMatrix(0 To NQ - 1, 0 To 1# + NX + Round(NX * (NX + 1#) * 0.5) + 1# - 1)
    End If
    For i = 0# To N - 1# Step 1
        
        '
        ' Initialize center.
        '
        For i_ = 0# To NX - 1# Step 1
            z.q(i, i_) = XY(i, i_)
        Next i_
        
        '
        ' Calculate linear/quadratic members
        ' using least squares fit
        ' NOTE 1: all weight are equal to 1.0
        ' NOTE 2: self-match is USED for this query
        '
        For i_ = 0# To NX - 1# Step 1
            X(i_) = XY(i, i_)
        Next i_
        Call KDTreeQueryKNN(z.Tree, X, NQ, True)
        Call KDTreeQueryResultsXY(z.Tree, QXYBuf, K)
        Call KDTreeQueryResultsDistances(z.Tree, QRBuf, K)
        If D = 1# Then
            
            '
            ' Linear nodal function calculated using
            ' least squares fitting to its neighbors
            '
            For J = 0# To K - 1# Step 1
                FMatrix(J, 0#) = 1#
                For J2 = 0# To NX - 1# Step 1
                    FMatrix(J, 1# + J2) = QXYBuf(J, J2) - XY(i, J2)
                Next J2
                Y(J) = QXYBuf(J, NX)
                W(J) = 1#
            Next J
            NC = 1# + NX
        End If
        If D = 2# Then
            
            '
            ' Quadratic nodal function calculated using
            ' least squares fitting to its neighbors
            '
            For J = 0# To K - 1# Step 1
                FMatrix(J, 0#) = 1#
                Offs = 1#
                For J2 = 0# To NX - 1# Step 1
                    FMatrix(J, Offs) = QXYBuf(J, J2) - XY(i, J2)
                    Offs = Offs + 1#
                Next J2
                For J2 = 0# To NX - 1# Step 1
                    For J3 = J2 To NX - 1# Step 1
                        FMatrix(J, Offs) = (QXYBuf(J, J2) - XY(i, J2)) * (QXYBuf(J, J3) - XY(i, J3))
                        Offs = Offs + 1#
                    Next J3
                Next J2
                Y(J) = QXYBuf(J, NX)
                W(J) = 1#
            Next J
            NC = 1# + NX + Round(NX * (NX + 1#) * 0.5)
        End If
        Call IDWInternalSolver(Y, W, FMatrix, Temp, K, NC, Info, QSol, TaskRCond)
        
        '
        ' Least squares models: copy results
        '
        If Info > 0# Then
            
            '
            ' LLS task is solved, copy results
            '
            z.DebugWorstRCond = MinReal(z.DebugWorstRCond, TaskRCond)
            z.DebugBestRCond = MaxReal(z.DebugBestRCond, TaskRCond)
            For J = 0# To NC - 1# Step 1
                z.q(i, NX + J) = QSol(J)
            Next J
        Else
            
            '
            ' Solver failure, very strange, but we will use
            ' zero values to handle it.
            '
            z.DebugSolverFailures = z.DebugSolverFailures + 1#
            V = 0#
            For J = 0# To K - 1# Step 1
                V = V + QXYBuf(J, NX)
            Next J
            z.q(i, NX) = V / K
            For J = 0# To NC - 2# Step 1
                z.q(i, NX + 1# + J) = 0#
            Next J
        End If
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal subroutine: K-th nodal function calculation
'
'  -- ALGLIB --
'     Copyright 02.03.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function IDWCalcQ(ByRef z As IDWInterpolant, _
         ByRef X() As Double, _
         ByVal K As Long) As Double
    Dim Result As Double
    Dim NX As Long
    Dim i As Long
    Dim J As Long
    Dim Offs As Long
    NX = z.NX
    
    '
    ' constant member
    '
    Result = z.q(K, NX)
    
    '
    ' linear members
    '
    If z.D >= 1# Then
        For i = 0# To NX - 1# Step 1
            Result = Result + z.q(K, NX + 1# + i) * (X(i) - z.q(K, i))
        Next i
    End If
    
    '
    ' quadratic members
    '
    If z.D >= 2# Then
        Offs = NX + 1# + NX
        For i = 0# To NX - 1# Step 1
            For J = i To NX - 1# Step 1
                Result = Result + z.q(K, Offs) * (X(i) - z.q(K, i)) * (X(J) - z.q(K, J))
                Offs = Offs + 1#
            Next J
        Next i
    End If
    IDWCalcQ = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Initialization of internal structures.
'
'It assumes correctness of all parameters.
'
'  -- ALGLIB --
'     Copyright 02.03.2010 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub IDWInit1(ByVal N As Long, _
         ByVal NX As Long, _
         ByVal D As Long, _
         ByVal NQ As Long, _
         ByVal NW As Long, _
         ByRef z As IDWInterpolant)
    z.DebugSolverFailures = 0#
    z.DebugWorstRCond = 1#
    z.DebugBestRCond = 0#
    z.N = N
    z.NX = NX
    z.D = 0#
    If D = 1# Then
        z.D = 1#
    End If
    If D = 2# Then
        z.D = 2#
    End If
    If D = -1# Then
        z.D = 1#
    End If
    z.NW = NW
    If D = -1# Then
        ReDim z.q(0 To N - 1, 0 To NX + 1# + NX - 1)
    End If
    If D = 0# Then
        ReDim z.q(0 To N - 1, 0 To NX + 1# - 1)
    End If
    If D = 1# Then
        ReDim z.q(0 To N - 1, 0 To NX + 1# + NX - 1)
    End If
    If D = 2# Then
        ReDim z.q(0 To N - 1, 0 To NX + 1# + NX + Round(NX * (NX + 1#) * 0.5) - 1)
    End If
    ReDim z.TBuf(0 To NW - 1)
    ReDim z.RBuf(0 To NW - 1)
    ReDim z.XYBuf(0 To NW - 1, 0 To NX + 1# - 1)
    ReDim z.XBuf(0 To NX - 1)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Linear least squares solver for small tasks.
'
'Works faster than standard ALGLIB solver in non-degenerate cases  (due  to
'absense of internal allocations and optimized row/colums).  In  degenerate
'cases it calls standard solver, which results in small performance penalty
'associated with preliminary steps.
'
'INPUT PARAMETERS:
'    Y           array[0..N-1]
'    W           array[0..N-1]
'    FMatrix     array[0..N-1,0..M], have additional column for temporary
'                values
'    Temp        array[0..N]
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub IDWInternalSolver(ByRef Y() As Double, _
         ByRef W() As Double, _
         ByRef FMatrix() As Double, _
         ByRef Temp() As Double, _
         ByVal N As Long, _
         ByVal M As Long, _
         ByRef Info As Long, _
         ByRef X() As Double, _
         ByRef TaskRCond As Double)
    Dim i As Long
    Dim J As Long
    Dim V As Double
    Dim Tau As Double
    Dim B() As Double
    Dim SRep As DenseSolverLSReport
    Dim i_ As Long
    Dim i1_ As Long
    
    '
    ' set up info
    '
    Info = 1#
    
    '
    ' prepare matrix
    '
    For i = 0# To N - 1# Step 1
        FMatrix(i, M) = Y(i)
        V = W(i)
        For i_ = 0# To M Step 1
            FMatrix(i, i_) = V * FMatrix(i, i_)
        Next i_
    Next i
    
    '
    ' use either fast algorithm or general algorithm
    '
    If M <= N Then
        
        '
        ' QR decomposition
        ' We assume that M<=N (we would have called LSFit() otherwise)
        '
        For i = 0# To M - 1# Step 1
            If i < N - 1# Then
                i1_ = (i) - (1#)
                For i_ = 1# To N - i Step 1
                    Temp(i_) = FMatrix(i_ + i1_, i)
                Next i_
                Call GenerateReflection(Temp, N - i, Tau)
                FMatrix(i, i) = Temp(1#)
                Temp(1#) = 1#
                For J = i + 1# To M Step 1
                    i1_ = (1#) - (i)
                    V = 0#
                    For i_ = i To N - 1# Step 1
                        V = V + FMatrix(i_, J) * Temp(i_ + i1_)
                    Next i_
                    V = Tau * V
                    i1_ = (1#) - (i)
                    For i_ = i To N - 1# Step 1
                        FMatrix(i_, J) = FMatrix(i_, J) - V * Temp(i_ + i1_)
                    Next i_
                Next J
            End If
        Next i
        
        '
        ' Check condition number
        '
        TaskRCond = RMatrixTRRCondInf(FMatrix, M, True, False)
        
        '
        ' use either fast algorithm for non-degenerate cases
        ' or slow algorithm for degenerate cases
        '
        If TaskRCond > 10000# * N * MachineEpsilon Then
            
            '
            ' solve triangular system R*x = FMatrix[0:M-1,M]
            ' using fast algorithm, then exit
            '
            X(M - 1#) = FMatrix(M - 1#, M) / FMatrix(M - 1#, M - 1#)
            For i = M - 2# To 0# Step -1
                V = 0#
                For i_ = i + 1# To M - 1# Step 1
                    V = V + FMatrix(i, i_) * X(i_)
                Next i_
                X(i) = (FMatrix(i, M) - V) / FMatrix(i, i)
            Next i
        Else
            
            '
            ' use more general algorithm
            '
            ReDim B(0 To M - 1)
            For i = 0# To M - 1# Step 1
                For J = 0# To i - 1# Step 1
                    FMatrix(i, J) = 0#
                Next J
                B(i) = FMatrix(i, M)
            Next i
            Call RMatrixSolveLS(FMatrix, M, M, B, 10000# * MachineEpsilon, Info, SRep, X)
        End If
    Else
        
        '
        ' use more general algorithm
        '
        ReDim B(0 To N - 1)
        For i = 0# To N - 1# Step 1
            B(i) = FMatrix(i, M)
        Next i
        Call RMatrixSolveLS(FMatrix, N, M, B, 10000# * MachineEpsilon, Info, SRep, X)
        TaskRCond = SRep.R2
    End If
End Sub
