''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Cephes Math Library Release 2.8:  June, 2000
'Copyright 1984, 1987, 1995, 2000 by Stephen L. Moshier
'
'Contributors:
'    * Sergey Bochkanov (ALGLIB project). Translation from C to
'      pseudocode.
'
'See subroutines comments for additional copyrights.
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Complete elliptic integral of the first kind
'
'Approximates the integral
'
'
'
'           pi/2
'            -
'           | |
'           |           dt
'K(m)  =    |    ------------------
'           |                   2
'         | |    sqrt( 1 - m sin t )
'          -
'           0
'
'using the approximation
'
'    P(x)  -  log x Q(x).
'
'ACCURACY:
'
'                     Relative error:
'arithmetic   domain     # trials      peak         rms
'   IEEE       0,1        30000       2.5e-16     6.8e-17
'
'Cephes Math Library, Release 2.8:  June, 2000
'Copyright 1984, 1987, 2000 by Stephen L. Moshier
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function EllipticIntegralK(ByVal M As Double) As Double
    Dim Result As Double
    Result = EllipticIntegralKHighPrecision(1# - M)
    EllipticIntegralK = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Complete elliptic integral of the first kind
'
'Approximates the integral
'
'
'
'           pi/2
'            -
'           | |
'           |           dt
'K(m)  =    |    ------------------
'           |                   2
'         | |    sqrt( 1 - m sin t )
'          -
'           0
'
'where m = 1 - m1, using the approximation
'
'    P(x)  -  log x Q(x).
'
'The argument m1 is used rather than m so that the logarithmic
'singularity at m = 1 will be shifted to the origin; this
'preserves maximum accuracy.
'
'K(0) = pi/2.
'
'ACCURACY:
'
'                     Relative error:
'arithmetic   domain     # trials      peak         rms
'   IEEE       0,1        30000       2.5e-16     6.8e-17
'
'Алгоритм взят из библиотеки Cephes
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function EllipticIntegralKHighPrecision(ByVal M1 As Double) As Double
    Dim Result As Double
    Dim p As Double
    Dim q As Double
    If M1 <= MachineEpsilon Then
        Result = 1.38629436111989 - 0.5 * Log(M1)
    Else
        p = 1.37982864606273E-04
        p = p * M1 + 2.28025724005876E-03
        p = p * M1 + 7.97404013220415E-03
        p = p * M1 + 9.85821379021226E-03
        p = p * M1 + 6.8748968744995E-03
        p = p * M1 + 6.18901033637688E-03
        p = p * M1 + 8.79078273952744E-03
        p = p * M1 + 1.49380448916805E-02
        p = p * M1 + 3.08851465246712E-02
        p = p * M1 + 0.096573590281169
        p = p * M1 + 1.38629436111989
        q = 2.94078955048598E-05
        q = q * M1 + 9.14184723865917E-04
        q = q * M1 + 5.94058303753168E-03
        q = q * M1 + 1.54850516649762E-02
        q = q * M1 + 2.39089602715925E-02
        q = q * M1 + 3.01204715227604E-02
        q = q * M1 + 3.73774314173823E-02
        q = q * M1 + 4.88280347570998E-02
        q = q * M1 + 7.03124996963957E-02
        q = q * M1 + 0.124999999999871
        q = q * M1 + 0.5
        Result = p - q * Log(M1)
    End If
    EllipticIntegralKHighPrecision = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Incomplete elliptic integral of the first kind F(phi|m)
'
'Approximates the integral
'
'
'
'               phi
'                -
'               | |
'               |           dt
'F(phi_\m)  =    |    ------------------
'               |                   2
'             | |    sqrt( 1 - m sin t )
'              -
'               0
'
'of amplitude phi and modulus m, using the arithmetic -
'geometric mean algorithm.
'
'
'
'
'ACCURACY:
'
'Tested at random points with m in [0, 1] and phi as indicated.
'
'                     Relative error:
'arithmetic   domain     # trials      peak         rms
'   IEEE     -10,10       200000      7.4e-16     1.0e-16
'
'Cephes Math Library Release 2.8:  June, 2000
'Copyright 1984, 1987, 2000 by Stephen L. Moshier
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function IncompleteEllipticIntegralK(ByVal phi As Double, _
         ByVal M As Double) As Double
    Dim Result As Double
    Dim A As Double
    Dim B As Double
    Dim C As Double
    Dim E As Double
    Dim temp As Double
    Dim PIO2 As Double
    Dim T As Double
    Dim K As Double
    Dim D As Long
    Dim md As Long
    Dim S As Long
    Dim npio2 As Long
    PIO2 = 1.5707963267949
    If M = 0# Then
        Result = phi
        IncompleteEllipticIntegralK = Result
        Exit Function
    End If
    A = 1# - M
    If A = 0# Then
        Result = Log(Tan(0.5 * (PIO2 + phi)))
        IncompleteEllipticIntegralK = Result
        Exit Function
    End If
    npio2 = Int(phi / PIO2)
    If npio2 Mod 2# <> 0# Then
        npio2 = npio2 + 1#
    End If
    If npio2 <> 0# Then
        K = EllipticIntegralK(1# - A)
        phi = phi - npio2 * PIO2
    Else
        K = 0#
    End If
    If phi < 0# Then
        phi = -phi
        S = -1#
    Else
        S = 0#
    End If
    B = Sqr(A)
    T = Tan(phi)
    If Abs(T) > 10# Then
        E = 1# / (B * T)
        If Abs(E) < 10# Then
            E = Atn(E)
            If npio2 = 0# Then
                K = EllipticIntegralK(1# - A)
            End If
            temp = K - IncompleteEllipticIntegralK(E, M)
            If S < 0# Then
                temp = -temp
            End If
            Result = temp + npio2 * K
            IncompleteEllipticIntegralK = Result
            Exit Function
        End If
    End If
    A = 1#
    C = Sqr(M)
    D = 1#
    md = 0#
    Do While Abs(C / A) > MachineEpsilon
        temp = B / A
        phi = phi + Atn(T * temp) + md * Pi()
        md = Fix((phi + PIO2) / Pi())
        T = T * (1# + temp) / (1# - temp * T * T)
        C = 0.5 * (A - B)
        temp = Sqr(A * B)
        A = 0.5 * (A + B)
        B = temp
        D = D + D
    Loop
    temp = (Atn(T) + md * Pi()) / (D * A)
    If S < 0# Then
        temp = -temp
    End If
    Result = temp + npio2 * K
    IncompleteEllipticIntegralK = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Complete elliptic integral of the second kind
'
'Approximates the integral
'
'
'           pi/2
'            -
'           | |                 2
'E(m)  =    |    sqrt( 1 - m sin t ) dt
'         | |
'          -
'           0
'
'using the approximation
'
'     P(x)  -  x log x Q(x).
'
'ACCURACY:
'
'                     Relative error:
'arithmetic   domain     # trials      peak         rms
'   IEEE       0, 1       10000       2.1e-16     7.3e-17
'
'Cephes Math Library, Release 2.8: June, 2000
'Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function EllipticIntegralE(ByVal M As Double) As Double
    Dim Result As Double
    Dim p As Double
    Dim q As Double
    M = 1# - M
    If M = 0# Then
        Result = 1#
        EllipticIntegralE = Result
        Exit Function
    End If
    p = 1.53552577301013E-04
    p = p * M + 2.50888492163602E-03
    p = p * M + 8.6878681656589E-03
    p = p * M + 1.07350949056076E-02
    p = p * M + 7.77395492516787E-03
    p = p * M + 7.58395289413515E-03
    p = p * M + 1.15688436810574E-02
    p = p * M + 2.18317996015557E-02
    p = p * M + 5.68051945617861E-02
    p = p * M + 0.443147180560991
    p = p * M + 1#
    q = 3.27954898576486E-05
    q = q * M + 1.00962792679357E-03
    q = q * M + 6.50609489976928E-03
    q = q * M + 1.68862163993311E-02
    q = q * M + 2.61769742454494E-02
    q = q * M + 3.34833904888225E-02
    q = q * M + 4.27180926518931E-02
    q = q * M + 5.85936634471101E-02
    q = q * M + 9.37499997197644E-02
    q = q * M + 0.249999999999888
    Result = p - q * M * Log(M)
    EllipticIntegralE = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Incomplete elliptic integral of the second kind
'
'Approximates the integral
'
'
'               phi
'                -
'               | |
'               |                   2
'E(phi_\m)  =    |    sqrt( 1 - m sin t ) dt
'               |
'             | |
'              -
'               0
'
'of amplitude phi and modulus m, using the arithmetic -
'geometric mean algorithm.
'
'ACCURACY:
'
'Tested at random arguments with phi in [-10, 10] and m in
'[0, 1].
'                     Relative error:
'arithmetic   domain     # trials      peak         rms
'   IEEE     -10,10      150000       3.3e-15     1.4e-16
'
'Cephes Math Library Release 2.8:  June, 2000
'Copyright 1984, 1987, 1993, 2000 by Stephen L. Moshier
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function IncompleteEllipticIntegralE(ByVal phi As Double, _
         ByVal M As Double) As Double
    Dim Result As Double
    Dim PIO2 As Double
    Dim A As Double
    Dim B As Double
    Dim C As Double
    Dim E As Double
    Dim temp As Double
    Dim lphi As Double
    Dim T As Double
    Dim EBig As Double
    Dim D As Long
    Dim md As Long
    Dim npio2 As Long
    Dim S As Long
    PIO2 = 1.5707963267949
    If M = 0# Then
        Result = phi
        IncompleteEllipticIntegralE = Result
        Exit Function
    End If
    lphi = phi
    npio2 = Int(lphi / PIO2)
    If npio2 Mod 2# <> 0# Then
        npio2 = npio2 + 1#
    End If
    lphi = lphi - npio2 * PIO2
    If lphi < 0# Then
        lphi = -lphi
        S = -1#
    Else
        S = 1#
    End If
    A = 1# - M
    EBig = EllipticIntegralE(M)
    If A = 0# Then
        temp = Sin(lphi)
        If S < 0# Then
            temp = -temp
        End If
        Result = temp + npio2 * EBig
        IncompleteEllipticIntegralE = Result
        Exit Function
    End If
    T = Tan(lphi)
    B = Sqr(A)
    
    '
    ' Thanks to Brian Fitzgerald <fitzgb@mml0.meche.rpi.edu>
    ' for pointing out an instability near odd multiples of pi/2
    '
    If Abs(T) > 10# Then
        
        '
        ' Transform the amplitude
        '
        E = 1# / (B * T)
        
        '
        ' ... but avoid multiple recursions.
        '
        If Abs(E) < 10# Then
            E = Atn(E)
            temp = EBig + M * Sin(lphi) * Sin(E) - IncompleteEllipticIntegralE(E, M)
            If S < 0# Then
                temp = -temp
            End If
            Result = temp + npio2 * EBig
            IncompleteEllipticIntegralE = Result
            Exit Function
        End If
    End If
    C = Sqr(M)
    A = 1#
    D = 1#
    E = 0#
    md = 0#
    Do While Abs(C / A) > MachineEpsilon
        temp = B / A
        lphi = lphi + Atn(T * temp) + md * Pi()
        md = Fix((lphi + PIO2) / Pi())
        T = T * (1# + temp) / (1# - temp * T * T)
        C = 0.5 * (A - B)
        temp = Sqr(A * B)
        A = 0.5 * (A + B)
        B = temp
        D = D + D
        E = E + C * Sin(lphi)
    Loop
    temp = EBig / EllipticIntegralK(M)
    temp = temp * ((Atn(T) + md * Pi()) / (D * A))
    temp = temp + E
    If S < 0# Then
        temp = -temp
    End If
    Result = temp + npio2 * EBig
    IncompleteEllipticIntegralE = Result
    Exit Function
    IncompleteEllipticIntegralE = Result
End Function

