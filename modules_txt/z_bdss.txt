''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright 2008 by Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Data types
Public Type CVReport
    RelCLSError As Double
    AvgCE As Double
    RMSError As Double
    AvgError As Double
    AvgRelError As Double
End Type
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This set of routines (DSErrAllocate, DSErrAccumulate, DSErrFinish)
'calculates different error functions (classification error, cross-entropy,
'rms, avg, avg.rel errors).
'
'1. DSErrAllocate prepares buffer.
'2. DSErrAccumulate accumulates individual errors:
'    * Y contains predicted output (posterior probabilities for classification)
'    * DesiredY contains desired output (class number for classification)
'3. DSErrFinish outputs results:
'   * Buf[0] contains relative classification error (zero for regression tasks)
'   * Buf[1] contains avg. cross-entropy (zero for regression tasks)
'   * Buf[2] contains rms error (regression, classification)
'   * Buf[3] contains average error (regression, classification)
'   * Buf[4] contains average relative error (regression, classification)
'
'NOTES(1):
'    "NClasses>0" means that we have classification task.
'    "NClasses<0" means regression task with -NClasses real outputs.
'
'NOTES(2):
'    rms. avg, avg.rel errors for classification tasks are interpreted as
'    errors in posterior probabilities with respect to probabilities given
'    by training/test set.
'
'  -- ALGLIB --
'     Copyright 11.01.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub DSErrAllocate(ByVal NClasses As Long, ByRef Buf() As Double)
    ReDim Buf(0# To 7#)
    Buf(0#) = 0#
    Buf(1#) = 0#
    Buf(2#) = 0#
    Buf(3#) = 0#
    Buf(4#) = 0#
    Buf(5#) = NClasses
    Buf(6#) = 0#
    Buf(7#) = 0#
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'See DSErrAllocate for comments on this routine.
'
'  -- ALGLIB --
'     Copyright 11.01.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub DSErrAccumulate(ByRef Buf() As Double, _
         ByRef Y() As Double, _
         ByRef DesiredY() As Double)
    Dim NClasses As Long
    Dim NOut As Long
    Dim Offs As Long
    Dim MMAX As Long
    Dim RMax As Long
    Dim J As Long
    Dim V As Double
    Dim EV As Double
    Offs = 5#
    NClasses = Round(Buf(Offs))
    If NClasses > 0# Then
        
        '
        ' Classification
        '
        RMax = Round(DesiredY(0#))
        MMAX = 0#
        For J = 1# To NClasses - 1# Step 1
            If Y(J) > Y(MMAX) Then
                MMAX = J
            End If
        Next J
        If MMAX <> RMax Then
            Buf(0#) = Buf(0#) + 1#
        End If
        If Y(RMax) > 0# Then
            Buf(1#) = Buf(1#) - Log(Y(RMax))
        Else
            Buf(1#) = Buf(1#) + Log(MaxRealNumber)
        End If
        For J = 0# To NClasses - 1# Step 1
            V = Y(J)
            If J = RMax Then
                EV = 1#
            Else
                EV = 0#
            End If
            Buf(2#) = Buf(2#) + Square(V - EV)
            Buf(3#) = Buf(3#) + Abs(V - EV)
            If EV <> 0# Then
                Buf(4#) = Buf(4#) + Abs((V - EV) / EV)
                Buf(Offs + 2#) = Buf(Offs + 2#) + 1#
            End If
        Next J
        Buf(Offs + 1#) = Buf(Offs + 1#) + 1#
    Else
        
        '
        ' Regression
        '
        NOut = -NClasses
        RMax = 0#
        For J = 1# To NOut - 1# Step 1
            If DesiredY(J) > DesiredY(RMax) Then
                RMax = J
            End If
        Next J
        MMAX = 0#
        For J = 1# To NOut - 1# Step 1
            If Y(J) > Y(MMAX) Then
                MMAX = J
            End If
        Next J
        If MMAX <> RMax Then
            Buf(0#) = Buf(0#) + 1#
        End If
        For J = 0# To NOut - 1# Step 1
            V = Y(J)
            EV = DesiredY(J)
            Buf(2#) = Buf(2#) + Square(V - EV)
            Buf(3#) = Buf(3#) + Abs(V - EV)
            If EV <> 0# Then
                Buf(4#) = Buf(4#) + Abs((V - EV) / EV)
                Buf(Offs + 2#) = Buf(Offs + 2#) + 1#
            End If
        Next J
        Buf(Offs + 1#) = Buf(Offs + 1#) + 1#
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'See DSErrAllocate for comments on this routine.
'
'  -- ALGLIB --
'     Copyright 11.01.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub DSErrFinish(ByRef Buf() As Double)
    Dim NOut As Long
    Dim Offs As Long
    Offs = 5#
    NOut = Abs(Round(Buf(Offs)))
    If Buf(Offs + 1#) <> 0# Then
        Buf(0#) = Buf(0#) / Buf(Offs + 1#)
        Buf(1#) = Buf(1#) / Buf(Offs + 1#)
        Buf(2#) = Sqr(Buf(2#) / (NOut * Buf(Offs + 1#)))
        Buf(3#) = Buf(3#) / (NOut * Buf(Offs + 1#))
    End If
    If Buf(Offs + 2#) <> 0# Then
        Buf(4#) = Buf(4#) / Buf(Offs + 2#)
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'  -- ALGLIB --
'     Copyright 19.05.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub DSNormalize(ByRef XY() As Double, _
         ByVal NPoints As Long, _
         ByVal NVars As Long, _
         ByRef Info As Long, _
         ByRef Means() As Double, _
         ByRef Sigmas() As Double)
    Dim i As Long
    Dim J As Long
    Dim Tmp() As Double
    Dim Mean As Double
    Dim Variance As Double
    Dim Skewness As Double
    Dim Kurtosis As Double
    Dim i_ As Long
    
    '
    ' Test parameters
    '
    If NPoints <= 0# Or NVars < 1# Then
        Info = -1#
        Exit Sub
    End If
    Info = 1#
    
    '
    ' Standartization
    '
    ReDim Means(0# To NVars - 1#)
    ReDim Sigmas(0# To NVars - 1#)
    ReDim Tmp(0# To NPoints - 1#)
    For J = 0# To NVars - 1# Step 1
        For i_ = 0# To NPoints - 1# Step 1
            Tmp(i_) = XY(i_, J)
        Next i_
        Call CalculateMoments(Tmp, NPoints, Mean, Variance, Skewness, Kurtosis)
        Means(J) = Mean
        Sigmas(J) = Sqr(Variance)
        If Sigmas(J) = 0# Then
            Sigmas(J) = 1#
        End If
        For i = 0# To NPoints - 1# Step 1
            XY(i, J) = (XY(i, J) - Means(J)) / Sigmas(J)
        Next i
    Next J
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'  -- ALGLIB --
'     Copyright 19.05.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub DSNormalizeC(ByRef XY() As Double, _
         ByVal NPoints As Long, _
         ByVal NVars As Long, _
         ByRef Info As Long, _
         ByRef Means() As Double, _
         ByRef Sigmas() As Double)
    Dim J As Long
    Dim Tmp() As Double
    Dim Mean As Double
    Dim Variance As Double
    Dim Skewness As Double
    Dim Kurtosis As Double
    Dim i_ As Long
    
    '
    ' Test parameters
    '
    If NPoints <= 0# Or NVars < 1# Then
        Info = -1#
        Exit Sub
    End If
    Info = 1#
    
    '
    ' Standartization
    '
    ReDim Means(0# To NVars - 1#)
    ReDim Sigmas(0# To NVars - 1#)
    ReDim Tmp(0# To NPoints - 1#)
    For J = 0# To NVars - 1# Step 1
        For i_ = 0# To NPoints - 1# Step 1
            Tmp(i_) = XY(i_, J)
        Next i_
        Call CalculateMoments(Tmp, NPoints, Mean, Variance, Skewness, Kurtosis)
        Means(J) = Mean
        Sigmas(J) = Sqr(Variance)
        If Sigmas(J) = 0# Then
            Sigmas(J) = 1#
        End If
    Next J
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'  -- ALGLIB --
'     Copyright 19.05.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function DSGetMeanMinDistance(ByRef XY() As Double, _
         ByVal NPoints As Long, _
         ByVal NVars As Long) As Double
    Dim Result As Double
    Dim i As Long
    Dim J As Long
    Dim Tmp() As Double
    Dim Tmp2() As Double
    Dim V As Double
    Dim i_ As Long
    
    '
    ' Test parameters
    '
    If NPoints <= 0# Or NVars < 1# Then
        Result = 0#
        DSGetMeanMinDistance = Result
        Exit Function
    End If
    
    '
    ' Process
    '
    ReDim Tmp(0# To NPoints - 1#)
    For i = 0# To NPoints - 1# Step 1
        Tmp(i) = MaxRealNumber
    Next i
    ReDim Tmp2(0# To NVars - 1#)
    For i = 0# To NPoints - 1# Step 1
        For J = i + 1# To NPoints - 1# Step 1
            For i_ = 0# To NVars - 1# Step 1
                Tmp2(i_) = XY(i, i_)
            Next i_
            For i_ = 0# To NVars - 1# Step 1
                Tmp2(i_) = Tmp2(i_) - XY(J, i_)
            Next i_
            V = 0#
            For i_ = 0# To NVars - 1# Step 1
                V = V + Tmp2(i_) * Tmp2(i_)
            Next i_
            V = Sqr(V)
            Tmp(i) = MinReal(Tmp(i), V)
            Tmp(J) = MinReal(Tmp(J), V)
        Next J
    Next i
    Result = 0#
    For i = 0# To NPoints - 1# Step 1
        Result = Result + Tmp(i) / NPoints
    Next i
    DSGetMeanMinDistance = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'  -- ALGLIB --
'     Copyright 19.05.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub DSTie(ByRef A() As Double, _
         ByVal N As Long, _
         ByRef Ties() As Long, _
         ByRef TieCount As Long, _
         ByRef P1() As Long, _
         ByRef P2() As Long)
    Dim i As Long
    Dim K As Long
    Dim Tmp() As Long
    
    '
    ' Special case
    '
    If N <= 0# Then
        TieCount = 0#
        Exit Sub
    End If
    
    '
    ' Sort A
    '
    Call TagSort(A, N, P1, P2)
    
    '
    ' Process ties
    '
    TieCount = 1#
    For i = 1# To N - 1# Step 1
        If A(i) <> A(i - 1#) Then
            TieCount = TieCount + 1#
        End If
    Next i
    ReDim Ties(0# To TieCount)
    Ties(0#) = 0#
    K = 1#
    For i = 1# To N - 1# Step 1
        If A(i) <> A(i - 1#) Then
            Ties(K) = i
            K = K + 1#
        End If
    Next i
    Ties(TieCount) = N
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'  -- ALGLIB --
'     Copyright 11.12.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub DSTieFastI(ByRef A() As Double, _
         ByRef B() As Long, _
         ByVal N As Long, _
         ByRef Ties() As Long, _
         ByRef TieCount As Long)
    Dim i As Long
    Dim K As Long
    Dim Tmp() As Long
    
    '
    ' Special case
    '
    If N <= 0# Then
        TieCount = 0#
        Exit Sub
    End If
    
    '
    ' Sort A
    '
    Call TagSortFastI(A, B, N)
    
    '
    ' Process ties
    '
    Ties(0#) = 0#
    K = 1#
    For i = 1# To N - 1# Step 1
        If A(i) <> A(i - 1#) Then
            Ties(K) = i
            K = K + 1#
        End If
    Next i
    Ties(K) = N
    TieCount = K
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Optimal partition, internal subroutine.
'
'  -- ALGLIB --
'     Copyright 22.05.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub DSOptimalSplit2(ByRef A_() As Double, _
         ByRef C_() As Long, _
         ByVal N As Long, _
         ByRef Info As Long, _
         ByRef Threshold As Double, _
         ByRef PAL As Double, _
         ByRef PBL As Double, _
         ByRef PAR As Double, _
         ByRef PBR As Double, _
         ByRef CVE As Double)
    Dim A() As Double
    Dim C() As Long
    Dim i As Long
    Dim T As Long
    Dim S As Double
    Dim Ties() As Long
    Dim TieCount As Long
    Dim P1() As Long
    Dim P2() As Long
    Dim K As Long
    Dim KOptimal As Long
    Dim PAK As Double
    Dim PBK As Double
    Dim CVOptimal As Double
    Dim CV As Double
    A = A_
    C = C_
    
    '
    ' Test for errors in inputs
    '
    If N <= 0# Then
        Info = -1#
        Exit Sub
    End If
    For i = 0# To N - 1# Step 1
        If C(i) <> 0# And C(i) <> 1# Then
            Info = -2#
            Exit Sub
        End If
    Next i
    Info = 1#
    
    '
    ' Tie
    '
    Call DSTie(A, N, Ties, TieCount, P1, P2)
    For i = 0# To N - 1# Step 1
        If P2(i) <> i Then
            T = C(i)
            C(i) = C(P2(i))
            C(P2(i)) = T
        End If
    Next i
    
    '
    ' Special case: number of ties is 1.
    '
    ' NOTE: we assume that P[i,j] equals to 0 or 1,
    '       intermediate values are not allowed.
    '
    If TieCount = 1# Then
        Info = -3#
        Exit Sub
    End If
    
    '
    ' General case, number of ties > 1
    '
    ' NOTE: we assume that P[i,j] equals to 0 or 1,
    '       intermediate values are not allowed.
    '
    PAL = 0#
    PBL = 0#
    PAR = 0#
    PBR = 0#
    For i = 0# To N - 1# Step 1
        If C(i) = 0# Then
            PAR = PAR + 1#
        End If
        If C(i) = 1# Then
            PBR = PBR + 1#
        End If
    Next i
    KOptimal = -1#
    CVOptimal = MaxRealNumber
    For K = 0# To TieCount - 2# Step 1
        
        '
        ' first, obtain information about K-th tie which is
        ' moved from R-part to L-part
        '
        PAK = 0#
        PBK = 0#
        For i = Ties(K) To Ties(K + 1#) - 1# Step 1
            If C(i) = 0# Then
                PAK = PAK + 1#
            End If
            If C(i) = 1# Then
                PBK = PBK + 1#
            End If
        Next i
        
        '
        ' Calculate cross-validation CE
        '
        CV = 0#
        CV = CV - XLNY(PAL + PAK, (PAL + PAK) / (PAL + PAK + PBL + PBK + 1#))
        CV = CV - XLNY(PBL + PBK, (PBL + PBK) / (PAL + PAK + 1# + PBL + PBK))
        CV = CV - XLNY(PAR - PAK, (PAR - PAK) / (PAR - PAK + PBR - PBK + 1#))
        CV = CV - XLNY(PBR - PBK, (PBR - PBK) / (PAR - PAK + 1# + PBR - PBK))
        
        '
        ' Compare with best
        '
        If CV < CVOptimal Then
            CVOptimal = CV
            KOptimal = K
        End If
        
        '
        ' update
        '
        PAL = PAL + PAK
        PBL = PBL + PBK
        PAR = PAR - PAK
        PBR = PBR - PBK
    Next K
    CVE = CVOptimal
    Threshold = 0.5 * (A(Ties(KOptimal)) + A(Ties(KOptimal + 1#)))
    PAL = 0#
    PBL = 0#
    PAR = 0#
    PBR = 0#
    For i = 0# To N - 1# Step 1
        If A(i) < Threshold Then
            If C(i) = 0# Then
                PAL = PAL + 1#
            Else
                PBL = PBL + 1#
            End If
        Else
            If C(i) = 0# Then
                PAR = PAR + 1#
            Else
                PBR = PBR + 1#
            End If
        End If
    Next i
    S = PAL + PBL
    PAL = PAL / S
    PBL = PBL / S
    S = PAR + PBR
    PAR = PAR / S
    PBR = PBR / S
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Optimal partition, internal subroutine. Fast version.
'
'Accepts:
'    A       array[0..N-1]       array of attributes     array[0..N-1]
'    C       array[0..N-1]       array of class labels
'    TiesBuf array[0..N]         temporaries (ties)
'    CntBuf  array[0..2*NC-1]    temporaries (counts)
'    Alpha                       centering factor (0<=alpha<=1, recommended value - 0.05)
'
'Output:
'    Info    error code (">0"=OK, "<0"=bad)
'    RMS     training set RMS error
'    CVRMS   leave-one-out RMS error
'
'Note:
'    content of all arrays is changed by subroutine
'
'  -- ALGLIB --
'     Copyright 11.12.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub DSOptimalSplit2Fast(ByRef A() As Double, _
         ByRef C() As Long, _
         ByRef TiesBuf() As Long, _
         ByRef CntBuf() As Long, _
         ByVal N As Long, _
         ByVal NC As Long, _
         ByVal Alpha As Double, _
         ByRef Info As Long, _
         ByRef Threshold As Double, _
         ByRef RMS As Double, _
         ByRef CVRMS As Double)
    Dim i As Long
    Dim K As Long
    Dim CL As Long
    Dim TieCount As Long
    Dim CBest As Double
    Dim CC As Double
    Dim KOptimal As Long
    Dim SL As Long
    Dim SR As Long
    Dim V As Double
    Dim W As Double
    Dim X As Double
    
    '
    ' Test for errors in inputs
    '
    If N <= 0# Or NC < 2# Then
        Info = -1#
        Exit Sub
    End If
    For i = 0# To N - 1# Step 1
        If C(i) < 0# Or C(i) >= NC Then
            Info = -2#
            Exit Sub
        End If
    Next i
    Info = 1#
    
    '
    ' Tie
    '
    Call DSTieFastI(A, C, N, TiesBuf, TieCount)
    
    '
    ' Special case: number of ties is 1.
    '
    If TieCount = 1# Then
        Info = -3#
        Exit Sub
    End If
    
    '
    ' General case, number of ties > 1
    '
    For i = 0# To 2# * NC - 1# Step 1
        CntBuf(i) = 0#
    Next i
    For i = 0# To N - 1# Step 1
        CntBuf(NC + C(i)) = CntBuf(NC + C(i)) + 1#
    Next i
    KOptimal = -1#
    Threshold = A(N - 1#)
    CBest = MaxRealNumber
    SL = 0#
    SR = N
    For K = 0# To TieCount - 2# Step 1
        
        '
        ' first, move Kth tie from right to left
        '
        For i = TiesBuf(K) To TiesBuf(K + 1#) - 1# Step 1
            CL = C(i)
            CntBuf(CL) = CntBuf(CL) + 1#
            CntBuf(NC + CL) = CntBuf(NC + CL) - 1#
        Next i
        SL = SL + (TiesBuf(K + 1#) - TiesBuf(K))
        SR = SR - (TiesBuf(K + 1#) - TiesBuf(K))
        
        '
        ' Calculate RMS error
        '
        V = 0#
        For i = 0# To NC - 1# Step 1
            W = CntBuf(i)
            V = V + W * Square(W / SL - 1#)
            V = V + (SL - W) * Square(W / SL)
            W = CntBuf(NC + i)
            V = V + W * Square(W / SR - 1#)
            V = V + (SR - W) * Square(W / SR)
        Next i
        V = Sqr(V / (NC * N))
        
        '
        ' Compare with best
        '
        X = 2# * SL / (SL + SR) - 1#
        CC = V * (1# - Alpha + Alpha * Square(X))
        If CC < CBest Then
            
            '
            ' store split
            '
            RMS = V
            KOptimal = K
            CBest = CC
            
            '
            ' calculate CVRMS error
            '
            CVRMS = 0#
            For i = 0# To NC - 1# Step 1
                If SL > 1# Then
                    W = CntBuf(i)
                    CVRMS = CVRMS + W * Square((W - 1#) / (SL - 1#) - 1#)
                    CVRMS = CVRMS + (SL - W) * Square(W / (SL - 1#))
                Else
                    W = CntBuf(i)
                    CVRMS = CVRMS + W * Square(1# / NC - 1#)
                    CVRMS = CVRMS + (SL - W) * Square(1# / NC)
                End If
                If SR > 1# Then
                    W = CntBuf(NC + i)
                    CVRMS = CVRMS + W * Square((W - 1#) / (SR - 1#) - 1#)
                    CVRMS = CVRMS + (SR - W) * Square(W / (SR - 1#))
                Else
                    W = CntBuf(NC + i)
                    CVRMS = CVRMS + W * Square(1# / NC - 1#)
                    CVRMS = CVRMS + (SR - W) * Square(1# / NC)
                End If
            Next i
            CVRMS = Sqr(CVRMS / (NC * N))
        End If
    Next K
    
    '
    ' Calculate threshold.
    ' Code is a bit complicated because there can be such
    ' numbers that 0.5(A+B) equals to A or B (if A-B=epsilon)
    '
    Threshold = 0.5 * (A(TiesBuf(KOptimal)) + A(TiesBuf(KOptimal + 1#)))
    If Threshold <= A(TiesBuf(KOptimal)) Then
        Threshold = A(TiesBuf(KOptimal + 1#))
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Automatic non-optimal discretization, internal subroutine.
'
'  -- ALGLIB --
'     Copyright 22.05.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub DSSplitK(ByRef A_() As Double, _
         ByRef C_() As Long, _
         ByVal N As Long, _
         ByVal NC As Long, _
         ByVal KMax As Long, _
         ByRef Info As Long, _
         ByRef Thresholds() As Double, _
         ByRef NI As Long, _
         ByRef CVE As Double)
    Dim A() As Double
    Dim C() As Long
    Dim i As Long
    Dim J As Long
    Dim J1 As Long
    Dim K As Long
    Dim Ties() As Long
    Dim TieCount As Long
    Dim P1() As Long
    Dim P2() As Long
    Dim Cnt() As Long
    Dim V2 As Double
    Dim BestK As Long
    Dim BestCVE As Double
    Dim BestSizes() As Long
    Dim CurCVE As Double
    Dim CurSizes() As Long
    A = A_
    C = C_
    
    '
    ' Test for errors in inputs
    '
    If N <= 0# Or NC < 2# Or KMax < 2# Then
        Info = -1#
        Exit Sub
    End If
    For i = 0# To N - 1# Step 1
        If C(i) < 0# Or C(i) >= NC Then
            Info = -2#
            Exit Sub
        End If
    Next i
    Info = 1#
    
    '
    ' Tie
    '
    Call DSTie(A, N, Ties, TieCount, P1, P2)
    For i = 0# To N - 1# Step 1
        If P2(i) <> i Then
            K = C(i)
            C(i) = C(P2(i))
            C(P2(i)) = K
        End If
    Next i
    
    '
    ' Special cases
    '
    If TieCount = 1# Then
        Info = -3#
        Exit Sub
    End If
    
    '
    ' General case:
    ' 0. allocate arrays
    '
    KMax = MinInt(KMax, TieCount)
    ReDim BestSizes(0# To KMax - 1#)
    ReDim CurSizes(0# To KMax - 1#)
    ReDim Cnt(0# To NC - 1#)
    
    '
    ' General case:
    ' 1. prepare "weak" solution (two subintervals, divided at median)
    '
    V2 = MaxRealNumber
    J = -1#
    For i = 1# To TieCount - 1# Step 1
        If Abs(Ties(i) - 0.5 * (N - 1#)) < V2 Then
            V2 = Abs(Ties(i) - 0.5 * N)
            J = i
        End If
    Next i
    BestK = 2#
    BestSizes(0#) = Ties(J)
    BestSizes(1#) = N - J
    BestCVE = 0#
    For i = 0# To NC - 1# Step 1
        Cnt(i) = 0#
    Next i
    For i = 0# To J - 1# Step 1
        Call TieAddC(C, Ties, i, NC, Cnt)
    Next i
    BestCVE = BestCVE + GetCV(Cnt, NC)
    For i = 0# To NC - 1# Step 1
        Cnt(i) = 0#
    Next i
    For i = J To TieCount - 1# Step 1
        Call TieAddC(C, Ties, i, NC, Cnt)
    Next i
    BestCVE = BestCVE + GetCV(Cnt, NC)
    
    '
    ' General case:
    ' 2. Use greedy algorithm to find sub-optimal split in O(KMax*N) time
    '
    For K = 2# To KMax Step 1
        
        '
        ' Prepare greedy K-interval split
        '
        For i = 0# To K - 1# Step 1
            CurSizes(i) = 0#
        Next i
        i = 0#
        J = 0#
        Do While J <= TieCount - 1# And i <= K - 1#
            
            '
            ' Rule: I-th bin is empty, fill it
            '
            If CurSizes(i) = 0# Then
                CurSizes(i) = Ties(J + 1#) - Ties(J)
                J = J + 1#
                GoTo Cont_10
            End If
            
            '
            ' Rule: (K-1-I) bins left, (K-1-I) ties left (1 tie per bin); next bin
            '
            If TieCount - J = K - 1# - i Then
                i = i + 1#
                GoTo Cont_10
            End If
            
            '
            ' Rule: last bin, always place in current
            '
            If i = K - 1# Then
                CurSizes(i) = CurSizes(i) + Ties(J + 1#) - Ties(J)
                J = J + 1#
                GoTo Cont_10
            End If
            
            '
            ' Place J-th tie in I-th bin, or leave for I+1-th bin.
            '
            If Abs(CurSizes(i) + Ties(J + 1#) - Ties(J) - N / K) < Abs(CurSizes(i) - N / K) Then
                CurSizes(i) = CurSizes(i) + Ties(J + 1#) - Ties(J)
                J = J + 1#
            Else
                i = i + 1#
            End If
Cont_10:
        Loop
        
        '
        ' Calculate CVE
        '
        CurCVE = 0#
        J = 0#
        For i = 0# To K - 1# Step 1
            For J1 = 0# To NC - 1# Step 1
                Cnt(J1) = 0#
            Next J1
            For J1 = J To J + CurSizes(i) - 1# Step 1
                Cnt(C(J1)) = Cnt(C(J1)) + 1#
            Next J1
            CurCVE = CurCVE + GetCV(Cnt, NC)
            J = J + CurSizes(i)
        Next i
        
        '
        ' Choose best variant
        '
        If CurCVE < BestCVE Then
            For i = 0# To K - 1# Step 1
                BestSizes(i) = CurSizes(i)
            Next i
            BestCVE = CurCVE
            BestK = K
        End If
    Next K
    
    '
    ' Transform from sizes to thresholds
    '
    CVE = BestCVE
    NI = BestK
    ReDim Thresholds(0# To NI - 2#)
    J = BestSizes(0#)
    For i = 1# To BestK - 1# Step 1
        Thresholds(i - 1#) = 0.5 * (A(J - 1#) + A(J))
        J = J + BestSizes(i)
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Automatic optimal discretization, internal subroutine.
'
'  -- ALGLIB --
'     Copyright 22.05.2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub DSOptimalSplitK(ByRef A_() As Double, _
         ByRef C_() As Long, _
         ByVal N As Long, _
         ByVal NC As Long, _
         ByVal KMax As Long, _
         ByRef Info As Long, _
         ByRef Thresholds() As Double, _
         ByRef NI As Long, _
         ByRef CVE As Double)
    Dim A() As Double
    Dim C() As Long
    Dim i As Long
    Dim J As Long
    Dim S As Long
    Dim JL As Long
    Dim JR As Long
    Dim V2 As Double
    Dim Ties() As Long
    Dim TieCount As Long
    Dim P1() As Long
    Dim P2() As Long
    Dim CVTemp As Double
    Dim Cnt() As Long
    Dim Cnt2() As Long
    Dim CV() As Double
    Dim Splits() As Long
    Dim K As Long
    Dim KOptimal As Long
    Dim CVOptimal As Double
    A = A_
    C = C_
    
    '
    ' Test for errors in inputs
    '
    If N <= 0# Or NC < 2# Or KMax < 2# Then
        Info = -1#
        Exit Sub
    End If
    For i = 0# To N - 1# Step 1
        If C(i) < 0# Or C(i) >= NC Then
            Info = -2#
            Exit Sub
        End If
    Next i
    Info = 1#
    
    '
    ' Tie
    '
    Call DSTie(A, N, Ties, TieCount, P1, P2)
    For i = 0# To N - 1# Step 1
        If P2(i) <> i Then
            K = C(i)
            C(i) = C(P2(i))
            C(P2(i)) = K
        End If
    Next i
    
    '
    ' Special cases
    '
    If TieCount = 1# Then
        Info = -3#
        Exit Sub
    End If
    
    '
    ' General case
    ' Use dynamic programming to find best split in O(KMax*NC*TieCount^2) time
    '
    KMax = MinInt(KMax, TieCount)
    ReDim CV(0# To KMax - 1#, 0# To TieCount - 1#)
    ReDim Splits(0# To KMax - 1#, 0# To TieCount - 1#)
    ReDim Cnt(0# To NC - 1#)
    ReDim Cnt2(0# To NC - 1#)
    For J = 0# To NC - 1# Step 1
        Cnt(J) = 0#
    Next J
    For J = 0# To TieCount - 1# Step 1
        Call TieAddC(C, Ties, J, NC, Cnt)
        Splits(0#, J) = 0#
        CV(0#, J) = GetCV(Cnt, NC)
    Next J
    For K = 1# To KMax - 1# Step 1
        For J = 0# To NC - 1# Step 1
            Cnt(J) = 0#
        Next J
        
        '
        ' Subtask size J in [K..TieCount-1]:
        ' optimal K-splitting on ties from 0-th to J-th.
        '
        For J = K To TieCount - 1# Step 1
            
            '
            ' Update Cnt - let it contain classes of ties from K-th to J-th
            '
            Call TieAddC(C, Ties, J, NC, Cnt)
            
            '
            ' Search for optimal split point S in [K..J]
            '
            For i = 0# To NC - 1# Step 1
                Cnt2(i) = Cnt(i)
            Next i
            CV(K, J) = CV(K - 1#, J - 1#) + GetCV(Cnt2, NC)
            Splits(K, J) = J
            For S = K + 1# To J Step 1
                
                '
                ' Update Cnt2 - let it contain classes of ties from S-th to J-th
                '
                Call TieSubC(C, Ties, S - 1#, NC, Cnt2)
                
                '
                ' Calculate CVE
                '
                CVTemp = CV(K - 1#, S - 1#) + GetCV(Cnt2, NC)
                If CVTemp < CV(K, J) Then
                    CV(K, J) = CVTemp
                    Splits(K, J) = S
                End If
            Next S
        Next J
    Next K
    
    '
    ' Choose best partition, output result
    '
    KOptimal = -1#
    CVOptimal = MaxRealNumber
    For K = 0# To KMax - 1# Step 1
        If CV(K, TieCount - 1#) < CVOptimal Then
            CVOptimal = CV(K, TieCount - 1#)
            KOptimal = K
        End If
    Next K
    If KOptimal = 0# Then
        
        '
        ' Special case: best partition is one big interval.
        ' Even 2-partition is not better.
        ' This is possible when dealing with "weak" predictor variables.
        '
        ' Make binary split as close to the median as possible.
        '
        V2 = MaxRealNumber
        J = -1#
        For i = 1# To TieCount - 1# Step 1
            If Abs(Ties(i) - 0.5 * (N - 1#)) < V2 Then
                V2 = Abs(Ties(i) - 0.5 * (N - 1#))
                J = i
            End If
        Next i
        ReDim Thresholds(0# To 0#)
        Thresholds(0#) = 0.5 * (A(Ties(J - 1#)) + A(Ties(J)))
        NI = 2#
        CVE = 0#
        For i = 0# To NC - 1# Step 1
            Cnt(i) = 0#
        Next i
        For i = 0# To J - 1# Step 1
            Call TieAddC(C, Ties, i, NC, Cnt)
        Next i
        CVE = CVE + GetCV(Cnt, NC)
        For i = 0# To NC - 1# Step 1
            Cnt(i) = 0#
        Next i
        For i = J To TieCount - 1# Step 1
            Call TieAddC(C, Ties, i, NC, Cnt)
        Next i
        CVE = CVE + GetCV(Cnt, NC)
    Else
        
        '
        ' General case: 2 or more intervals
        '
        ReDim Thresholds(0# To KOptimal - 1#)
        NI = KOptimal + 1#
        CVE = CV(KOptimal, TieCount - 1#)
        JL = Splits(KOptimal, TieCount - 1#)
        JR = TieCount - 1#
        For K = KOptimal To 1# Step -1
            Thresholds(K - 1#) = 0.5 * (A(Ties(JL - 1#)) + A(Ties(JL)))
            JR = JL - 1#
            JL = Splits(K - 1#, JL - 1#)
        Next K
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Subroutine prepares K-fold split of the training set.
'
'NOTES:
'    "NClasses>0" means that we have classification task.
'    "NClasses<0" means regression task with -NClasses real outputs.
'
'  -- ALGLIB --
'     Copyright 11.01.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub DSKFoldSplit(ByRef XY() As Double, _
         ByVal NPoints As Long, _
         ByVal NClasses As Long, _
         ByVal FoldsCount As Long, _
         ByVal StratifiedSplits As Boolean, _
         ByRef Folds() As Long)
    Dim i As Long
    Dim J As Long
    Dim K As Long
    
    '
    ' test parameters
    '
    
    '
    ' Folds
    '
    ReDim Folds(0# To NPoints - 1#)
    For i = 0# To NPoints - 1# Step 1
        Folds(i) = i * FoldsCount \ NPoints
    Next i
    For i = 0# To NPoints - 2# Step 1
        J = i + RandomInteger(NPoints - i)
        If J <> i Then
            K = Folds(i)
            Folds(i) = Folds(J)
            Folds(J) = K
        End If
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal function
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function XLNY(ByVal X As Double, ByVal Y As Double) As Double
    Dim Result As Double
    If X = 0# Then
        Result = 0#
    Else
        Result = X * Log(Y)
    End If
    XLNY = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal function,
'returns number of samples of class I in Cnt[I]
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function GetCV(ByRef Cnt() As Long, ByVal NC As Long) As Double
    Dim Result As Double
    Dim i As Long
    Dim S As Double
    S = 0#
    For i = 0# To NC - 1# Step 1
        S = S + Cnt(i)
    Next i
    Result = 0#
    For i = 0# To NC - 1# Step 1
        Result = Result - XLNY(Cnt(i), Cnt(i) / (S + NC - 1#))
    Next i
    GetCV = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal function, adds number of samples of class I in tie NTie to Cnt[I]
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub TieAddC(ByRef C() As Long, _
         ByRef Ties() As Long, _
         ByVal NTie As Long, _
         ByVal NC As Long, _
         ByRef Cnt() As Long)
    Dim i As Long
    For i = Ties(NTie) To Ties(NTie + 1#) - 1# Step 1
        Cnt(C(i)) = Cnt(C(i)) + 1#
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal function, subtracts number of samples of class I in tie NTie to Cnt[I]
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub TieSubC(ByRef C() As Long, _
         ByRef Ties() As Long, _
         ByVal NTie As Long, _
         ByVal NC As Long, _
         ByRef Cnt() As Long)
    Dim i As Long
    For i = Ties(NTie) To Ties(NTie + 1#) - 1# Step 1
        Cnt(C(i)) = Cnt(C(i)) - 1#
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Internal function,
'returns number of samples of class I in Cnt[I]
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub TieGetC(ByRef C() As Long, _
         ByRef Ties() As Long, _
         ByVal NTie As Long, _
         ByVal NC As Long, _
         ByRef Cnt() As Long)
    Dim i As Long
    For i = 0# To NC - 1# Step 1
        Cnt(i) = 0#
    Next i
    For i = Ties(NTie) To Ties(NTie + 1#) - 1# Step 1
        Cnt(C(i)) = Cnt(C(i)) + 1#
    Next i
End Sub
