''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2005-2007, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Determinant calculation of the matrix given by its LU decomposition.
'
'Input parameters:
'    A       -   LU decomposition of the matrix (output of
'                RMatrixLU subroutine).
'    Pivots  -   table of permutations which were made during
'                the LU decomposition.
'                Output of RMatrixLU subroutine.
'    N       -   size of matrix A.
'
'Result: matrix determinant.
'
'  -- ALGLIB --
'     Copyright 2005 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function RMatrixLUDet(ByRef A() As Double, _
         ByRef Pivots() As Long, _
         ByVal N As Long) As Double
    Dim Result As Double
    Dim i As Long
    Dim S As Long
    Result = 1#
    S = 1#
    For i = 0# To N - 1# Step 1
        Result = Result * A(i, i)
        If Pivots(i) <> i Then
            S = -S
        End If
    Next i
    Result = Result * S
    RMatrixLUDet = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Calculation of the determinant of a general matrix
'
'Input parameters:
'    A       -   matrix, array[0..N-1, 0..N-1]
'    N       -   size of matrix A.
'
'Result: determinant of matrix A.
'
'  -- ALGLIB --
'     Copyright 2005 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function RMatrixDet(ByRef A_() As Double, ByVal N As Long) As Double
    Dim Result As Double
    Dim A() As Double
    Dim Pivots() As Long
    A = A_
    Call RMatrixLU(A, N, N, Pivots)
    Result = RMatrixLUDet(A, Pivots, N)
    RMatrixDet = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Determinant calculation of the matrix given by its LU decomposition.
'
'Input parameters:
'    A       -   LU decomposition of the matrix (output of
'                RMatrixLU subroutine).
'    Pivots  -   table of permutations which were made during
'                the LU decomposition.
'                Output of RMatrixLU subroutine.
'    N       -   size of matrix A.
'
'Result: matrix determinant.
'
'  -- ALGLIB --
'     Copyright 2005 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function CMatrixLUDet(ByRef A() As Complex, _
         ByRef Pivots() As Long, _
         ByVal N As Long) As Complex
    Dim Result As Complex
    Dim i As Long
    Dim S As Long
    Result = C_Complex(1#)
    S = 1#
    For i = 0# To N - 1# Step 1
        Result = C_Mul(Result, A(i, i))
        If Pivots(i) <> i Then
            S = -S
        End If
    Next i
    Result = C_MulR(Result, S)
    CMatrixLUDet = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Calculation of the determinant of a general matrix
'
'Input parameters:
'    A       -   matrix, array[0..N-1, 0..N-1]
'    N       -   size of matrix A.
'
'Result: determinant of matrix A.
'
'  -- ALGLIB --
'     Copyright 2005 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function CMatrixDet(ByRef A_() As Complex, ByVal N As Long) As Complex
    Dim Result As Complex
    Dim A() As Complex
    Dim Pivots() As Long
    A = A_
    Call CMatrixLU(A, N, N, Pivots)
    Result = CMatrixLUDet(A, Pivots, N)
    CMatrixDet = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Determinant calculation of the matrix given by the Cholesky decomposition.
'
'Input parameters:
'    A   -   Cholesky decomposition,
'            output of SMatrixCholesky subroutine.
'    N   -   size of matrix A.
'
'As the determinant is equal to the product of squares of diagonal elements,
'it’s not necessary to specify which triangle - lower or upper - the matrix
'is stored in.
'
'Result:
'    matrix determinant.
'
'  -- ALGLIB --
'     Copyright 2005-2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function SPDMatrixCholeskyDet(ByRef A() As Double, _
         ByVal N As Long) As Double
    Dim Result As Double
    Dim i As Long
    Result = 1#
    For i = 0# To N - 1# Step 1
        Result = Result * Square(A(i, i))
    Next i
    SPDMatrixCholeskyDet = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Determinant calculation of the symmetric positive definite matrix.
'
'Input parameters:
'    A       -   matrix. Array with elements [0..N-1, 0..N-1].
'    N       -   size of matrix A.
'    IsUpper -   if IsUpper = True, then the symmetric matrix A is given by
'                its upper triangle, and the lower triangle isn’t used by
'                subroutine. Similarly, if IsUpper = False, then A is given
'                by its lower triangle.
'
'Result:
'    determinant of matrix A.
'    If matrix A is not positive definite, then subroutine returns -1.
'
'  -- ALGLIB --
'     Copyright 2005-2008 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function SPDMatrixDet(ByRef A_() As Double, _
         ByVal N As Long, _
         ByVal IsUpper As Boolean) As Double
    Dim Result As Double
    Dim A() As Double
    A = A_
    If Not SPDMatrixCholesky(A, N, IsUpper) Then
        Result = -1#
    Else
        Result = SPDMatrixCholeskyDet(A, N)
    End If
    SPDMatrixDet = Result
End Function
