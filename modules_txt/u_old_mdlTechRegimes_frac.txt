'=======================================================================================
'Unifloc 7.24  coronav                                          khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2019
'
'=======================================================================================
' функции для расчета параметров технологического режима добывающих скважин
' унаследованные функции из тех режима для обеспечения совместимости и совместных расчетов
' названия изменены (префикс) для обеспечения совместимости надстройки со старыми файлами
'==========================================================
'======================== mdlSkinCalc =====================
'==========================================================
Public Function old_getJd(hp, k, spgrpr, por, Kf, Re, Optional Mp = 5) As Double
    Const mD = 9.869233E-16
    Dim Rw As Double, hf As Double, M As Double
    Dim rp, vf, VR, Nprop
    Dim Jdopt, Cfdopt, Ixopt
    
    por = por / 100
    Kf = Kf * mD * 1000
    k = k * mD
    Rw = 0.1
    hf = hp * 1.5
    M = Mp * hp * 1000 / 2
    
    Call DLrp1(hp, hf, rp)
    
    vf = rp * M / ((1 - por) * (1000 * spgrpr))
    VR = hp * Re ^ 2 * const_Pi
    Nprop = (4 * vf * Kf) / (k * VR)
    
    Call FracOpt(Nprop, Jdopt, Cfdopt, Ixopt)
    old_getJd = Jdopt
End Function
Public Function old_getS(Jdopt, Re) As Double
    Const Rw = 0.1
    Dim SF
    SF = 1 / Jdopt - Log(Re / Rw) + 3 / 4
    old_getS = SF
End Function
Private Sub DLrp1(hp, hf, rp)
    If hp <= hf Then
        rp = hp / hf
    Else
        rp = 1
    End If
End Sub
'***********************************************************
'*                                Jd                       *
'***********************************************************
Private Function Jd(Nprop As Double, Cfd As Double) As Double
Select Case Nprop
  Case Is <= 0.1
    Jd = JD1(Nprop, Cfd)
  Case Is <= 1#
    Jd = JD2(Nprop, Cfd)
  Case Is <= 10#
    Jd = Jd3(Nprop, Cfd)
  Case Else
    Jd = Jd4(Nprop, Cfd)
End Select
End Function
Private Sub FracPI(Npropin, Cfdin, Ixin, Jdout)
'Calculate the variable that is missing from the other two
Dim Nprop As Double, Cfd As Double, IX As Double
If (Npropin * Cfdin * Ixin <> 0) Then End
If Npropin = 0 Then
 Cfd = Cfdin
 IX = Ixin
 Nprop = Cfd * IX ^ 2
End If
If Cfdin = 0 Then
 Nprop = Npropin
 IX = Ixin
 Cfd = Nprop / IX ^ 2
End If
If IX = 0 Then
 Nprop = Npropin
 Cfd = Cfdin
 IX = Sqr(Nprop / Cfd)
End If
 Jdout = Jd(Nprop, Cfd)
End Sub
Private Sub FracOpt(Npropin, Jdoptout, Cfdoptout, Ixoptout)
Dim Nprop As Double, Jdopt As Double, Cfdopt As Double, Ixopt As Double
Dim xl As Double, xu As Double, r As Double
Dim x1 As Double, x2 As Double, F1 As Double, F2 As Double, d As Double
Nprop = Npropin
'Golden Section
 xu = Nprop / 0.00000001
 xl = Nprop
 r = (Sqr(5) - 1) / 2
 'finding the optimum
 d = r * (xu - xl)
 x1 = xl + d
 x2 = xu - d
 F1 = Jd(Nprop, x1)
 F2 = Jd(Nprop, x2)
 Do
    d = r * d
    If F1 > F2 Then
            xl = x2
            x2 = x1
            F2 = F1
            x1 = xl + d
            F1 = Jd(Nprop, x1)
    Else
            xu = x1
            x1 = x2
            F1 = F2
            x2 = xu - d
            F2 = Jd(Nprop, x2)
    End If
    If Abs(xu - xl) < 0.00001 Then Exit Do
 Loop
 Cfdopt = (xl + xu) / 2
 Ixopt = Sqr(Nprop / Cfdopt)
 Jdopt = Jd(Nprop, Cfdopt)
'
 Cfdoptout = Cfdopt
 Ixoptout = Ixopt
 Jdoptout = Jdopt
End Sub
'***********************************************************
'*                    Jd for Nprop < 0.1                      *
'***********************************************************
Private Function JD1(Nprop As Double, Cfd As Double) As Double
 JD1 = 1 / (-0.629 + 0.5 * Log(Cfd / Nprop) + fCL(Cfd))
End Function
'***********************************************************
'*             Jd for Nprop between 0.1 and 1              *
'***********************************************************
Private Function JD2(Nprop As Double, Cfd As Double) As Double
Dim IX As Double, delta1 As Double
 IX = Sqr(Nprop / Cfd)
 delta1 = Jd_Ix1(Nprop) - JD1(Nprop, Nprop)
 JD2 = JD1(Nprop, Cfd) + delta1 * G1(IX)
End Function
'***********************************************************
'*             Jd for Nprop between 1 and 10               *
'***********************************************************
Private Function Jd3(Nprop As Double, Cfd As Double) As Double
Dim IX As Double, Delta2 As Double
 IX = Sqr(Nprop / Cfd)
 Delta2 = Jd_Ix1(Nprop) - JD2(1#, Nprop)
 Jd3 = JD2(1, Cfd) + Delta2 * g10(IX)
End Function
'***********************************************************
'*             Jd for Nprop above 10                       *
'***********************************************************
Private Function Jd4(Nprop As Double, Cfd As Double) As Double
Dim IX As Double, Delta3 As Double, Cfd10 As Double
 IX = Sqr(Nprop / Cfd)
 Cfd10 = 10 / IX ^ 2
 Delta3 = Jd_Ix1(Nprop) - Jd_Ix1(10#)
 Jd4 = Jd3(10#, Cfd10) + Delta3 * hinf(IX)
End Function
'***********************************************************
'*               Cinco-Ley's Function fCL(CfD)               *
'***********************************************************
Private Function fCL(Cfd As Double) As Double  'Cinco-Ley Function
Dim num As Double, denom As Double
 num = 1.65 - 0.328 * Log(Cfd) + 0.116 * (Log(Cfd)) ^ 2
 denom = 1 + 0.18 * Log(Cfd) + 0.064 * (Log(Cfd)) ^ 2 + 0.005 * (Log(Cfd)) ^ 3
 fCL = num / denom
End Function
'***********************************************************
'*               Jd calculated at Ix = 1                   *
'***********************************************************
Private Function Jd_Ix1(Nprop As Double) As Double
 If (Nprop < 241) Then
  Jd_Ix1 = 1.13576 - 0.0529836 * Log(Nprop) - 0.912619 * (Atn(0.37403 - 0.494469 * Log(Nprop)))
 Else
  Jd_Ix1 = 1.909859
  End If
End Function
'***********************************************************
'*                        g1 function                      *
'***********************************************************
Private Function G1(IX As Double) As Double
 G1 = 3.357 * IX ^ 5 - 10.686 * IX ^ 4 + 10.041 * IX ^ 3 - 2.1452 * IX ^ 2 + 0.449 * IX - 0.01452
End Function
'***********************************************************
'*                        g10 function                     *
'***********************************************************
Private Function g10(IX As Double) As Double
 g10 = 2.5016 * IX ^ 5 - 7.8231 * IX ^ 4 + 6.7988 * IX ^ 3 - 1.7905 * IX ^ 2 + 1.272 * IX + 0.0346 + 1.44845779338554E-03
End Function
'***********************************************************
'*                      hinf function                      *
'***********************************************************
Private Function hinf(IX As Double) As Double
 hinf = IX ^ 2
End Function
'==========================================================

