'=======================================================================================
'Unifloc 7.25  coronav                                          khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2019
'
'=======================================================================================
'
' класс для хранения и работы с графиками функций y=f(x) заданных в табличном виде
'
' Ver 1.3
' 2019/07/13
' добавлены функции для интерполяциями сплайнами на основе alglib
'
'
' Ver 1.2
' rnt
' обновление для более полного манипулирования графиками
'
'
Option Explicit
Private Type TDPoint    ' тип для хранения точек
    x As Double
    y As Double
    stable As Boolean    ' специальный признак точки - показывает должна ли она сохраняться при преобразовании
End Type
' Поиск решения x при известном y
Public Enum CInterpolation_SOLUTION
    TS_EXTRPOLATION = 0                 ' осуществлять экстраполирование решение
    TS_NO_EXTRPOLATION = 1              ' без экстрополяции
End Enum
Private class_name_ As String              ' имя класса для унифицированной генерации сообщений об ошибках
Private FPoints() As TDPoint            ' исходный массив точек
Private FSolutionPoints() As TDPoint    ' массив точек решений (поиск x при известном y)
Private FStablePoints() As Double       ' массив особых (стабильных) точек, которые сохраняются при трансформации кривой
Private FkPoint As Integer              ' количество точек в массиве
Private FkSolPoints As Integer          ' количество точек решений
Private FkStablePoints As Integer       ' количество стабильных точек
Private FMinY As Double                 ' минимальное значение функции
Private FMaxY As Double                 ' максимальное значение функции
'Public Z As Double                      ' неизвестная переменная - не используется ?
' флаг определяющий является ли функция линейно интерпорлированной или ступенчатой
Public isStepFunction As Boolean
' доп параметры для описания графиков
Public Title As String
Public xName As String
Public yName As String
Public note As String
Public special As Boolean
Private spline_interpolant As Spline1DInterpolant
Private Sub Class_Initialize()
    class_name_ = "CInterpolation"
    special = False
    Call ClearPoints
    isStepFunction = False  ' по умолчанию - линейно интерполированная
End Sub
Public Function NumStablePoints() As Integer
    NumStablePoints = FkStablePoints
End Function
' свойство возвращает значение стабильной точки по ее номеру, если такая точка есть
Public Function StablePoint(I As Integer) As Double
    If I > 0 And I <= FkStablePoints Then
        StablePoint = FStablePoints(I - 1)
    Else
        Err.Raise kErrcurvestablePointIndex, , "Неверный индекс при считывании стабильных точек кривой CInterpolation"
    End If
End Function
Public Function num_points() As Integer
    num_points = FkPoint
End Function
Public Function pointStable(I As Integer) As Boolean
    If I > 0 And I <= FkPoint Then
        pointStable = FPoints(I - 1).stable
    Else
        Err.Raise kErrCurvePointIndex, , "Неверный индекс при считывании точек Х кривой CInterpolation"
    End If
End Function
Public Function pointX(I As Integer) As Double
    If I > 0 And I <= FkPoint Then
        pointX = FPoints(I - 1).x
    Else
        Err.Raise kErrCurvePointIndex, , "Неверный индекс при считывании точек Х кривой CInterpolation"
    End If
End Function
Public Function PointY(I As Integer) As Double
    If I > 0 And I <= FkPoint Then
        PointY = FPoints(I - 1).y
    Else
        Err.Raise kErrCurvePointIndex, , "Неверный индекс при считывании точек Y кривой CInterpolation"
    End If
End Function
Public Function SolutionPointX(I As Integer) As Double
    If I > 0 And I <= FkSolPoints Then
        SolutionPointX = FSolutionPoints(I - 1).x
    Else
        Err.Raise kErrCurvePointIndex, , "Неверный индекс при считывании точек X решений кривой CInterpolation"
    End If
End Function
Public Function SolutionPointY(I As Integer) As Double
    If I > 0 And I <= FkSolPoints Then
        SolutionPointY = FSolutionPoints(I - 1).y
    Else
        Err.Raise kErrCurvePointIndex, , "Неверный индекс при считывании точек Y решений кривой CInterpolation"
    End If
End Function
Public Function miny() As Double
    miny = FMinY
End Function
Public Function maxy() As Double
    maxy = FMaxY
End Function
Public Function minx() As Double
    If FkPoint = 0 Then minx = 0 Else minx = FPoints(0).x
End Function
Public Function maxx() As Double
    If FkPoint = 0 Then maxx = 0 Else maxx = FPoints(FkPoint - 1).x
End Function
Private Sub FindMinMaxY()
'находит минимальное и максимальное значение функции
Dim I As Integer
If FkPoint > 1 Then
    FMinY = FPoints(LBound(FPoints)).y
    FMaxY = FPoints(LBound(FPoints)).y
    For I = LBound(FPoints) To UBound(FPoints)
        If FPoints(I).y > FMaxY Then FMaxY = FPoints(I).y
        If FPoints(I).y < FMinY Then FMinY = FPoints(I).y
    Next I
End If
End Sub
Private Function getFirstPointNo(ByVal x As Double) As Integer
 Dim I As Integer
 Dim f As Boolean
 
    I = 0
    f = True
    While f
        f = False
        If I < FkPoint - 1 Then
            If x > FPoints(I).x Then
                I = I + 1
                f = True
            End If
        End If
    Wend
    If I = 0 Then I = 1
    getFirstPointNo = I - 1
End Function
Public Function FindSolutions(Yvalue As Double, Optional ByVal with_extrapolation As CInterpolation_SOLUTION = TS_EXTRPOLATION) As Integer
' FindSolutions Функция поиска решений X по известному Y. По умолчанию расчет ведется с линейной экстраполяцией на краях
' @param Yvalue - значение Y
' @param with_extrapolation - производить ли экстраполяцию при расчете
' @return Количество найденных точек
  Dim x1, x2, y1, y2 As Double
  Dim x As Double
  Dim I As Integer
  
On Error GoTo err1:
  FkSolPoints = 0  ' assume no soutions
  If UBound(FPoints) = LBound(FPoints) Then  ' если только одна точка то ничего нельзя сделать
        FindSolutions = 0
        Exit Function
  End If
  
  ReDim Preserve FSolutionPoints(FkSolPoints) ' удаляем хранилище точек пересечений
  For I = LBound(FPoints) To UBound(FPoints)
    If I < UBound(FPoints) Then
          If (FPoints(I).y <= Yvalue) And (FPoints(I + 1).y >= Yvalue) Or (FPoints(I).y >= Yvalue) And (FPoints(I + 1).y <= Yvalue) Then    ' must be solution here
              If (FPoints(I).y = Yvalue) And (FPoints(I + 1).y = Yvalue) Then   ' infinite solutions of line segment
                  If FkSolPoints = 0 Then
                      AddPointToSolPoints FPoints(I).x, FPoints(I).y
                  ElseIf FSolutionPoints(FkSolPoints - 1).x <> FPoints(I).x Then ' особенности VBA, чтобы при FkSolPoints = 0 не падало
                      ' особенности VBA,
                      AddPointToSolPoints FPoints(I).x, FPoints(I).y
                  End If
                  
              Else ' one solution
                   x1 = FPoints(I).x
                   x2 = FPoints(I + 1).x
                   y1 = FPoints(I).y
                   y2 = FPoints(I + 1).y
                   x = (x2 - x1) / (y2 - y1) * (Yvalue - y1) + x1
                   AddPointToSolPoints x, Yvalue
              End If
          End If
    Else
        If FPoints(I).y = Yvalue Then
            AddPointToSolPoints FPoints(I).x, FPoints(I).y
        End If
    End If
  Next I
  
  If FkSolPoints = 0 And with_extrapolation = TS_EXTRPOLATION Then
        ' проверяем существование y на левом крае
        I = 0
        y1 = FPoints(I).y
        y2 = FPoints(I + 1).y
        If ((Yvalue - y1) * (y1 - y2) > 0) Then
             x1 = FPoints(I).x
             x2 = FPoints(I + 1).x
             x = (x2 - x1) / (y2 - y1) * (Yvalue - y1) + x1
             AddPointToSolPoints x, Yvalue
        End If
        ' проверяем существование y на правом крае
        I = UBound(FPoints)
        y1 = FPoints(I).y
        y2 = FPoints(I - 1).y
        If ((Yvalue - y1) * (y1 - y2) > 0) Then
             x1 = FPoints(I).x
             x2 = FPoints(I - 1).x
             x = (x2 - x1) / (y2 - y1) * (Yvalue - y1) + x1
             AddPointToSolPoints x, Yvalue
        End If
  End If
  FindSolutions = FkSolPoints
  Exit Function
err1:
            ' унифицированная реакция на ошибочный ввод ключевых параметров класса
        Dim msg As String, fname As String
        fname = "FindSolutions"
        msg = class_name_ & "." & fname & ": error finding solution for" & Yvalue & " = " & S(Yvalue)
        addLogMsg msg
        Err.Raise kErrCInterpolation, class_name_ & "." & fname, msg
End Function
Public Function FindMinOneSolution(Yvalue As Double, Optional ByVal with_extrapolation As CInterpolation_SOLUTION = TS_EXTRPOLATION) As Double
' FindSolutions Функция поиска решений X по известному Y. По умолчанию расчет ведется с линейной экстраполяцией на краях
' @param Yvalue - значение Y
' @param with_extrapolation - производить ли экстраполяцию при расчете
' @return Возвращает искомое решение, если решение одно,возвращает минимальное значения для решения, если значений несколько,
' Вызывает исключение, если решений нет
    Dim points_solve_size As Integer
    
    points_solve_size = FindSolutions(Yvalue, with_extrapolation)
    If (points_solve_size = 1) Then
        FindMinOneSolution = Me.SolutionPointX(1)
    ElseIf (points_solve_size > 1) Then
        FindMinOneSolution = Me.SolutionPointX(1) ' тут надо проверить - что возвращается, сделать возвращение минимального
    Else
        FindMinOneSolution = 0
        'Err.Raise kErrArraySize, , "FindMinOneSolution завершился неудачно, решений нет"
    End If
End Function
Public Function FindMaxOneSolution(Yvalue As Double, Optional ByVal with_extrapolation As CInterpolation_SOLUTION = TS_EXTRPOLATION) As Double
' FindSolutions Функция поиска решений X по известному Y. По умолчанию расчет ведется с линейной экстраполяцией на краях
' @param Yvalue - значение Y
' @param with_extrapolation - производить ли экстраполяцию при расчете
' @return Возвращает искомое решение, если решение одно,возвращает максимальное значения для решения, если значений несколько,
' Вызывает исключение, если решений нет
    Dim points_solve_size As Integer
    
    points_solve_size = FindSolutions(Yvalue, with_extrapolation)
    If (points_solve_size = 1) Then
        FindMaxOneSolution = Me.SolutionPointX(1)
    ElseIf (points_solve_size > 1) Then
        FindMaxOneSolution = Me.SolutionPointX(points_solve_size) ' возвращаем послежнюю точку
    Else
        Err.Raise kErrArraySize, , "FindMaxOneSolution завершился неудачно, решений нет"
    End If
End Function
Private Sub AddPointToSolPoints(ByVal x As Double, ByVal y As Double)
      Dim I As Integer
      If FkSolPoints > 0 Then
        For I = 0 To FkSolPoints - 1
          If FSolutionPoints(I).x = x Then
              ' если точка решения уже есть - перезапишем
              FSolutionPoints(I).y = y
              Exit Sub
          End If
        Next I
      End If
      
      ReDim Preserve FSolutionPoints(FkSolPoints)
      FSolutionPoints(FkSolPoints).x = x
      FSolutionPoints(FkSolPoints).y = y
      FkSolPoints = FkSolPoints + 1
End Sub
Public Function getPoint(ByVal x As Double) As Double
     Dim n As Integer
     Dim x1, x2, y1, y2 As Double
     Dim msg As String
    ' интерполирует или экстраполирует значения по кривой - линейно
     getPoint = 0
     If FkPoint < 2 And Not isStepFunction Then
         msg = "CInterpolation.getPoint: error - trying to find intersection with one point line"
         Err.Raise kErrCInterpolation, , msg
        
     End If
     ' если ступенчатая функция - то достаточно только одной точки чтобы получить значение где угодно
     If FkPoint < 1 Then
         msg = "CInterpolation.getPoint: error - trying to find intersection with line without points"
         Err.Raise kErrCInterpolation, , msg
        
     End If
     
     n = getFirstPointNo(x)
     x1 = FPoints(n).x
     y1 = FPoints(n).y
     
     If FkPoint > 1 Then
        x2 = FPoints(n + 1).x
        y2 = FPoints(n + 1).y
     Else
        x2 = x1
        y2 = y1
     End If
     
     ' делаем проверку - если функция ступенчатая то выдаем не интерполированное значение, а значение в предущей точке
     If isStepFunction Then
        If x >= x2 Then
            getPoint = y2
        Else
            getPoint = y1
        End If
     Else
         getPoint = (y2 - y1) / (x2 - x1) * (x - x1) + y1
 End If
End Function
Public Function TestPoint(ByVal x As Double) As Integer
    ' проверяет если точка с заданным аргументом
    '
     Dim I, n As Integer
     
     n = -1
     For I = 0 To FkPoint - 1
        If FPoints(I).x = x Then
            n = I
            Exit For
        End If
     Next I
     TestPoint = n
End Function
Public Sub ClearPoints()
    ReDim FPoints(0)
    ReDim FSolutionPoints(0)
    ReDim FStablePoints(0)
    FkPoint = 0
    FkSolPoints = 0
    FkStablePoints = 0
End Sub
Public Sub AddPointsCurve(ParamArray crv())
' добавляет в кривую все точки из другой кривой
    Dim I As Integer, j As Integer
    Dim crv_local As CInterpolation
        
    For j = LBound(crv) To UBound(crv)
        Set crv_local = crv(j)
        For I = 1 To crv_local.num_points
            Me.AddPoint crv_local.pointX(I), crv_local.PointY(I), crv_local.pointStable(I)
        Next I
    Next j
End Sub
Public Sub AddPoint(ByVal x As Double, ByVal y As Double, Optional isStable As Boolean = False)
    ' добавление точки с сортировкой и обеспечением возрастания аргументов
     Dim I, n As Integer
     Dim CheckMinMaxY As Boolean
     Dim tp As TDPoint
     Dim f As Boolean
     
On Error GoTo err1:
     n = TestPoint(x)
     If n >= 0 Then ' если аргумент уже есть в массиве
        FPoints(n).x = x
        If (FPoints(n).y = FMinY) Or (FPoints(n).y = FMinY) Then
              CheckMinMaxY = True
        Else
              CheckMinMaxY = False
              If y > FMaxY Then FMaxY = y
              If y < FMinY Then FMinY = y
        End If
        FPoints(n).y = y
        FPoints(n).stable = isStable
        If CheckMinMaxY Then Call FindMinMaxY
        Exit Sub
     End If
     
     ReDim Preserve FPoints(FkPoint)
     
     FPoints(FkPoint).x = x
     FPoints(FkPoint).y = y
     FPoints(FkPoint).stable = isStable
     
     ' дальше сортируем точки, чтобы получилось все хорошо
     If (y > FMaxY) Or (FkPoint = LBound(FPoints)) Then FMaxY = y
     If (y < FMinY) Or (FkPoint = LBound(FPoints)) Then FMinY = y
     FkPoint = FkPoint + 1
     If FkPoint > 1 Then
        I = FkPoint - 1
        f = True
        While f
            f = False
            If I > 0 Then
                If FPoints(I - 1).x > FPoints(I).x Then
                    tp = FPoints(I)
                    FPoints(I) = FPoints(I - 1)
                    FPoints(I - 1) = tp
                    I = I - 1
                    f = True
                End If
            End If
        Wend
     End If
     ' в конце перечитаем массив специальных стабильных точек
     Call UpdateStablePointsList
     
      Exit Sub
err1:
            ' унифицированная реакция на ошибочный ввод ключевых параметров класса
        Dim msg As String, fname As String
        fname = "AddPoint"
        msg = class_name_ & "." & fname & ": add error, x = " & S(x) & ": , y = " & S(y)
        addLogMsg msg
        Err.Raise kErrPVTinput, class_name_ & "." & fname, msg
End Sub
' функция которая по признакам точек обновляет массив стабильных точек
Private Sub UpdateStablePointsList()
    Dim I As Integer
    ReDim FStablePoints(0)
    FkStablePoints = 0
    
    ' заполняем массив - первая и последние точки там всегда есть по умолчанию
    For I = 0 To FkPoint - 1
        If FPoints(I).stable Or (I = 0) Or I = (FkPoint - 1) Then
            ReDim Preserve FStablePoints(FkStablePoints)
            FStablePoints(FkStablePoints) = FPoints(I).x
            FkStablePoints = FkStablePoints + 1
        End If
    Next I
End Sub
'Public Sub PrintPoints()
'    Dim i As Integer
'    For i = 0 To FkPoint - 1
'        'Debug.Print "i" = i; "x = "; FPoints(i).x; " "; "y = "; FPoints(i).y
'        Debug.Print FPoints(i).x & " " & FPoints(i).y
'    Next i
'End Sub
'
'Public Sub PrintValXY(ByVal x As Double)
'    Dim y As Double
'
'    y = getPoint(x)
'    Debug.Print "F(" + CStr(x) + ") = " + CStr(y)
'End Sub
'
'Public Sub PrintInterval(ByVal x As Double)
'    Dim S  As String
'    Dim n As Integer
'
'    n = getFirstPointNo(x)
'    S = CStr(FPoints(n).x) + " (" + CStr(x) + ") " + CStr(FPoints(n + 1).x)
'    Debug.Print S
'End Sub
' метод который позволяет получить кривую с заданным количеством точек
Public Function ClonePointsToNum(num_points As Integer) As CInterpolation
    Dim outCurve As New CInterpolation  ' определили новую кривую
    Dim I As Integer
    Dim xPoint As Double, DX As Double
    Dim NumToAdd As Integer
    Dim AddedStablePoints As Integer
    
    Const eps = 0.01
    
    outCurve.xName = xName
    outCurve.yName = yName
    
    If Me.num_points <= 1 Then
        Dim msg As String
        msg = "CInterpolation.ClonePointsToNum: error - trying to populate one point curve. curve name: " & note
        Err.Raise kErrCInterpolation, , msg
        'Call outCurve.AddPoint(0, 0)
        'Set ClonePointsToNum = outCurve
        'Exit Function
    End If
    ' добавим все стабильные точки в результирующую кривую
    For I = 1 To FkStablePoints
        xPoint = FStablePoints(I - 1)
        outCurve.AddPoint xPoint, getPoint(xPoint)
        If isStepFunction And xPoint > 0 Then outCurve.AddPoint xPoint - eps, getPoint(xPoint - eps)
    Next I
    
    AddedStablePoints = outCurve.num_points
    ' найдем точки равномерного распределения
    NumToAdd = num_points - AddedStablePoints   ' количество точек, которые надо добавить  концы отрезков уже добавлены
    If NumToAdd <= 0 Then
        Set ClonePointsToNum = outCurve
        Exit Function
    End If
    DX = (maxx - minx) / (NumToAdd + 1)      ' приращение - ориетировочное расстояние между точками которые добавляем
    ' добавим недостающие точки
    For I = 1 To NumToAdd
        xPoint = minx + DX * I
        outCurve.AddPoint xPoint, getPoint(xPoint)   ' добавляем точку в выходной массив
    Next I
    ' может так получится, что стабильные точки совпадают
    While outCurve.num_points < num_points And outCurve.num_points > 1
        Call outCurve.DivMaxL
    Wend
    Set ClonePointsToNum = outCurve
End Function
' функция разделяет максимальный отрезок пополам
Public Sub DivMaxL()
    Dim xNew, yNew As Double
    Dim MaxL As Double
    Dim I As Integer, MaxI As Integer
    
    MaxI = 0
    MaxL = 0
    For I = LBound(FPoints) + 1 To UBound(FPoints)
        If MaxL < (FPoints(I).x - FPoints(I - 1).x) Then
            MaxL = (FPoints(I).x - FPoints(I - 1).x)
            MaxI = I
        End If
    Next I
        
    If MaxI > 0 Then
        xNew = FPoints(MaxI - 1).x + (FPoints(MaxI).x - FPoints(MaxI - 1).x) / 2
        yNew = getPoint(xNew)
        AddPoint xNew, yNew
    End If
End Sub
Public Function ConvertPointsToNum(num_points As Integer) As Boolean
' функция преобразует кривую к кривой такой же с заданным количеством точек (пока линейная интерполяция)
    Dim I As Integer
    Dim MaxL As Double
    Dim MaxI As Integer
    Dim xNew As Double, yNew As Double
    
    MaxI = 0
    
    If FkPoint < num_points Then  ' тут надо добавлять точки
        Do
            MaxL = 0
            For I = LBound(FPoints) + 1 To UBound(FPoints)
                If MaxL < (FPoints(I).x - FPoints(I - 1).x) Then
                    MaxL = (FPoints(I).x - FPoints(I - 1).x)
                    MaxI = I
                End If
            Next I
                
            xNew = FPoints(MaxI - 1).x + (FPoints(MaxI).x - FPoints(MaxI - 1).x) / 2
            yNew = getPoint(xNew)
            AddPoint xNew, yNew
            
        Loop Until FkPoint = num_points
        ConvertPointsToNum = True
    Else                        ' тут надо удалять точки
        ConvertPointsToNum = False
    End If
End Function
Public Function transform(Optional ByVal multY As Double = 1, Optional ByVal sumY As Double = 0, _
                          Optional ByVal multX As Double = 1, Optional ByVal sumX As Double = 0) As CInterpolation
' преобразует кривую с использованием линейного преобразования на плоскости
 Dim I As Integer
 Dim crv As New CInterpolation
 
 For I = 0 To FkPoint - 1
    crv.AddPoint FPoints(I).x * multX + sumX, FPoints(I).y * multY + sumY
    'FPoints(i).y = FPoints(i).y * multY + sumY
    'FPoints(i).x = FPoints(i).x * multX + sumX
 Next I
 
 Set transform = crv
End Function
Public Sub loadFromVertRange(ByVal RangX As Variant, _
                    Optional ByVal RangY As Variant)
' функция для чтения range в кривую значений. range читаются по вертикали - значения должны быть в строках - столбец должен быть только один
' должна использоваться для чтения исходных данных с листа
'
    Dim I As Integer
    Dim NumVal As Integer
    Dim x As Double, y As Double
    Dim data_in_1_col As Boolean
    Dim arrx, arry
    
On Error GoTo err1:
    Call ClearPoints
    data_in_1_col = IsMissing(RangY)
    If data_in_1_col Then
        arrx = array_num_from_range(RangX, True)
        NumVal = UBound(arrx, 1)
    Else
        arrx = array_num_from_range(RangX, True)
        arry = array_num_from_range(RangY, True)
        NumVal = MinReal(UBound(arrx, 1), UBound(arry, 1))
        
    End If
    
    If NumVal < 0 Then GoTo err1:
    ' читаем поэлементно, чтобы отсеять пустые ячейки по пути
    On Error GoTo err2:
    For I = 1 To NumVal
        x = arrx(I, 1)
        If data_in_1_col Then
            y = arrx(I, 2)
        Else
            y = arry(I, 1)
        End If
        If (I = 1) Or (x > 0) Then
            If isStepFunction Then
                Me.AddPoint x, y, isStable:=True
            Else
                Me.AddPoint x, y, isStable:=False
            End If
        End If
    Next I
    Exit Sub
    
err1:
    Err.Raise 1, , "CInterpolation.loadFromVertRange: error read range value"
    Exit Sub
    
err2:
    addLogMsg "CInterpolation.loadFromVertRange: warning while read range value " & CStr(I) & " from " & CStr(NumVal)
    Resume Next
    
End Sub
Public Sub load_from_range(range As Variant)
' функция для чтения range [0..N,0..1] в кривую значений.
' должна использоваться для чтения исходных данных с листа
    Dim I As Integer
    Dim NumVal As Integer
    Dim x As Double, y As Double
    Dim arr
    Dim C2
    
    Call ClearPoints
    
    arr = array_num_from_range(range, True)
    
   ' If TypeName(range) = "Range" Then range = range.Value2
    
    ' читаем поэлементно, чтобы отсеять пустые ячейки по пути
    On Error Resume Next
    C2 = UBound(arr, 2)
    If C2 > 2 Then C2 = 2
    For I = LBound(arr, 1) To UBound(arr, 1)
        x = arr(I, 1)
        y = arr(I, C2)
        If isStepFunction Then
            Me.AddPoint x, y, isStable:=True
        Else
            Me.AddPoint x, y, isStable:=False
        End If
      
    Next I
End Sub
' cut curve by argument based on arg value
Public Function CutByValue(Optional cut_top_value As Double = 1E+20, _
                           Optional cut_bottom_value As Double = -1E-20) As CInterpolation
                  
            Dim I As Integer
            Dim j As Integer
            Dim FPts() As TDPoint
            
            
            j = 1
            For I = 1 To num_points
                If pointX(I) < cut_top_value And pointX(I) > cut_bottom_value Then
                    If j = 1 And I > 1 And cut_bottom_value < FPoints(I - 1).x Then
                        ReDim Preserve FPts(j)
                        FPts(j - 1).x = cut_bottom_value
                        FPts(j - 1).y = getPoint(cut_bottom_value)
                        FPts(j - 1).stable = False
                        j = j + 1
                    End If
                    
                    ReDim Preserve FPts(j)
                    FPts(j - 1) = FPoints(I - 1)
                    j = j + 1
                                        
                End If
            Next I
            
            If cut_top_value < FPoints(I - 2).x Then
                ReDim Preserve FPts(j - 1)
                FPts(j - 1).x = cut_top_value
                FPts(j - 1).y = getPoint(cut_top_value)
                FPts(j - 1).stable = False
                j = j + 1
            End If
            If j < 3 Then
                Err.Raise kErrCurvePointIndex, , "CInterpolation.CutByValue: too little points after cut = " & CStr(j - 1)
            End If
            FPoints = FPts
            FkPoint = j - 1
            Call UpdateStablePointsList
End Function
Public Function CutByCurve(crv As CInterpolation) As CInterpolation
' обрезание кривой с использованием другой кривой
    Dim I As Integer
    Dim J1, J2 As Integer
    J1 = 0
    J2 = 0
    Dim pcur As New CInterpolation
    Dim crv_min As CInterpolation
    Dim crv_val As Double
    Dim val As Double
    For I = 1 To num_points
        crv_val = crv.getPoint(pointX(I))
        If PointY(I) > crv_val Then
            pcur.AddPoint pointX(I), PointY(I)
            J1 = J1 + 1
        Else
            pcur.AddPoint pointX(I), crv_val
            J2 = J2 + 1
        End If
    Next I
    If J1 > 0 And J2 > 0 Then
        ' for sure there is an intersection - need to find and add it
        Set crv_min = SubtractCurve(crv)
        I = crv_min.FindSolutions(0)
        If I = 1 Then
            val = crv_min.SolutionPointX(1)
        Else
        End If
        ' adding Hdyn point as stable - to make sure to have pretty charts later
        pcur.AddPoint val - 1, MaxReal(crv.getPoint(val - 1), getPoint(val - 1)), isStable:=True
        pcur.AddPoint val, getPoint(val), isStable:=True
    End If
    Set CutByCurve = pcur
End Function
Public Sub FillByTemplate(crv1 As CInterpolation, crv2 As CInterpolation, crv_comb As CInterpolation, ctempl1 As CInterpolation, ctempl2 As CInterpolation)
' fills new curve by values from two others comparing crv_comb with templates
    Dim I As Integer
    Dim xval As Double, yval As Double
    Const eps = 0.001
    For I = 1 To crv_comb.num_points
        xval = crv_comb.pointX(I)
        yval = crv_comb.PointY(I)
        If Abs(yval - ctempl1.getPoint(xval)) < eps Then
            AddPoint xval, crv1.getPoint(xval), crv_comb.pointStable(I)
        ElseIf Abs(yval - ctempl2.getPoint(xval)) < eps Then
            AddPoint xval, crv2.getPoint(xval), crv_comb.pointStable(I)
        End If
    Next I
End Sub
Public Sub WriteToRange(RangX As range, Optional RangY As range, Optional ByVal numpt As Integer = 0)
    If numpt > 0 And num_points > 1 Then
        Me.ClonePointsToNum(numpt).WriteToRange RangX, RangY, -1
    ElseIf numpt = -1 Then
        WriteToVertRange RangX, RangY
    Else
        numpt = RangX.Rows.Count
        Me.ClonePointsToNum(numpt).WriteToRange RangX, RangY, -1
    End If
End Sub
Private Sub WriteToVertRange(RangX As range, RangY As range)
' позволим кривой записывать себя за заранее данный диапазон ячеек (тут хорошо бы сообразить уместится ли запись или нет - может надо кривую масштабировать?)
' функция записи кривой на лист excel
 On Error GoTo er1
    Dim ValX As Double, ValY As Double
    Dim NumStr As Integer
    Dim I As Integer
    
    RangX.Clear
    If Not RangY Is Nothing Then RangY.Clear
    NumStr = MinReal(num_points, RangX.Rows.Count)   ' определяем количество элементов в списке. Оно равно числу значений по оси X
    RangX.Cells(0, 1) = xName   ' XDescription
    If RangY Is Nothing Then
        RangX.Cells(0, 2) = yName  'YDescription
    Else
        RangY.Cells(0, 1) = yName
    End If
    For I = 1 To NumStr
        ValX = pointX(I)
        ValY = PointY(I)
        RangX.Cells(I, 1) = ValX
        If RangY Is Nothing Then
            RangX.Cells(I, 2) = ValY
        Else
            RangY.Cells(I, 1) = ValY
        End If
    Next I
    
    Exit Sub
er1:
    Err.Raise kErrWriteDataFromWorksheet, "CInterpolation.WriteToVertRange", "Ошибка, при записи кривой. Точек " & NumStr & " в диапазон ."
End Sub
Public Function SubtractCurve(curv As CInterpolation) As CInterpolation
' находит разность двух кривых
    Dim I As Integer
    Dim curve As New CInterpolation
    
    For I = 1 To num_points
        curve.AddPoint pointX(I), PointY(I) - curv.getPoint(pointX(I))
    Next I
    
    For I = 1 To curv.num_points
        curve.AddPoint curv.pointX(I), getPoint(curv.pointX(I)) - curv.PointY(I)
    Next I
    Set SubtractCurve = curve
End Function
' инициализация интерполяции данных
Public Sub init_interpolation(Optional interpolation_type As String = "Linear", _
                              Optional ByVal BoundLType As Long = 0, _
                              Optional ByVal BoundL As Double = 0, _
                              Optional ByVal BoundRType As Long = 0, _
                              Optional ByVal BoundR As Double = 0, _
                              Optional ByVal CRBoundType As Double = 0, _
                              Optional ByVal CRTension As Double = 0)
    
    
    
    Dim xval() As Double
    Dim yval() As Double
    Dim dval() As Double
    Dim nval As Long
    
    Dim I As Integer
On Error GoTo err1:
    nval = FkPoint
    ReDim xval(nval)
    ReDim yval(nval)
    ReDim dval(nval)
    
    For I = 0 To FkPoint - 1
        xval(I) = FPoints(I).x
        yval(I) = FPoints(I).y
        dval(I) = 0 ' todo - need find a way to specify derivatives
    Next I
    
    Select Case interpolation_type
        Case "Linear"
            If nval > 2 Then
                spline1DBuildLinear xval, yval, nval, spline_interpolant
            Else
            End If
        Case "Cubic"
            If nval > 2 Then
                spline1DBuildCubic xval, yval, nval, BoundLType, BoundL, BoundRType, BoundR, spline_interpolant
            Else
            End If
        Case "Akima"
            If nval > 5 Then
                spline1DBuildAkima xval, yval, nval, spline_interpolant
            Else
            End If
        Case "CatmullRom"
            If nval > 2 Then
                spline1DBuildCatmullRom xval, yval, nval, CRBoundType, CRTension, spline_interpolant
            Else
            End If
        Case "Hermite"
            If nval > 2 Then
                spline1DBuildHermite xval, yval, dval, nval, spline_interpolant
            Else
            End If
    End Select
    Exit Sub
err1:
            ' унифицированная реакция на ошибочный ввод ключевых параметров класса
        Dim msg As String, fname As String
        fname = "init_interpolation"
        msg = class_name_ & "." & fname & ": spline error, spline type = " & interpolation_type
        addLogMsg msg
        Err.Raise kErrPVTinput, class_name_ & "." & fname, msg
End Sub
' функция для возврата значения интерполированного сплайнами
Public Function get_interpolation_point(ByVal x As Double) As Double
On Error GoTo err1:
  get_interpolation_point = spline1DCalc(spline_interpolant, x)
  
  Exit Function
err1:
            ' унифицированная реакция на ошибочный ввод ключевых параметров класса
        Dim msg As String, fname As String
        fname = "get_interpolation_point"
        msg = class_name_ & "." & fname & ": spline error, x = " & S(x)
        addLogMsg msg
        Err.Raise kErrPVTinput, class_name_ & "." & fname, msg
End Function

