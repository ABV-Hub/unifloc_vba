''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2007, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Generation of a random uniformly distributed (Haar) orthogonal matrix
'
'INPUT PARAMETERS:
'    N   -   matrix size, N>=1
'
'OUTPUT PARAMETERS:
'    A   -   orthogonal NxN matrix, array[0..N-1,0..N-1]
'
'  -- ALGLIB routine --
'     04.12.2009
'     Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub RMatrixRndOrthogonal(ByVal N As Long, ByRef A() As Double)
    Dim i As Long
    Dim J As Long
    ReDim A(0# To N - 1#, 0# To N - 1#)
    For i = 0# To N - 1# Step 1
        For J = 0# To N - 1# Step 1
            If i = J Then
                A(i, J) = 1#
            Else
                A(i, J) = 0#
            End If
        Next J
    Next i
    Call RMatrixRndOrthogonalFromTheRight(A, N, N)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Generation of random NxN matrix with given condition number and norm2(A)=1
'
'INPUT PARAMETERS:
'    N   -   matrix size
'    C   -   condition number (in 2-norm)
'
'OUTPUT PARAMETERS:
'    A   -   random matrix with norm2(A)=1 and cond(A)=C
'
'  -- ALGLIB routine --
'     04.12.2009
'     Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub RMatrixRndCond(ByVal N As Long, _
         ByVal C As Double, _
         ByRef A() As Double)
    Dim i As Long
    Dim J As Long
    Dim L1 As Double
    Dim L2 As Double
    ReDim A(0# To N - 1#, 0# To N - 1#)
    If N = 1# Then
        
        '
        ' special case
        '
        A(0#, 0#) = 2# * RandomInteger(2#) - 1#
        Exit Sub
    End If
    L1 = 0#
    L2 = Log(1# / C)
    For i = 0# To N - 1# Step 1
        For J = 0# To N - 1# Step 1
            A(i, J) = 0#
        Next J
    Next i
    A(0#, 0#) = Exp(L1)
    For i = 1# To N - 2# Step 1
        A(i, i) = Exp(Rnd() * (L2 - L1) + L1)
    Next i
    A(N - 1#, N - 1#) = Exp(L2)
    Call RMatrixRndOrthogonalFromTheLeft(A, N, N)
    Call RMatrixRndOrthogonalFromTheRight(A, N, N)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Generation of a random Haar distributed orthogonal complex matrix
'
'INPUT PARAMETERS:
'    N   -   matrix size, N>=1
'
'OUTPUT PARAMETERS:
'    A   -   orthogonal NxN matrix, array[0..N-1,0..N-1]
'
'  -- ALGLIB routine --
'     04.12.2009
'     Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub CMatrixRndOrthogonal(ByVal N As Long, ByRef A() As Complex)
    Dim i As Long
    Dim J As Long
    ReDim A(0# To N - 1#, 0# To N - 1#)
    For i = 0# To N - 1# Step 1
        For J = 0# To N - 1# Step 1
            If i = J Then
                A(i, J) = C_Complex(1#)
            Else
                A(i, J) = C_Complex(0#)
            End If
        Next J
    Next i
    Call CMatrixRndOrthogonalFromTheRight(A, N, N)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Generation of random NxN complex matrix with given condition number C and
'norm2(A)=1
'
'INPUT PARAMETERS:
'    N   -   matrix size
'    C   -   condition number (in 2-norm)
'
'OUTPUT PARAMETERS:
'    A   -   random matrix with norm2(A)=1 and cond(A)=C
'
'  -- ALGLIB routine --
'     04.12.2009
'     Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub CMatrixRndCond(ByVal N As Long, _
         ByVal C As Double, _
         ByRef A() As Complex)
    Dim i As Long
    Dim J As Long
    Dim L1 As Double
    Dim L2 As Double
    Dim State As HQRNDState
    Dim V As Complex
    ReDim A(0# To N - 1#, 0# To N - 1#)
    If N = 1# Then
        
        '
        ' special case
        '
        Call HQRNDRandomize(State)
        Call HQRNDUnit2(State, V.X, V.Y)
        A(0#, 0#) = V
        Exit Sub
    End If
    L1 = 0#
    L2 = Log(1# / C)
    For i = 0# To N - 1# Step 1
        For J = 0# To N - 1# Step 1
            A(i, J) = C_Complex(0#)
        Next J
    Next i
    A(0#, 0#) = C_Complex(Exp(L1))
    For i = 1# To N - 2# Step 1
        A(i, i) = C_Complex(Exp(Rnd() * (L2 - L1) + L1))
    Next i
    A(N - 1#, N - 1#) = C_Complex(Exp(L2))
    Call CMatrixRndOrthogonalFromTheLeft(A, N, N)
    Call CMatrixRndOrthogonalFromTheRight(A, N, N)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Generation of random NxN symmetric matrix with given condition number  and
'norm2(A)=1
'
'INPUT PARAMETERS:
'    N   -   matrix size
'    C   -   condition number (in 2-norm)
'
'OUTPUT PARAMETERS:
'    A   -   random matrix with norm2(A)=1 and cond(A)=C
'
'  -- ALGLIB routine --
'     04.12.2009
'     Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub SMatrixRndCond(ByVal N As Long, _
         ByVal C As Double, _
         ByRef A() As Double)
    Dim i As Long
    Dim J As Long
    Dim L1 As Double
    Dim L2 As Double
    ReDim A(0# To N - 1#, 0# To N - 1#)
    If N = 1# Then
        
        '
        ' special case
        '
        A(0#, 0#) = 2# * RandomInteger(2#) - 1#
        Exit Sub
    End If
    
    '
    ' Prepare matrix
    '
    L1 = 0#
    L2 = Log(1# / C)
    For i = 0# To N - 1# Step 1
        For J = 0# To N - 1# Step 1
            A(i, J) = 0#
        Next J
    Next i
    A(0#, 0#) = Exp(L1)
    For i = 1# To N - 2# Step 1
        A(i, i) = (2# * RandomInteger(2#) - 1#) * Exp(Rnd() * (L2 - L1) + L1)
    Next i
    A(N - 1#, N - 1#) = Exp(L2)
    
    '
    ' Multiply
    '
    Call SMatrixRndMultiply(A, N)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Generation of random NxN symmetric positive definite matrix with given
'condition number and norm2(A)=1
'
'INPUT PARAMETERS:
'    N   -   matrix size
'    C   -   condition number (in 2-norm)
'
'OUTPUT PARAMETERS:
'    A   -   random SPD matrix with norm2(A)=1 and cond(A)=C
'
'  -- ALGLIB routine --
'     04.12.2009
'     Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub SPDMatrixRndCond(ByVal N As Long, _
         ByVal C As Double, _
         ByRef A() As Double)
    Dim i As Long
    Dim J As Long
    Dim L1 As Double
    Dim L2 As Double
    
    '
    ' Special cases
    '
    If N <= 0# Or C < 1# Then
        Exit Sub
    End If
    ReDim A(0# To N - 1#, 0# To N - 1#)
    If N = 1# Then
        A(0#, 0#) = 1#
        Exit Sub
    End If
    
    '
    ' Prepare matrix
    '
    L1 = 0#
    L2 = Log(1# / C)
    For i = 0# To N - 1# Step 1
        For J = 0# To N - 1# Step 1
            A(i, J) = 0#
        Next J
    Next i
    A(0#, 0#) = Exp(L1)
    For i = 1# To N - 2# Step 1
        A(i, i) = Exp(Rnd() * (L2 - L1) + L1)
    Next i
    A(N - 1#, N - 1#) = Exp(L2)
    
    '
    ' Multiply
    '
    Call SMatrixRndMultiply(A, N)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Generation of random NxN Hermitian matrix with given condition number  and
'norm2(A)=1
'
'INPUT PARAMETERS:
'    N   -   matrix size
'    C   -   condition number (in 2-norm)
'
'OUTPUT PARAMETERS:
'    A   -   random matrix with norm2(A)=1 and cond(A)=C
'
'  -- ALGLIB routine --
'     04.12.2009
'     Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub HMatrixRndCond(ByVal N As Long, _
         ByVal C As Double, _
         ByRef A() As Complex)
    Dim i As Long
    Dim J As Long
    Dim L1 As Double
    Dim L2 As Double
    ReDim A(0# To N - 1#, 0# To N - 1#)
    If N = 1# Then
        
        '
        ' special case
        '
        A(0#, 0#) = C_Complex(2# * RandomInteger(2#) - 1#)
        Exit Sub
    End If
    
    '
    ' Prepare matrix
    '
    L1 = 0#
    L2 = Log(1# / C)
    For i = 0# To N - 1# Step 1
        For J = 0# To N - 1# Step 1
            A(i, J) = C_Complex(0#)
        Next J
    Next i
    A(0#, 0#) = C_Complex(Exp(L1))
    For i = 1# To N - 2# Step 1
        A(i, i) = C_Complex((2# * RandomInteger(2#) - 1#) * Exp(Rnd() * (L2 - L1) + L1))
    Next i
    A(N - 1#, N - 1#) = C_Complex(Exp(L2))
    
    '
    ' Multiply
    '
    Call HMatrixRndMultiply(A, N)
    
    '
    ' post-process to ensure that matrix diagonal is real
    '
    For i = 0# To N - 1# Step 1
        A(i, i).Y = 0#
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Generation of random NxN Hermitian positive definite matrix with given
'condition number and norm2(A)=1
'
'INPUT PARAMETERS:
'    N   -   matrix size
'    C   -   condition number (in 2-norm)
'
'OUTPUT PARAMETERS:
'    A   -   random HPD matrix with norm2(A)=1 and cond(A)=C
'
'  -- ALGLIB routine --
'     04.12.2009
'     Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub HPDMatrixRndCond(ByVal N As Long, _
         ByVal C As Double, _
         ByRef A() As Complex)
    Dim i As Long
    Dim J As Long
    Dim L1 As Double
    Dim L2 As Double
    
    '
    ' Special cases
    '
    If N <= 0# Or C < 1# Then
        Exit Sub
    End If
    ReDim A(0# To N - 1#, 0# To N - 1#)
    If N = 1# Then
        A(0#, 0#) = C_Complex(1#)
        Exit Sub
    End If
    
    '
    ' Prepare matrix
    '
    L1 = 0#
    L2 = Log(1# / C)
    For i = 0# To N - 1# Step 1
        For J = 0# To N - 1# Step 1
            A(i, J) = C_Complex(0#)
        Next J
    Next i
    A(0#, 0#) = C_Complex(Exp(L1))
    For i = 1# To N - 2# Step 1
        A(i, i) = C_Complex(Exp(Rnd() * (L2 - L1) + L1))
    Next i
    A(N - 1#, N - 1#) = C_Complex(Exp(L2))
    
    '
    ' Multiply
    '
    Call HMatrixRndMultiply(A, N)
    
    '
    ' post-process to ensure that matrix diagonal is real
    '
    For i = 0# To N - 1# Step 1
        A(i, i).Y = 0#
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Multiplication of MxN matrix by NxN random Haar distributed orthogonal matrix
'
'INPUT PARAMETERS:
'    A   -   matrix, array[0..M-1, 0..N-1]
'    M, N-   matrix size
'
'OUTPUT PARAMETERS:
'    A   -   A*Q, where Q is random NxN orthogonal matrix
'
'  -- ALGLIB routine --
'     04.12.2009
'     Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub RMatrixRndOrthogonalFromTheRight(ByRef A() As Double, _
         ByVal M As Long, _
         ByVal N As Long)
    Dim Tau As Double
    Dim Lambda As Double
    Dim S As Long
    Dim i As Long
    Dim U1 As Double
    Dim U2 As Double
    Dim W() As Double
    Dim V() As Double
    Dim State As HQRNDState
    Dim i_ As Long
    If N = 1# Then
        
        '
        ' Special case
        '
        Tau = 2# * RandomInteger(2#) - 1#
        For i = 0# To M - 1# Step 1
            A(i, 0#) = A(i, 0#) * Tau
        Next i
        Exit Sub
    End If
    
    '
    ' General case.
    ' First pass.
    '
    ReDim W(0# To M - 1#)
    ReDim V(1# To N)
    Call HQRNDRandomize(State)
    For S = 2# To N Step 1
        
        '
        ' Prepare random normal v
        '
        Do
            i = 1#
            Do While i <= S
                Call HQRNDNormal2(State, U1, U2)
                V(i) = U1
                If i + 1# <= S Then
                    V(i + 1#) = U2
                End If
                i = i + 2#
            Loop
            Lambda = 0#
            For i_ = 1# To S Step 1
                Lambda = Lambda + V(i_) * V(i_)
            Next i_
        Loop Until Lambda <> 0#
        
        '
        ' Prepare and apply reflection
        '
        Call GenerateReflection(V, S, Tau)
        V(1#) = 1#
        Call ApplyReflectionFromTheRight(A, Tau, V, 0#, M - 1#, N - S, N - 1#, W)
    Next S
    
    '
    ' Second pass.
    '
    For i = 0# To N - 1# Step 1
        Tau = 2# * RandomInteger(2#) - 1#
        For i_ = 0# To M - 1# Step 1
            A(i_, i) = Tau * A(i_, i)
        Next i_
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Multiplication of MxN matrix by MxM random Haar distributed orthogonal matrix
'
'INPUT PARAMETERS:
'    A   -   matrix, array[0..M-1, 0..N-1]
'    M, N-   matrix size
'
'OUTPUT PARAMETERS:
'    A   -   Q*A, where Q is random MxM orthogonal matrix
'
'  -- ALGLIB routine --
'     04.12.2009
'     Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub RMatrixRndOrthogonalFromTheLeft(ByRef A() As Double, _
         ByVal M As Long, _
         ByVal N As Long)
    Dim Tau As Double
    Dim Lambda As Double
    Dim S As Long
    Dim i As Long
    Dim J As Long
    Dim U1 As Double
    Dim U2 As Double
    Dim W() As Double
    Dim V() As Double
    Dim State As HQRNDState
    Dim i_ As Long
    If M = 1# Then
        
        '
        ' special case
        '
        Tau = 2# * RandomInteger(2#) - 1#
        For J = 0# To N - 1# Step 1
            A(0#, J) = A(0#, J) * Tau
        Next J
        Exit Sub
    End If
    
    '
    ' General case.
    ' First pass.
    '
    ReDim W(0# To N - 1#)
    ReDim V(1# To M)
    Call HQRNDRandomize(State)
    For S = 2# To M Step 1
        
        '
        ' Prepare random normal v
        '
        Do
            i = 1#
            Do While i <= S
                Call HQRNDNormal2(State, U1, U2)
                V(i) = U1
                If i + 1# <= S Then
                    V(i + 1#) = U2
                End If
                i = i + 2#
            Loop
            Lambda = 0#
            For i_ = 1# To S Step 1
                Lambda = Lambda + V(i_) * V(i_)
            Next i_
        Loop Until Lambda <> 0#
        
        '
        ' Prepare and apply reflection
        '
        Call GenerateReflection(V, S, Tau)
        V(1#) = 1#
        Call ApplyReflectionFromTheLeft(A, Tau, V, M - S, M - 1#, 0#, N - 1#, W)
    Next S
    
    '
    ' Second pass.
    '
    For i = 0# To M - 1# Step 1
        Tau = 2# * RandomInteger(2#) - 1#
        For i_ = 0# To N - 1# Step 1
            A(i, i_) = Tau * A(i, i_)
        Next i_
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Multiplication of MxN complex matrix by NxN random Haar distributed
'complex orthogonal matrix
'
'INPUT PARAMETERS:
'    A   -   matrix, array[0..M-1, 0..N-1]
'    M, N-   matrix size
'
'OUTPUT PARAMETERS:
'    A   -   A*Q, where Q is random NxN orthogonal matrix
'
'  -- ALGLIB routine --
'     04.12.2009
'     Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub CMatrixRndOrthogonalFromTheRight(ByRef A() As Complex, _
         ByVal M As Long, _
         ByVal N As Long)
    Dim Lambda As Complex
    Dim Tau As Complex
    Dim S As Long
    Dim i As Long
    Dim W() As Complex
    Dim V() As Complex
    Dim State As HQRNDState
    Dim i_ As Long
    If N = 1# Then
        
        '
        ' Special case
        '
        Call HQRNDRandomize(State)
        Call HQRNDUnit2(State, Tau.X, Tau.Y)
        For i = 0# To M - 1# Step 1
            A(i, 0#) = C_Mul(A(i, 0#), Tau)
        Next i
        Exit Sub
    End If
    
    '
    ' General case.
    ' First pass.
    '
    ReDim W(0# To M - 1#)
    ReDim V(1# To N)
    Call HQRNDRandomize(State)
    For S = 2# To N Step 1
        
        '
        ' Prepare random normal v
        '
        Do
            For i = 1# To S Step 1
                Call HQRNDNormal2(State, Tau.X, Tau.Y)
                V(i) = Tau
            Next i
            Lambda = C_Complex(0#)
            For i_ = 1# To S Step 1
                Lambda = C_Add(Lambda, C_Mul(V(i_), Conj(V(i_))))
            Next i_
        Loop Until C_NotEqualR(Lambda, 0#)
        
        '
        ' Prepare and apply reflection
        '
        Call ComplexGenerateReflection(V, S, Tau)
        V(1#) = C_Complex(1#)
        Call ComplexApplyReflectionFromTheRight(A, Tau, V, 0#, M - 1#, N - S, N - 1#, W)
    Next S
    
    '
    ' Second pass.
    '
    For i = 0# To N - 1# Step 1
        Call HQRNDUnit2(State, Tau.X, Tau.Y)
        For i_ = 0# To M - 1# Step 1
            A(i_, i) = C_Mul(Tau, A(i_, i))
        Next i_
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Multiplication of MxN complex matrix by MxM random Haar distributed
'complex orthogonal matrix
'
'INPUT PARAMETERS:
'    A   -   matrix, array[0..M-1, 0..N-1]
'    M, N-   matrix size
'
'OUTPUT PARAMETERS:
'    A   -   Q*A, where Q is random MxM orthogonal matrix
'
'  -- ALGLIB routine --
'     04.12.2009
'     Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub CMatrixRndOrthogonalFromTheLeft(ByRef A() As Complex, _
         ByVal M As Long, _
         ByVal N As Long)
    Dim Tau As Complex
    Dim Lambda As Complex
    Dim S As Long
    Dim i As Long
    Dim J As Long
    Dim W() As Complex
    Dim V() As Complex
    Dim State As HQRNDState
    Dim i_ As Long
    If M = 1# Then
        
        '
        ' special case
        '
        Call HQRNDRandomize(State)
        Call HQRNDUnit2(State, Tau.X, Tau.Y)
        For J = 0# To N - 1# Step 1
            A(0#, J) = C_Mul(A(0#, J), Tau)
        Next J
        Exit Sub
    End If
    
    '
    ' General case.
    ' First pass.
    '
    ReDim W(0# To N - 1#)
    ReDim V(1# To M)
    Call HQRNDRandomize(State)
    For S = 2# To M Step 1
        
        '
        ' Prepare random normal v
        '
        Do
            For i = 1# To S Step 1
                Call HQRNDNormal2(State, Tau.X, Tau.Y)
                V(i) = Tau
            Next i
            Lambda = C_Complex(0#)
            For i_ = 1# To S Step 1
                Lambda = C_Add(Lambda, C_Mul(V(i_), Conj(V(i_))))
            Next i_
        Loop Until C_NotEqualR(Lambda, 0#)
        
        '
        ' Prepare and apply reflection
        '
        Call ComplexGenerateReflection(V, S, Tau)
        V(1#) = C_Complex(1#)
        Call ComplexApplyReflectionFromTheLeft(A, Tau, V, M - S, M - 1#, 0#, N - 1#, W)
    Next S
    
    '
    ' Second pass.
    '
    For i = 0# To M - 1# Step 1
        Call HQRNDUnit2(State, Tau.X, Tau.Y)
        For i_ = 0# To N - 1# Step 1
            A(i, i_) = C_Mul(Tau, A(i, i_))
        Next i_
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Symmetric multiplication of NxN matrix by random Haar distributed
'orthogonal  matrix
'
'INPUT PARAMETERS:
'    A   -   matrix, array[0..N-1, 0..N-1]
'    N   -   matrix size
'
'OUTPUT PARAMETERS:
'    A   -   Q'*A*Q, where Q is random NxN orthogonal matrix
'
'  -- ALGLIB routine --
'     04.12.2009
'     Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub SMatrixRndMultiply(ByRef A() As Double, ByVal N As Long)
    Dim Tau As Double
    Dim Lambda As Double
    Dim S As Long
    Dim i As Long
    Dim U1 As Double
    Dim U2 As Double
    Dim W() As Double
    Dim V() As Double
    Dim State As HQRNDState
    Dim i_ As Long
    
    '
    ' General case.
    '
    ReDim W(0# To N - 1#)
    ReDim V(1# To N)
    Call HQRNDRandomize(State)
    For S = 2# To N Step 1
        
        '
        ' Prepare random normal v
        '
        Do
            i = 1#
            Do While i <= S
                Call HQRNDNormal2(State, U1, U2)
                V(i) = U1
                If i + 1# <= S Then
                    V(i + 1#) = U2
                End If
                i = i + 2#
            Loop
            Lambda = 0#
            For i_ = 1# To S Step 1
                Lambda = Lambda + V(i_) * V(i_)
            Next i_
        Loop Until Lambda <> 0#
        
        '
        ' Prepare and apply reflection
        '
        Call GenerateReflection(V, S, Tau)
        V(1#) = 1#
        Call ApplyReflectionFromTheRight(A, Tau, V, 0#, N - 1#, N - S, N - 1#, W)
        Call ApplyReflectionFromTheLeft(A, Tau, V, N - S, N - 1#, 0#, N - 1#, W)
    Next S
    
    '
    ' Second pass.
    '
    For i = 0# To N - 1# Step 1
        Tau = 2# * RandomInteger(2#) - 1#
        For i_ = 0# To N - 1# Step 1
            A(i_, i) = Tau * A(i_, i)
        Next i_
        For i_ = 0# To N - 1# Step 1
            A(i, i_) = Tau * A(i, i_)
        Next i_
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Hermitian multiplication of NxN matrix by random Haar distributed
'complex orthogonal matrix
'
'INPUT PARAMETERS:
'    A   -   matrix, array[0..N-1, 0..N-1]
'    N   -   matrix size
'
'OUTPUT PARAMETERS:
'    A   -   Q^H*A*Q, where Q is random NxN orthogonal matrix
'
'  -- ALGLIB routine --
'     04.12.2009
'     Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub HMatrixRndMultiply(ByRef A() As Complex, ByVal N As Long)
    Dim Tau As Complex
    Dim Lambda As Complex
    Dim S As Long
    Dim i As Long
    Dim W() As Complex
    Dim V() As Complex
    Dim State As HQRNDState
    Dim i_ As Long
    
    '
    ' General case.
    '
    ReDim W(0# To N - 1#)
    ReDim V(1# To N)
    Call HQRNDRandomize(State)
    For S = 2# To N Step 1
        
        '
        ' Prepare random normal v
        '
        Do
            For i = 1# To S Step 1
                Call HQRNDNormal2(State, Tau.X, Tau.Y)
                V(i) = Tau
            Next i
            Lambda = C_Complex(0#)
            For i_ = 1# To S Step 1
                Lambda = C_Add(Lambda, C_Mul(V(i_), Conj(V(i_))))
            Next i_
        Loop Until C_NotEqualR(Lambda, 0#)
        
        '
        ' Prepare and apply reflection
        '
        Call ComplexGenerateReflection(V, S, Tau)
        V(1#) = C_Complex(1#)
        Call ComplexApplyReflectionFromTheRight(A, Tau, V, 0#, N - 1#, N - S, N - 1#, W)
        Call ComplexApplyReflectionFromTheLeft(A, Conj(Tau), V, N - S, N - 1#, 0#, N - 1#, W)
    Next S
    
    '
    ' Second pass.
    '
    For i = 0# To N - 1# Step 1
        Call HQRNDUnit2(State, Tau.X, Tau.Y)
        For i_ = 0# To N - 1# Step 1
            A(i_, i) = C_Mul(Tau, A(i_, i))
        Next i_
        Tau = Conj(Tau)
        For i_ = 0# To N - 1# Step 1
            A(i, i_) = C_Mul(Tau, A(i, i_))
        Next i_
    Next i
End Sub
