''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2005-2007, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Computation of nodes and weights for a Gauss quadrature formula
'
'The algorithm generates the N-point Gauss quadrature formula  with  weight
'function given by coefficients alpha and beta  of  a  recurrence  relation
'which generates a system of orthogonal polynomials:
'
'P-1(x)   =  0
'P0(x)    =  1
'Pn+1(x)  =  (x-alpha(n))*Pn(x)  -  beta(n)*Pn-1(x)
'
'and zeroth moment Mu0
'
'Mu0 = integral(W(x)dx,a,b)
'
'INPUT PARAMETERS:
'    Alpha   –   array[0..N-1], alpha coefficients
'    Beta    –   array[0..N-1], beta coefficients
'                Zero-indexed element is not used and may be arbitrary.
'                Beta[I]>0.
'    Mu0     –   zeroth moment of the weight function.
'    N       –   number of nodes of the quadrature formula, N>=1
'
'OUTPUT PARAMETERS:
'    Info    -   error code:
'                * -3    internal eigenproblem solver hasn't converged
'                * -2    Beta[i]<=0
'                * -1    incorrect N was passed
'                *  1    OK
'    X       -   array[0..N-1] - array of quadrature nodes,
'                in ascending order.
'    W       -   array[0..N-1] - array of quadrature weights.
'
'  -- ALGLIB --
'     Copyright 2005-2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub GQGenerateRec(ByRef Alpha() As Double, _
         ByRef Beta() As Double, _
         ByVal Mu0 As Double, _
         ByVal N As Long, _
         ByRef Info As Long, _
         ByRef X() As Double, _
         ByRef w() As Double)
    Dim i As Long
    Dim D() As Double
    Dim E() As Double
    Dim z() As Double
    If N < 1# Then
        Info = -1#
        Exit Sub
    End If
    Info = 1#
    
    '
    ' Initialize
    '
    ReDim D(0 To N - 1)
    ReDim E(0 To N - 1)
    For i = 1# To N - 1# Step 1
        D(i - 1#) = Alpha(i - 1#)
        If Beta(i) <= 0# Then
            Info = -2#
            Exit Sub
        End If
        E(i - 1#) = Sqr(Beta(i))
    Next i
    D(N - 1#) = Alpha(N - 1#)
    
    '
    ' EVD
    '
    If Not SMatrixTDEVD(D, E, N, 3#, z) Then
        Info = -3#
        Exit Sub
    End If
    
    '
    ' Generate
    '
    ReDim X(0 To N - 1)
    ReDim w(0 To N - 1)
    For i = 1# To N Step 1
        X(i - 1#) = D(i - 1#)
        w(i - 1#) = Mu0 * Square(z(0#, i - 1#))
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Computation of nodes and weights for a Gauss-Lobatto quadrature formula
'
'The algorithm generates the N-point Gauss-Lobatto quadrature formula  with
'weight function given by coefficients alpha and beta of a recurrence which
'generates a system of orthogonal polynomials.
'
'P-1(x)   =  0
'P0(x)    =  1
'Pn+1(x)  =  (x-alpha(n))*Pn(x)  -  beta(n)*Pn-1(x)
'
'and zeroth moment Mu0
'
'Mu0 = integral(W(x)dx,a,b)
'
'INPUT PARAMETERS:
'    Alpha   –   array[0..N-2], alpha coefficients
'    Beta    –   array[0..N-2], beta coefficients.
'                Zero-indexed element is not used, may be arbitrary.
'                Beta[I]>0
'    Mu0     –   zeroth moment of the weighting function.
'    A       –   left boundary of the integration interval.
'    B       –   right boundary of the integration interval.
'    N       –   number of nodes of the quadrature formula, N>=3
'                (including the left and right boundary nodes).
'
'OUTPUT PARAMETERS:
'    Info    -   error code:
'                * -3    internal eigenproblem solver hasn't converged
'                * -2    Beta[i]<=0
'                * -1    incorrect N was passed
'                *  1    OK
'    X       -   array[0..N-1] - array of quadrature nodes,
'                in ascending order.
'    W       -   array[0..N-1] - array of quadrature weights.
'
'  -- ALGLIB --
'     Copyright 2005-2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub GQGenerateGaussLobattoRec(ByRef Alpha_() As Double, _
         ByRef Beta_() As Double, _
         ByVal Mu0 As Double, _
         ByVal A As Double, _
         ByVal B As Double, _
         ByVal N As Long, _
         ByRef Info As Long, _
         ByRef X() As Double, _
         ByRef w() As Double)
    Dim Alpha() As Double
    Dim Beta() As Double
    Dim i As Long
    Dim D() As Double
    Dim E() As Double
    Dim z() As Double
    Dim PIM1A As Double
    Dim PIA As Double
    Dim PIM1B As Double
    Dim PIB As Double
    Dim T As Double
    Dim A11 As Double
    Dim A12 As Double
    Dim A21 As Double
    Dim A22 As Double
    Dim b1 As Double
    Dim b2 As Double
    Dim Alph As Double
    Dim Bet As Double
    Alpha = Alpha_
    Beta = Beta_
    If N <= 2# Then
        Info = -1#
        Exit Sub
    End If
    Info = 1#
    
    '
    ' Initialize, D[1:N+1], E[1:N]
    '
    N = N - 2#
    ReDim D(0 To N + 2# - 1)
    ReDim E(0 To N + 1# - 1)
    For i = 1# To N + 1# Step 1
        D(i - 1#) = Alpha(i - 1#)
    Next i
    For i = 1# To N Step 1
        If Beta(i) <= 0# Then
            Info = -2#
            Exit Sub
        End If
        E(i - 1#) = Sqr(Beta(i))
    Next i
    
    '
    ' Caclulate Pn(a), Pn+1(a), Pn(b), Pn+1(b)
    '
    Beta(0#) = 0#
    PIM1A = 0#
    PIA = 1#
    PIM1B = 0#
    PIB = 1#
    For i = 1# To N + 1# Step 1
        
        '
        ' Pi(a)
        '
        T = (A - Alpha(i - 1#)) * PIA - Beta(i - 1#) * PIM1A
        PIM1A = PIA
        PIA = T
        
        '
        ' Pi(b)
        '
        T = (B - Alpha(i - 1#)) * PIB - Beta(i - 1#) * PIM1B
        PIM1B = PIB
        PIB = T
    Next i
    
    '
    ' Calculate alpha'(n+1), beta'(n+1)
    '
    A11 = PIA
    A12 = PIM1A
    A21 = PIB
    A22 = PIM1B
    b1 = A * PIA
    b2 = B * PIB
    If Abs(A11) > Abs(A21) Then
        A22 = A22 - A12 * A21 / A11
        b2 = b2 - b1 * A21 / A11
        Bet = b2 / A22
        Alph = (b1 - Bet * A12) / A11
    Else
        A12 = A12 - A22 * A11 / A21
        b1 = b1 - b2 * A11 / A21
        Bet = b1 / A12
        Alph = (b2 - Bet * A22) / A21
    End If
    If Bet < 0# Then
        Info = -3#
        Exit Sub
    End If
    D(N + 1#) = Alph
    E(N) = Sqr(Bet)
    
    '
    ' EVD
    '
    If Not SMatrixTDEVD(D, E, N + 2#, 3#, z) Then
        Info = -3#
        Exit Sub
    End If
    
    '
    ' Generate
    '
    ReDim X(0 To N + 2# - 1)
    ReDim w(0 To N + 2# - 1)
    For i = 1# To N + 2# Step 1
        X(i - 1#) = D(i - 1#)
        w(i - 1#) = Mu0 * Square(z(0#, i - 1#))
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Computation of nodes and weights for a Gauss-Radau quadrature formula
'
'The algorithm generates the N-point Gauss-Radau  quadrature  formula  with
'weight function given by the coefficients alpha and  beta  of a recurrence
'which generates a system of orthogonal polynomials.
'
'P-1(x)   =  0
'P0(x)    =  1
'Pn+1(x)  =  (x-alpha(n))*Pn(x)  -  beta(n)*Pn-1(x)
'
'and zeroth moment Mu0
'
'Mu0 = integral(W(x)dx,a,b)
'
'INPUT PARAMETERS:
'    Alpha   –   array[0..N-2], alpha coefficients.
'    Beta    –   array[0..N-1], beta coefficients
'                Zero-indexed element is not used.
'                Beta[I]>0
'    Mu0     –   zeroth moment of the weighting function.
'    A       –   left boundary of the integration interval.
'    N       –   number of nodes of the quadrature formula, N>=2
'                (including the left boundary node).
'
'OUTPUT PARAMETERS:
'    Info    -   error code:
'                * -3    internal eigenproblem solver hasn't converged
'                * -2    Beta[i]<=0
'                * -1    incorrect N was passed
'                *  1    OK
'    X       -   array[0..N-1] - array of quadrature nodes,
'                in ascending order.
'    W       -   array[0..N-1] - array of quadrature weights.
'
'
'  -- ALGLIB --
'     Copyright 2005-2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub GQGenerateGaussRadauRec(ByRef Alpha_() As Double, _
         ByRef Beta_() As Double, _
         ByVal Mu0 As Double, _
         ByVal A As Double, _
         ByVal N As Long, _
         ByRef Info As Long, _
         ByRef X() As Double, _
         ByRef w() As Double)
    Dim Alpha() As Double
    Dim Beta() As Double
    Dim i As Long
    Dim D() As Double
    Dim E() As Double
    Dim z() As Double
    Dim PolIM1 As Double
    Dim PolI As Double
    Dim T As Double
    Alpha = Alpha_
    Beta = Beta_
    If N < 2# Then
        Info = -1#
        Exit Sub
    End If
    Info = 1#
    
    '
    ' Initialize, D[1:N], E[1:N]
    '
    N = N - 1#
    ReDim D(0 To N + 1# - 1)
    ReDim E(0 To N - 1)
    For i = 1# To N Step 1
        D(i - 1#) = Alpha(i - 1#)
        If Beta(i) <= 0# Then
            Info = -2#
            Exit Sub
        End If
        E(i - 1#) = Sqr(Beta(i))
    Next i
    
    '
    ' Caclulate Pn(a), Pn-1(a), and D[N+1]
    '
    Beta(0#) = 0#
    PolIM1 = 0#
    PolI = 1#
    For i = 1# To N Step 1
        T = (A - Alpha(i - 1#)) * PolI - Beta(i - 1#) * PolIM1
        PolIM1 = PolI
        PolI = T
    Next i
    D(N) = A - Beta(N) * PolIM1 / PolI
    
    '
    ' EVD
    '
    If Not SMatrixTDEVD(D, E, N + 1#, 3#, z) Then
        Info = -3#
        Exit Sub
    End If
    
    '
    ' Generate
    '
    ReDim X(0# To N)
    ReDim w(0# To N)
    For i = 1# To N + 1# Step 1
        X(i - 1#) = D(i - 1#)
        w(i - 1#) = Mu0 * Square(z(0#, i - 1#))
    Next i
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Returns nodes/weights for Gauss-Legendre quadrature on [-1,1] with N
'nodes.
'
'INPUT PARAMETERS:
'    N           -   number of nodes, >=1
'
'OUTPUT PARAMETERS:
'    Info        -   error code:
'                    * -4    an  error   was   detected   when  calculating
'                            weights/nodes.  N  is  too  large   to  obtain
'                            weights/nodes  with  high   enough   accuracy.
'                            Try  to   use   multiple   precision  version.
'                    * -3    internal eigenproblem solver hasn't  converged
'                    * -1    incorrect N was passed
'                    * +1    OK
'    X           -   array[0..N-1] - array of quadrature nodes,
'                    in ascending order.
'    W           -   array[0..N-1] - array of quadrature weights.
'
'
'  -- ALGLIB --
'     Copyright 12.05.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub GQGenerateGaussLegendre(ByVal N As Long, _
         ByRef Info As Long, _
         ByRef X() As Double, _
         ByRef w() As Double)
    Dim Alpha() As Double
    Dim Beta() As Double
    Dim i As Long
    If N < 1# Then
        Info = -1#
        Exit Sub
    End If
    ReDim Alpha(0 To N - 1)
    ReDim Beta(0 To N - 1)
    For i = 0# To N - 1# Step 1
        Alpha(i) = 0#
    Next i
    Beta(0#) = 2#
    For i = 1# To N - 1# Step 1
        Beta(i) = 1# / (4# - 1# / Square(i))
    Next i
    Call GQGenerateRec(Alpha, Beta, Beta(0#), N, Info, X, w)
    
    '
    ' test basic properties to detect errors
    '
    If Info > 0# Then
        If X(0#) < -1# Or X(N - 1#) > 1# Then
            Info = -4#
        End If
        For i = 0# To N - 2# Step 1
            If X(i) >= X(i + 1#) Then
                Info = -4#
            End If
        Next i
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Returns  nodes/weights  for  Gauss-Jacobi quadrature on [-1,1] with weight
'function W(x)=Power(1-x,Alpha)*Power(1+x,Beta).
'
'INPUT PARAMETERS:
'    N           -   number of nodes, >=1
'    Alpha       -   power-law coefficient, Alpha>-1
'    Beta        -   power-law coefficient, Beta>-1
'
'OUTPUT PARAMETERS:
'    Info        -   error code:
'                    * -4    an  error  was   detected   when   calculating
'                            weights/nodes. Alpha or  Beta  are  too  close
'                            to -1 to obtain weights/nodes with high enough
'                            accuracy, or, may be, N is too large.  Try  to
'                            use multiple precision version.
'                    * -3    internal eigenproblem solver hasn't converged
'                    * -1    incorrect N/Alpha/Beta was passed
'                    * +1    OK
'    X           -   array[0..N-1] - array of quadrature nodes,
'                    in ascending order.
'    W           -   array[0..N-1] - array of quadrature weights.
'
'
'  -- ALGLIB --
'     Copyright 12.05.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub GQGenerateGaussJacobi(ByVal N As Long, _
         ByVal Alpha As Double, _
         ByVal Beta As Double, _
         ByRef Info As Long, _
         ByRef X() As Double, _
         ByRef w() As Double)
    Dim A() As Double
    Dim B() As Double
    Dim Alpha2 As Double
    Dim Beta2 As Double
    Dim APB As Double
    Dim T As Double
    Dim i As Long
    Dim S As Double
    If N < 1# Or Alpha <= -1# Or Beta <= -1# Then
        Info = -1#
        Exit Sub
    End If
    ReDim A(0 To N - 1)
    ReDim B(0 To N - 1)
    APB = Alpha + Beta
    A(0#) = (Beta - Alpha) / (APB + 2#)
    T = (APB + 1#) * Log(2#) + LnGamma(Alpha + 1#, S) + LnGamma(Beta + 1#, S) - LnGamma(APB + 2#, S)
    If T > Log(MaxRealNumber) Then
        Info = -4#
        Exit Sub
    End If
    B(0#) = Exp(T)
    If N > 1# Then
        Alpha2 = Square(Alpha)
        Beta2 = Square(Beta)
        A(1#) = (Beta2 - Alpha2) / ((APB + 2#) * (APB + 4#))
        B(1#) = 4# * (Alpha + 1#) * (Beta + 1#) / ((APB + 3#) * Square(APB + 2#))
        For i = 2# To N - 1# Step 1
            A(i) = 0.25 * (Beta2 - Alpha2) / (i * i * (1# + 0.5 * APB / i) * (1# + 0.5 * (APB + 2#) / i))
            B(i) = 0.25 * (1# + Alpha / i) * (1# + Beta / i) * (1# + APB / i) / ((1# + 0.5 * (APB + 1#) / i) * (1# + 0.5 * (APB - 1#) / i) * Square(1# + 0.5 * APB / i))
        Next i
    End If
    Call GQGenerateRec(A, B, B(0#), N, Info, X, w)
    
    '
    ' test basic properties to detect errors
    '
    If Info > 0# Then
        If X(0#) < -1# Or X(N - 1#) > 1# Then
            Info = -4#
        End If
        For i = 0# To N - 2# Step 1
            If X(i) >= X(i + 1#) Then
                Info = -4#
            End If
        Next i
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Returns  nodes/weights  for  Gauss-Laguerre  quadrature  on  [0,+inf) with
'weight function W(x)=Power(x,Alpha)*Exp(-x)
'
'INPUT PARAMETERS:
'    N           -   number of nodes, >=1
'    Alpha       -   power-law coefficient, Alpha>-1
'
'OUTPUT PARAMETERS:
'    Info        -   error code:
'                    * -4    an  error  was   detected   when   calculating
'                            weights/nodes. Alpha is too  close  to  -1  to
'                            obtain weights/nodes with high enough accuracy
'                            or, may  be,  N  is  too  large.  Try  to  use
'                            multiple precision version.
'                    * -3    internal eigenproblem solver hasn't converged
'                    * -1    incorrect N/Alpha was passed
'                    * +1    OK
'    X           -   array[0..N-1] - array of quadrature nodes,
'                    in ascending order.
'    W           -   array[0..N-1] - array of quadrature weights.
'
'
'  -- ALGLIB --
'     Copyright 12.05.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub GQGenerateGaussLaguerre(ByVal N As Long, _
         ByVal Alpha As Double, _
         ByRef Info As Long, _
         ByRef X() As Double, _
         ByRef w() As Double)
    Dim A() As Double
    Dim B() As Double
    Dim T As Double
    Dim i As Long
    Dim S As Double
    If N < 1# Or Alpha <= -1# Then
        Info = -1#
        Exit Sub
    End If
    ReDim A(0 To N - 1)
    ReDim B(0 To N - 1)
    A(0#) = Alpha + 1#
    T = LnGamma(Alpha + 1#, S)
    If T >= Log(MaxRealNumber) Then
        Info = -4#
        Exit Sub
    End If
    B(0#) = Exp(T)
    If N > 1# Then
        For i = 1# To N - 1# Step 1
            A(i) = 2# * i + Alpha + 1#
            B(i) = i * (i + Alpha)
        Next i
    End If
    Call GQGenerateRec(A, B, B(0#), N, Info, X, w)
    
    '
    ' test basic properties to detect errors
    '
    If Info > 0# Then
        If X(0#) < 0# Then
            Info = -4#
        End If
        For i = 0# To N - 2# Step 1
            If X(i) >= X(i + 1#) Then
                Info = -4#
            End If
        Next i
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Returns  nodes/weights  for  Gauss-Hermite  quadrature on (-inf,+inf) with
'weight function W(x)=Exp(-x*x)
'
'INPUT PARAMETERS:
'    N           -   number of nodes, >=1
'
'OUTPUT PARAMETERS:
'    Info        -   error code:
'                    * -4    an  error  was   detected   when   calculating
'                            weights/nodes.  May be, N is too large. Try to
'                            use multiple precision version.
'                    * -3    internal eigenproblem solver hasn't converged
'                    * -1    incorrect N/Alpha was passed
'                    * +1    OK
'    X           -   array[0..N-1] - array of quadrature nodes,
'                    in ascending order.
'    W           -   array[0..N-1] - array of quadrature weights.
'
'
'  -- ALGLIB --
'     Copyright 12.05.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub GQGenerateGaussHermite(ByVal N As Long, _
         ByRef Info As Long, _
         ByRef X() As Double, _
         ByRef w() As Double)
    Dim A() As Double
    Dim B() As Double
    Dim i As Long
    If N < 1# Then
        Info = -1#
        Exit Sub
    End If
    ReDim A(0 To N - 1)
    ReDim B(0 To N - 1)
    For i = 0# To N - 1# Step 1
        A(i) = 0#
    Next i
    B(0#) = Sqr(4# * Atn(1#))
    If N > 1# Then
        For i = 1# To N - 1# Step 1
            B(i) = 0.5 * i
        Next i
    End If
    Call GQGenerateRec(A, B, B(0#), N, Info, X, w)
    
    '
    ' test basic properties to detect errors
    '
    If Info > 0# Then
        For i = 0# To N - 2# Step 1
            If X(i) >= X(i + 1#) Then
                Info = -4#
            End If
        Next i
    End If
End Sub

