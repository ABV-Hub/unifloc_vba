''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Copyright (c) 2009, Sergey Bochkanov (ALGLIB project).
'
'>>> SOURCE LICENSE >>>
'This program is free software; you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation (www.fsf.org); either version 2 of the
'License, or (at your option) any later version.
'
'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'GNU General Public License for more details.
'
'A copy of the GNU General Public License is available at
'http://www.fsf.org/licensing/licenses
'
'>>> END OF LICENSE >>>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Routines
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This  function  generates  1-dimensional  general  interpolation task with
'moderate Lipshitz constant (close to 1.0)
'
'If N=1 then suborutine generates only one point at the middle of [A,B]
'
'  -- ALGLIB --
'     Copyright 02.12.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub TaskGenInt1D(ByVal A As Double, _
         ByVal B As Double, _
         ByVal N As Long, _
         ByRef X() As Double, _
         ByRef y() As Double)
    Dim i As Long
    Dim H As Double
    ReDim X(0 To N - 1)
    ReDim y(0 To N - 1)
    If N > 1# Then
        X(0#) = A
        y(0#) = 2# * Rnd() - 1#
        H = (B - A) / (N - 1#)
        For i = 1# To N - 1# Step 1
            If i <> N - 1# Then
                X(i) = A + (i + 0.2 * (2# * Rnd() - 1#)) * H
            Else
                X(i) = B
            End If
            y(i) = y(i - 1#) + (2# * Rnd() - 1#) * (X(i) - X(i - 1#))
        Next i
    Else
        X(0#) = 0.5 * (A + B)
        y(0#) = 2# * Rnd() - 1#
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function generates  1-dimensional equidistant interpolation task with
'moderate Lipshitz constant (close to 1.0)
'
'If N=1 then suborutine generates only one point at the middle of [A,B]
'
'  -- ALGLIB --
'     Copyright 02.12.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub TaskGenInt1DEquidist(ByVal A As Double, _
         ByVal B As Double, _
         ByVal N As Long, _
         ByRef X() As Double, _
         ByRef y() As Double)
    Dim i As Long
    Dim H As Double
    ReDim X(0 To N - 1)
    ReDim y(0 To N - 1)
    If N > 1# Then
        X(0#) = A
        y(0#) = 2# * Rnd() - 1#
        H = (B - A) / (N - 1#)
        For i = 1# To N - 1# Step 1
            X(i) = A + i * H
            y(i) = y(i - 1#) + (2# * Rnd() - 1#) * H
        Next i
    Else
        X(0#) = 0.5 * (A + B)
        y(0#) = 2# * Rnd() - 1#
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function generates  1-dimensional Chebyshev-1 interpolation task with
'moderate Lipshitz constant (close to 1.0)
'
'If N=1 then suborutine generates only one point at the middle of [A,B]
'
'  -- ALGLIB --
'     Copyright 02.12.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub TaskGenInt1DCheb1(ByVal A As Double, _
         ByVal B As Double, _
         ByVal N As Long, _
         ByRef X() As Double, _
         ByRef y() As Double)
    Dim i As Long
    ReDim X(0 To N - 1)
    ReDim y(0 To N - 1)
    If N > 1# Then
        For i = 0# To N - 1# Step 1
            X(i) = 0.5 * (B + A) + 0.5 * (B - A) * Cos(Pi() * (2# * i + 1#) / (2# * N))
            If i = 0# Then
                y(i) = 2# * Rnd() - 1#
            Else
                y(i) = y(i - 1#) + (2# * Rnd() - 1#) * (X(i) - X(i - 1#))
            End If
        Next i
    Else
        X(0#) = 0.5 * (A + B)
        y(0#) = 2# * Rnd() - 1#
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function generates  1-dimensional Chebyshev-2 interpolation task with
'moderate Lipshitz constant (close to 1.0)
'
'If N=1 then suborutine generates only one point at the middle of [A,B]
'
'  -- ALGLIB --
'     Copyright 02.12.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub TaskGenInt1DCheb2(ByVal A As Double, _
         ByVal B As Double, _
         ByVal N As Long, _
         ByRef X() As Double, _
         ByRef y() As Double)
    Dim i As Long
    ReDim X(0 To N - 1)
    ReDim y(0 To N - 1)
    If N > 1# Then
        For i = 0# To N - 1# Step 1
            X(i) = 0.5 * (B + A) + 0.5 * (B - A) * Cos(Pi() * i / (N - 1#))
            If i = 0# Then
                y(i) = 2# * Rnd() - 1#
            Else
                y(i) = y(i - 1#) + (2# * Rnd() - 1#) * (X(i) - X(i - 1#))
            End If
        Next i
    Else
        X(0#) = 0.5 * (A + B)
        y(0#) = 2# * Rnd() - 1#
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function checks that all values from X[] are distinct. It does more
'than just usual floating point comparison:
'* first, it calculates max(X) and min(X)
'* second, it maps X[] from [min,max] to [1,2]
'* only at this stage actual comparison is done
'
'The meaning of such check is to ensure that all values are "distinct enough"
'and will not cause interpolation subroutine to fail.
'
'NOTE:
'    X[] must be sorted by ascending (subroutine ASSERT's it)
'
'  -- ALGLIB --
'     Copyright 02.12.2009 by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function APSERVAreDistinct(ByRef X_() As Double, _
         ByVal N As Long) As Boolean
    Dim Result As Boolean
    Dim X() As Double
    Dim IsSorted As Boolean
    Dim A As Double
    Dim B As Double
    Dim i As Long
    X = X_
    If N = 1# Then
        
        '
        ' everything is alright, it is up to caller to decide whether it
        ' can interpolate something with just one point
        '
        Result = True
        APSERVAreDistinct = Result
        Exit Function
    End If
    A = X(0#)
    B = X(0#)
    For i = 1# To N - 1# Step 1
        A = MinReal(A, X(i))
        B = MaxReal(B, X(i))
    Next i
    For i = 0# To N - 1# Step 1
        X(i) = (X(i) - A) / (B - A) + 1#
    Next i
    For i = 1# To N - 1# Step 1
        If X(i) = X(i - 1#) Then
            Result = False
            APSERVAreDistinct = Result
            Exit Function
        End If
    Next i
    Result = True
    APSERVAreDistinct = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Safe sqrt(x^2+y^2)
'
'  -- ALGLIB --
'     Copyright by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function SafePythag2(ByVal X As Double, ByVal y As Double) As Double
    Dim Result As Double
    Dim w As Double
    Dim XABS As Double
    Dim YABS As Double
    Dim z As Double
    XABS = Abs(X)
    YABS = Abs(y)
    w = MaxReal(XABS, YABS)
    z = MinReal(XABS, YABS)
    If z = 0# Then
        Result = w
    Else
        Result = w * Sqr(1# + Square(z / w))
    End If
    SafePythag2 = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Safe sqrt(x^2+y^2)
'
'  -- ALGLIB --
'     Copyright by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function SafePythag3(ByVal X As Double, _
         ByVal y As Double, _
         ByVal z As Double) As Double
    Dim Result As Double
    Dim w As Double
    w = MaxReal(Abs(X), MaxReal(Abs(y), Abs(z)))
    If w = 0# Then
        Result = 0#
        SafePythag3 = Result
        Exit Function
    End If
    X = X / w
    y = y / w
    z = z / w
    Result = w * Sqr(Square(X) + Square(y) + Square(z))
    SafePythag3 = Result
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'This function makes periodic mapping of X to [A,B].
'
'It accepts X, A, B (A>B). It returns T which lies in  [A,B] and integer K,
'such that X = T + K*(B-A).
'
'NOTES:
'* K is represented as real value, although actually it is integer
'* T is guaranteed to be in [A,B]
'* T replaces X
'
'  -- ALGLIB --
'     Copyright by Bochkanov Sergey
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub APPeriodicMap(ByRef X As Double, _
         ByVal A As Double, _
         ByVal B As Double, _
         ByRef K As Double)
    K = Int((X - A) / (B - A))
    X = X - K * (B - A)
    Do While X < A
        X = X + (B - A)
        K = K - 1#
    Loop
    Do While X > B
        X = X - (B - A)
        K = K + 1#
    Loop
    X = MaxReal(X, A)
    X = MinReal(X, B)
End Sub

